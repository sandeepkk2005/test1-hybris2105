{"code":"import { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Pipe } from '@angular/core';\r\nimport { noop } from 'lodash';\r\n/**\r\n * A pipe for an array of objects, that will search all the first level fields of an object,\r\n * or optionally allows you to specify which fields to include in the search.\r\n *\r\n * Only fields that correspond to string\r\n * values will be considered in the filtering. The filter implements the AND strategy, thus the filter will return search results\r\n * regardless of the search string order. IE search string \"Add Mobile\" will return strings such \"Mobile Address\" and \"Address Mobile\".\r\n */\r\nvar FilterByFieldPipe = /** @class */ (function () {\r\n    function FilterByFieldPipe() {\r\n    }\r\n    FilterByFieldPipe_1 = FilterByFieldPipe;\r\n    /** @ignore */\r\n    FilterByFieldPipe.transform = function (items, query, keys, callbackFn) {\r\n        var callback = callbackFn || noop;\r\n        var filterResult = [];\r\n        if (!query) {\r\n            callback(items);\r\n            return items;\r\n        }\r\n        var queryList = query.toLowerCase().split(' ');\r\n        (items || []).forEach(function (item) {\r\n            keys = keys || Object.keys(item);\r\n            var terms = keys\r\n                .map(function (key) { return item[key]; })\r\n                .filter(function (value) {\r\n                // eslint-disable-next-line @typescript-eslint/ban-types\r\n                return typeof value === 'string' || value instanceof String;\r\n            })\r\n                .map(function (value) { return value.toLowerCase(); });\r\n            var matchList = queryList\r\n                .map(function (queryItem) {\r\n                return !!terms.find(function (term) { return term.indexOf(queryItem) >= 0; });\r\n            })\r\n                .filter(function (exists) { return !exists; });\r\n            if (matchList.length === 0) {\r\n                filterResult.push(item);\r\n            }\r\n        });\r\n        callback(filterResult);\r\n        return filterResult;\r\n    };\r\n    /**\r\n     * @param query The search string in which the values will be filtered by. If no search string is given\r\n     * the original array of objects is be returned.\r\n     * @param keys An array of object fields which determines which key values that the filter will parse through.\r\n     * If no array is specified the filter will check each field value in the array of objects.\r\n     * @param callbackFn A function that will be executed after each iteration of the filter.\r\n     */\r\n    FilterByFieldPipe.prototype.transform = function (items, query, keys, callbackFn) {\r\n        return FilterByFieldPipe_1.transform(items, query, keys, callbackFn);\r\n    };\r\n    var FilterByFieldPipe_1;\r\n    FilterByFieldPipe = FilterByFieldPipe_1 = __decorate([\r\n        Pipe({ name: 'seFilterByField' })\r\n    ], FilterByFieldPipe);\r\n    return FilterByFieldPipe;\r\n}());\r\nexport { FilterByFieldPipe };\r\n//# sourceMappingURL=FilterByFieldPipe.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts"],"map":"{\"version\":3,\"file\":\"FilterByFieldPipe.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/pipes/filterByField/FilterByFieldPipe.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;;;;;;GAOG;AAEH;IAAA;IA+DA,CAAC;0BA/DY,iBAAiB;IAC1B,cAAc;IACA,2BAAS,GAAvB,UACI,KAAU,EACV,KAAa,EACb,IAAe,EACf,UAAoC;QAEpC,IAAM,QAAQ,GAAG,UAAU,IAAI,IAAI,CAAC;QACpC,IAAM,YAAY,GAAQ,EAAE,CAAC;QAE7B,IAAI,CAAC,KAAK,EAAE;YACR,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEhB,OAAO,KAAK,CAAC;SAChB;QAED,IAAM,SAAS,GAAa,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3D,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,IAAO;YAC1B,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEjC,IAAM,KAAK,GAAG,IAAI;iBACb,GAAG,CAAC,UAAC,GAAW,IAAK,OAAC,IAAY,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC;iBACxC,MAAM,CACH,UAAC,KAAa;gBACV,wDAAwD;gBACxD,OAAA,OAAO,KAAK,KAAK,QAAQ,IAAK,KAAgB,YAAY,MAAM;YAAhE,CAAgE,CACvE;iBACA,GAAG,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,CAAC,WAAW,EAAE,EAAnB,CAAmB,CAAC,CAAC;YAEjD,IAAM,SAAS,GAAG,SAAS;iBACtB,GAAG,CACA,UAAC,SAAiB;gBACd,OAAA,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,IAAY,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC;YAA5D,CAA4D,CACnE;iBACA,MAAM,CAAC,UAAC,MAAe,IAAK,OAAA,CAAC,MAAM,EAAP,CAAO,CAAC,CAAC;YAE1C,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3B;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,YAAY,CAAC,CAAC;QAEvB,OAAO,YAAY,CAAC;IACxB,CAAC;IAED;;;;;;OAMG;IACH,qCAAS,GAAT,UACI,KAAU,EACV,KAAa,EACb,IAAe,EACf,UAAoC;QAEpC,OAAO,mBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IACvE,CAAC;;IA9DQ,iBAAiB;QAD7B,IAAI,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC;OACrB,iBAAiB,CA+D7B;IAAD,wBAAC;CAAA,AA/DD,IA+DC;SA/DY,iBAAiB\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/pipes/filterByField/FilterByFieldPipe.d.ts","writeByteOrderMark":false,"text":"import { PipeTransform } from '@angular/core';\r\n/**\r\n * A pipe for an array of objects, that will search all the first level fields of an object,\r\n * or optionally allows you to specify which fields to include in the search.\r\n *\r\n * Only fields that correspond to string\r\n * values will be considered in the filtering. The filter implements the AND strategy, thus the filter will return search results\r\n * regardless of the search string order. IE search string \"Add Mobile\" will return strings such \"Mobile Address\" and \"Address Mobile\".\r\n */\r\nexport declare class FilterByFieldPipe implements PipeTransform {\r\n    /** @ignore */\r\n    static transform<T>(items: T[], query: string, keys?: string[], callbackFn?: (filtered: T[]) => void): T[];\r\n    /**\r\n     * @param query The search string in which the values will be filtered by. If no search string is given\r\n     * the original array of objects is be returned.\r\n     * @param keys An array of object fields which determines which key values that the filter will parse through.\r\n     * If no array is specified the filter will check each field value in the array of objects.\r\n     * @param callbackFn A function that will be executed after each iteration of the filter.\r\n     */\r\n    transform<T>(items: T[], query: string, keys?: string[], callbackFn?: (filtered: T[]) => void): T[];\r\n}\r\n"}}
