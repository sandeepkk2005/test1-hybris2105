{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { Injectable } from '@angular/core';\r\nimport * as lodash from 'lodash';\r\nimport { take } from 'rxjs/operators';\r\nimport { LogService } from '../../../services/log.service';\r\nimport { HttpUtils, UrlUtils } from '../../../utils';\r\nimport { HttpBackendService } from './http-backend.service';\r\n/*\r\n * This is the place where the entries through HttpBackenService invocations are being used.\r\n * All outbound http requests are funneled through here, when a match from HttpBackenService entries\r\n * is found, the request is intercepted and the specified mock is returned with especified status code.\r\n * If no match is found, the http request is effectively sent over the wire\r\n */\r\nvar BackendInterceptor = /** @class */ (function () {\r\n    function BackendInterceptor(httpBackendService, httpUtils, urlUtils, logService) {\r\n        this.httpBackendService = httpBackendService;\r\n        this.httpUtils = httpUtils;\r\n        this.urlUtils = urlUtils;\r\n        this.logService = logService;\r\n    }\r\n    BackendInterceptor.prototype.intercept = function (request, next) {\r\n        var backendMockRespond = this.httpBackendService.findMatchingMock(request);\r\n        if (!backendMockRespond) {\r\n            return next.handle(request);\r\n        }\r\n        var response;\r\n        if (typeof backendMockRespond === 'object') {\r\n            response = [200, lodash.cloneDeep(backendMockRespond)];\r\n        }\r\n        else {\r\n            // if (typeof backendMockRespond === 'function')\r\n            var data = null;\r\n            if (request.method === 'GET') {\r\n                data = decodeURIComponent(this.urlUtils.getQueryString(this.httpUtils.copyHttpParamsOrHeaders(request.params)));\r\n            }\r\n            else if (request.headers.get('Content-Type') === 'application/x-www-form-urlencoded') {\r\n                data = request.body; // it is a query string\r\n            }\r\n            else if (request.method === 'POST' || request.method === 'PUT') {\r\n                data = JSON.stringify(request.body);\r\n            }\r\n            var headers = this.httpUtils.copyHttpParamsOrHeaders(request.headers);\r\n            response = backendMockRespond(request.method, decodeURIComponent(request.urlWithParams), data, headers);\r\n        }\r\n        this.logService.debug(\"backend \" + status + \" response for \" + request.url + \": \");\r\n        return this.httpUtils.buildHttpResponse(request, response).pipe(take(1));\r\n    };\r\n    BackendInterceptor = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [HttpBackendService,\r\n            HttpUtils,\r\n            UrlUtils,\r\n            LogService])\r\n    ], BackendInterceptor);\r\n    return BackendInterceptor;\r\n}());\r\nexport { BackendInterceptor };\r\n//# sourceMappingURL=backend.interceptor.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/common@8.2.14_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@angular/common/http.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/log.service.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/interceptors/backend/http-backend.service.ts"],"map":"{\"version\":3,\"file\":\"backend.interceptor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/interceptors/backend/backend.interceptor.ts\"],\"names\":[],\"mappings\":\";AAQA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAEjC,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAEtC,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAC3D,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAE5D;;;;;GAKG;AAEH;IACI,4BACY,kBAAsC,EACtC,SAAoB,EACpB,QAAkB,EAClB,UAAsB;QAHtB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,cAAS,GAAT,SAAS,CAAW;QACpB,aAAQ,GAAR,QAAQ,CAAU;QAClB,eAAU,GAAV,UAAU,CAAY;IAC/B,CAAC;IAEJ,sCAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAClD,IAAM,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAE7E,IAAI,CAAC,kBAAkB,EAAE;YACrB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC/B;QAED,IAAI,QAAoF,CAAC;QAEzF,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;YACxC,QAAQ,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;SAC1D;aAAM;YACH,gDAAgD;YAChD,IAAI,IAAI,GAAkB,IAAI,CAAC;YAC/B,IAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;gBAC1B,IAAI,GAAG,kBAAkB,CACrB,IAAI,CAAC,QAAQ,CAAC,cAAc,CACxB,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,OAAO,CAAC,MAAM,CAAC,CACzD,CACJ,CAAC;aACL;iBAAM,IACH,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,mCAAmC,EAC7E;gBACE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,uBAAuB;aAC/C;iBAAM,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;gBAC9D,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACvC;YACD,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,OAAO,CAAC,OAAO,CAErE,CAAC;YAEF,QAAQ,GAAG,kBAAkB,CACzB,OAAO,CAAC,MAAM,EACd,kBAAkB,CAAC,OAAO,CAAC,aAAa,CAAC,EACzC,IAAI,EACJ,OAAO,CACV,CAAC;SACL;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,aAAW,MAAM,sBAAiB,OAAO,CAAC,GAAG,OAAI,CAAC,CAAC;QAEzE,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;IAjDQ,kBAAkB;QAD9B,UAAU,EAAE;yCAGuB,kBAAkB;YAC3B,SAAS;YACV,QAAQ;YACN,UAAU;OALzB,kBAAkB,CAkD9B;IAAD,yBAAC;CAAA,AAlDD,IAkDC;SAlDY,kBAAkB\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/interceptors/backend/backend.interceptor.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { LogService } from '../../../services/log.service';\r\nimport { HttpUtils, UrlUtils } from '../../../utils';\r\nimport { HttpBackendService } from './http-backend.service';\r\nexport declare class BackendInterceptor implements HttpInterceptor {\r\n    private httpBackendService;\r\n    private httpUtils;\r\n    private urlUtils;\r\n    private logService;\r\n    constructor(httpBackendService: HttpBackendService, httpUtils: HttpUtils, urlUtils: UrlUtils, logService: LogService);\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\r\n}\r\n"}}
