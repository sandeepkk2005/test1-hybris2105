{"code":"import { __assign, __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { CmsitemsRestService, NAVIGATION_MANAGEMENT_RESOURCE_URI } from 'cmscommons';\r\nimport { IRestServiceFactory, SeDowngradeService, apiUtils } from 'smarteditcommons';\r\nimport { NodeAncestryService } from './NodeAncestryService';\r\n/*\r\n * This service updates the navigation node by making REST call to the cmswebservices navigations API.\r\n */\r\nvar /* @ngInject */ NavigationEditorNodeService = /** @class */ (function () {\r\n    function /* @ngInject */ NavigationEditorNodeService(cmsitemsRestService, nodeAncestryService, restServiceFactory) {\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.nodeAncestryService = nodeAncestryService;\r\n        this.navigationNodeRestService = restServiceFactory.get(NAVIGATION_MANAGEMENT_RESOURCE_URI);\r\n    }\r\n    /* @ngInject */ NavigationEditorNodeService.prototype.getNavigationNode = function (nodeUid, uriParams) {\r\n        var payload = __assign({ identifier: nodeUid }, uriParams);\r\n        return this.navigationNodeRestService.get(payload);\r\n    };\r\n    /**\r\n     * Updates the position of the navigation node within the children collection of its parent.\r\n     * Fetches the parent node, and reorders the children, then updates the parent with the new child order.\r\n     *\r\n     * @param node The navigation node to be updated.\r\n     *\r\n     * E.g. Navigation Management Page -> Edit Node\r\n     */\r\n    /* @ngInject */ NavigationEditorNodeService.prototype.updateNavigationNodePosition = function (node) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parentNode, currentIndex, targetIndex;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cmsitemsRestService.getById(node.parent.uuid)];\r\n                    case 1:\r\n                        parentNode = _a.sent();\r\n                        parentNode.children = parentNode.children || [];\r\n                        currentIndex = parentNode.children.findIndex(function (child) { return child === node.uuid; });\r\n                        targetIndex = node.position;\r\n                        if (currentIndex < 0 || node.position === undefined) {\r\n                            throw new Error(\"navigationEditorNodeService.updateNavigationNodePosition() - invalid index: move FROM [\" + currentIndex + \"] TO [\" + targetIndex + \"]\");\r\n                        }\r\n                        // update parent children with the new child\r\n                        parentNode.children.splice(targetIndex, 0, parentNode.children.splice(currentIndex, 1)[0]);\r\n                        parentNode.identifier = parentNode.uuid;\r\n                        return [2 /*return*/, this.cmsitemsRestService.update(parentNode)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns the list of nodes belonging to the ancestry of the node identified by its uid. This list includes the queried node as well.\r\n     */\r\n    /* @ngInject */ NavigationEditorNodeService.prototype.getNavigationNodeAncestry = function (nodeUid, uriParams) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var payload, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        payload = __assign({ ancestorTrailFrom: nodeUid }, uriParams);\r\n                        return [4 /*yield*/, this.navigationNodeRestService.get(payload)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, this.nodeAncestryService.buildOrderedListOfAncestors(apiUtils.getDataFromResponse(response), nodeUid)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ NavigationEditorNodeService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [CmsitemsRestService,\r\n            NodeAncestryService,\r\n            IRestServiceFactory])\r\n    ], /* @ngInject */ NavigationEditorNodeService);\r\n    return /* @ngInject */ NavigationEditorNodeService;\r\n}());\r\nexport { /* @ngInject */ NavigationEditorNodeService };\r\n//# sourceMappingURL=NavigationEditorNodeService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/navigation/types.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/navigation/navigationEditor/NodeAncestryService.ts"],"map":"{\"version\":3,\"file\":\"NavigationEditorNodeService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/navigation/navigationEditor/NavigationEditorNodeService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,mBAAmB,EAAE,kCAAkC,EAAE,MAAM,YAAY,CAAC;AACrF,OAAO,EAEH,mBAAmB,EACnB,kBAAkB,EAClB,QAAQ,EAKX,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D;;GAEG;AAEH;IAGI,qDACY,mBAAwC,EACxC,mBAAwC,EAChD,kBAAuC;QAF/B,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAGhD,IAAI,CAAC,yBAAyB,GAAG,kBAAkB,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAChG,CAAC;IAEM,uEAAiB,GAAxB,UAAyB,OAAe,EAAE,SAAsB;QAC5D,IAAM,OAAO,cACT,UAAU,EAAE,OAAO,IAChB,SAAS,CACf,CAAC;QACF,OAAO,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED;;;;;;;OAOG;IACU,kFAA4B,GAAzC,UACI,IAAwB;;;;;4BAEL,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CACnB,EAAA;;wBAFK,UAAU,GAAG,SAElB;wBACD,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,IAAI,EAAE,CAAC;wBAC1C,YAAY,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,KAAK,IAAI,CAAC,IAAI,EAAnB,CAAmB,CAAC,CAAC;wBAC7E,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAClC,IAAI,YAAY,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;4BACjD,MAAM,IAAI,KAAK,CACX,4FAA0F,YAAY,cAAS,WAAW,MAAG,CAChI,CAAC;yBACL;wBAED,4CAA4C;wBAC5C,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3F,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;wBACxC,sBAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAC;;;;KACtD;IAED;;OAEG;IACU,+EAAyB,GAAtC,UACI,OAAe,EACf,SAAsB;;;;;;wBAEhB,OAAO,cACT,iBAAiB,EAAE,OAAO,IACvB,SAAS,CACf,CAAC;wBACe,qBAAM,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;wBAA5D,QAAQ,GAAG,SAAiD;wBAElE,sBAAO,IAAI,CAAC,mBAAmB,CAAC,2BAA2B,CACvD,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EACtC,OAAO,CACV,EAAC;;;;KACL;IAjEL;QADC,kBAAkB,EAAE;yCAKgB,mBAAmB;YACnB,mBAAmB;YAC5B,mBAAmB;mDA4D9C;IAAD,kDAAC;CAAA,AAlED,IAkEC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/navigation/navigationEditor/NavigationEditorNodeService.d.ts","writeByteOrderMark":false,"text":"import { CmsitemsRestService } from 'cmscommons';\r\nimport { IRestServiceFactory, TreeNodeWithLevel, NavigationNodeItem, IUriContext, NavigationNode } from 'smarteditcommons';\r\nimport { NavigationNodeCMSItem } from '../types';\r\nimport { NodeAncestryService } from './NodeAncestryService';\r\nexport declare class NavigationEditorNodeService {\r\n    private cmsitemsRestService;\r\n    private nodeAncestryService;\r\n    private navigationNodeRestService;\r\n    constructor(cmsitemsRestService: CmsitemsRestService, nodeAncestryService: NodeAncestryService, restServiceFactory: IRestServiceFactory);\r\n    getNavigationNode(nodeUid: string, uriParams: IUriContext): Promise<NavigationNode>;\r\n    /**\r\n     * Updates the position of the navigation node within the children collection of its parent.\r\n     * Fetches the parent node, and reorders the children, then updates the parent with the new child order.\r\n     *\r\n     * @param node The navigation node to be updated.\r\n     *\r\n     * E.g. Navigation Management Page -> Edit Node\r\n     */\r\n    updateNavigationNodePosition(node: NavigationNodeItem): Promise<NavigationNodeCMSItem>;\r\n    /**\r\n     * Returns the list of nodes belonging to the ancestry of the node identified by its uid. This list includes the queried node as well.\r\n     */\r\n    getNavigationNodeAncestry(nodeUid: string, uriParams: IUriContext): Promise<TreeNodeWithLevel[]>;\r\n}\r\n"}}
