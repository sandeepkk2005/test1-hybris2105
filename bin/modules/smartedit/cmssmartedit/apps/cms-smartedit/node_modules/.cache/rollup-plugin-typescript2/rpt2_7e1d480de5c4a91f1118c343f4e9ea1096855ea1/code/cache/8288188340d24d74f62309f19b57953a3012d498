{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { includes } from 'lodash';\r\nimport { IExperienceService, IRestServiceFactory, PAGE_CONTEXT_CATALOG, PAGE_CONTEXT_CATALOG_VERSION, PAGE_CONTEXT_SITE_ID, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * This service allows retrieving information about the containers found in a given page.\r\n */\r\nvar /* @ngInject */ SlotContainerService = /** @class */ (function () {\r\n    function /* @ngInject */ SlotContainerService(restServiceFactory, experienceService) {\r\n        this.experienceService = experienceService;\r\n        var contentSlotContainerResourceURI = \"/cmswebservices/v1/sites/\" + PAGE_CONTEXT_SITE_ID + \"/catalogs/\" + PAGE_CONTEXT_CATALOG + \"/versions/\" + PAGE_CONTEXT_CATALOG_VERSION + \"/pagescontentslotscontainers?pageId=:pageId\";\r\n        this.containersRestService = restServiceFactory.get(contentSlotContainerResourceURI);\r\n    }\r\n    /**\r\n     * This method is used to retrieve the information about the container holding the provided component.\r\n     * If the component is not inside a container, the method returns null.\r\n     *\r\n     * @param slotId The SmartEdit id of the slot where the component in question is located.\r\n     * @param componentUuid The UUID of the component as defined in the database.\r\n     *\r\n     * @returns A promise that resolves to the information of the container of the component provided.\r\n     * Will be null if the component is not inside a container.\r\n     */\r\n    /* @ngInject */ SlotContainerService.prototype.getComponentContainer = function (slotId, componentUuid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var containersInPage, containers;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.loadContainersInPageInfo()];\r\n                    case 1:\r\n                        containersInPage = _a.sent();\r\n                        containers = containersInPage.filter(function (container) {\r\n                            return container.slotId === slotId && includes(container.components, componentUuid);\r\n                        });\r\n                        return [2 /*return*/, containers.length > 0 ? containers[0] : null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotContainerService.prototype.loadContainersInPageInfo = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var experience, result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (this.containersInPage) {\r\n                            return [2 /*return*/, this.containersInPage];\r\n                        }\r\n                        return [4 /*yield*/, this.experienceService.getCurrentExperience()];\r\n                    case 1:\r\n                        experience = _a.sent();\r\n                        return [4 /*yield*/, this.containersRestService.get({ pageId: experience.pageId })];\r\n                    case 2:\r\n                        result = _a.sent();\r\n                        this.containersInPage = result.pageContentSlotContainerList;\r\n                        return [2 /*return*/, this.containersInPage];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotContainerService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n            IExperienceService])\r\n    ], /* @ngInject */ SlotContainerService);\r\n    return /* @ngInject */ SlotContainerService;\r\n}());\r\nexport { /* @ngInject */ SlotContainerService };\r\n//# sourceMappingURL=SlotContainerService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SlotContainerService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotContainerService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAElC,OAAO,EACH,kBAAkB,EAElB,mBAAmB,EACnB,oBAAoB,EACpB,4BAA4B,EAC5B,oBAAoB,EACpB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAa1B;;GAEG;AAEH;IAII,8CACI,kBAAuC,EAC/B,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;QAE7C,IAAM,+BAA+B,GAAG,8BAA4B,oBAAoB,kBAAa,oBAAoB,kBAAa,4BAA4B,gDAA6C,CAAC;QAChN,IAAI,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;IACzF,CAAC;IAED;;;;;;;;;OASG;IACU,oEAAqB,GAAlC,UACI,MAAc,EACd,aAAqB;;;;;4BAEI,qBAAM,IAAI,CAAC,wBAAwB,EAAE,EAAA;;wBAAxD,gBAAgB,GAAG,SAAqC;wBACxD,UAAU,GAAG,gBAAgB,CAAC,MAAM,CACtC,UAAC,SAAwB;4BACrB,OAAA,SAAS,CAAC,MAAM,KAAK,MAAM,IAAI,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,aAAa,CAAC;wBAA5E,CAA4E,CACnF,CAAC;wBAEF,sBAAO,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAC;;;;KACvD;IAEa,uEAAwB,GAAtC;;;;;;wBACI,IAAI,IAAI,CAAC,gBAAgB,EAAE;4BACvB,sBAAO,IAAI,CAAC,gBAAgB,EAAC;yBAChC;wBACkB,qBAAM,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,EAAA;;wBAAhE,UAAU,GAAG,SAAmD;wBACvD,qBAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,CAAC,EAAA;;wBAA5E,MAAM,GAAG,SAAmE;wBAElF,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,4BAA4B,CAAC;wBAC5D,sBAAO,IAAI,CAAC,gBAAgB,EAAC;;;;KAChC;IA5CL;QADC,kBAAkB,EAAE;yCAMO,mBAAmB;YACZ,kBAAkB;4CAuCpD;IAAD,2CAAC;CAAA,AA7CD,IA6CC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/SlotContainerService.d.ts","writeByteOrderMark":false,"text":"import { IExperienceService, IRestServiceFactory } from 'smarteditcommons';\r\nexport interface ContainerInfo {\r\n    containerId: string;\r\n    containerType: string;\r\n    pageId: string;\r\n    slotId: string;\r\n    components: string[];\r\n}\r\n/**\r\n * This service allows retrieving information about the containers found in a given page.\r\n */\r\nexport declare class SlotContainerService {\r\n    private experienceService;\r\n    private containersInPage;\r\n    private containersRestService;\r\n    constructor(restServiceFactory: IRestServiceFactory, experienceService: IExperienceService);\r\n    /**\r\n     * This method is used to retrieve the information about the container holding the provided component.\r\n     * If the component is not inside a container, the method returns null.\r\n     *\r\n     * @param slotId The SmartEdit id of the slot where the component in question is located.\r\n     * @param componentUuid The UUID of the component as defined in the database.\r\n     *\r\n     * @returns A promise that resolves to the information of the container of the component provided.\r\n     * Will be null if the component is not inside a container.\r\n     */\r\n    getComponentContainer(slotId: string, componentUuid: string): Promise<ContainerInfo>;\r\n    private loadContainersInPageInfo;\r\n}\r\n"}}
