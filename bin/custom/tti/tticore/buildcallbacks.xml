<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
--><!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="tticore_before_clean"/>
		 <macrodef name="tticore_after_clean"/>

	 before/after ant macro "build"
		 <macrodef name="tticore_before_build"/>
		 <macrodef name="tticore_after_build"/>

	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="tticore_before_compile_core">
		 <macrodef name="tticore_after_compile_core">

	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="tticore_before_compile_web" />
		 <macrodef name="tticore_after_compile_web" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)
		 <macrodef name="tticore_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="tticore_before_ear"/>
		 <macrodef name="tticore_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="tticore_before_production" />
		 <macrodef name="tticore_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="tticore_before_yunitinit" />
		 <macrodef name="tticore_after_yunitinit" />

	 before/after ant macro "yunit"
		 <macrodef name="tticore_before_yunit" />
		 <macrodef name="tticore_after_yunit" /> 

 Distribution package
 
	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="tticore_after_dist"/>
		 <macrodef name="tticore_before_dist"/>

	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="tticore_before_dist_copy"/>
		 <macrodef name="tticore_after_dist_copy"/>

--><project name="tticore_buildcallbacks" xmlns:jacoco="antlib:org.jacoco.ant">
    <property name="result.report.dir" location="${HYBRIS_LOG_DIR}/jacoco" />

    <macrodef name="tticore_after_build">
        		
        <sequential>
            			
            <impexGenerate extname="tticore"/>
            		
        </sequential>
        	
    </macrodef>
    	
    <macrodef name="tticore_clean_classpath_file">
        		
        <sequential>
            			
            <copy failonerror="true" file="${ext.tticore.path}/.classpath" overwrite="true" tofile="${ext.tticore.path}/.classpath.edit">
                				
                <filterchain>
                    					
                    <linecontainsregexp negate="true">
                        						
                        <regexp pattern="^(\t\t\t\t|)$"/>
                          
                        <!-- added by script -->
                        					
                    </linecontainsregexp>
                    				
                </filterchain>
                			
            </copy>
            			
            <move failonerror="true" file="${ext.tticore.path}/.classpath.edit" overwrite="true" tofile="${ext.tticore.path}/.classpath"/>
            		
        </sequential>
        	
    </macrodef>
    	
    <macrodef name="tticore_after_clean">
        		
        <sequential>
            			
            <echo level="info" message="Generating .classpath file for tticore"/>
            			
            <create_extension_classpath_file extname="tticore"/>
            			
            <tticore_clean_classpath_file/>
            			
            <delete failonerror="false" file="${ext.tticore.path}/resources-lang/touch_impexgen"/>
            		
        </sequential>
        	
    </macrodef>
    	
	
    <!-- exclude impex files from localization -->
     
	
    <patternset id="tticore.localization.pattern">
        		
        <patternset refid="localization.defaultpattern"/>
        		
        <exclude name="**/*.impex"/>
        	
    </patternset>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="${ext.tticore.path}/lib/jacocoant.jar"/>
    </taskdef>

    <target name="jacocoalltests" description="Runs alltests with JaCoCo">
        <jacoco:agent property="agentvmparam" append="true" output="file" destfile="${result.report.dir}/jacoco-qt.exec" />
        <ant dir="${platformhome}" target="alltests" inheritrefs="false">
            <property name="standalone.javaoptions" value="${agentvmparam} ${standalone.javaoptions}" />
            <property name="testclasses.packages" value="au.com.tti.*" />
            <property name="testclasses.extensions" value="ttibackoffice,tticore,ttifacades,ttifulfilmentprocess,ttiinitialdata,ttistorefront,ttitest" />
        </ant>
    </target>

    <target name="jacocoreport" description="Generates JaCoCo report">
        <jacoco:report>
            <executiondata>
                <fileset dir="${result.report.dir}">
                    <include name="*.exec" />
                </fileset>
            </executiondata>
            <structure name="JaCoCo Ant">
                <classfiles>
                    <fileset dir="${basedir}/../custom/tti">
                        <include name="*/classes/au/com/tti/**/*.class" />
                    </fileset>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${basedir}/../custom/tti">
                        <include name="*/src/au/com/tti/**/*.java" />
                    </fileset>
                </sourcefiles>
            </structure>
            <html destdir="${result.report.dir}"/>
            <csv destfile="${result.report.dir}/jacoco.csv" />
            <xml destfile="${result.report.dir}/jacoco.xml" />
        </jacoco:report>
    </target>

</project>
