{"code":"var IPerspectiveService = /** @class */ (function () {\r\n    function IPerspectiveService() {\r\n    }\r\n    /**\r\n     * This method registers a perspective.\r\n     * When an end user selects a perspective in the SmartEdit web application,\r\n     * all features bound to the perspective will be enabled when their respective enablingCallback functions are invoked\r\n     * and all features not bound to the perspective will be disabled when their respective disablingCallback functions are invoked.\r\n     */\r\n    IPerspectiveService.prototype.register = function (configuration) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method activates a perspective identified by its key and deactivates the currently active perspective.\r\n     * Activating a perspective consists in activating any feature that is bound to the perspective\r\n     * or any feature that is bound to the perspective's referenced perspectives and deactivating any features\r\n     * that are not bound to the perspective or to its referenced perspectives.\r\n     * After the perspective is changed, the `seConstantsModule.EVENT_PERSPECTIVE_CHANGED`\r\n     * event is published on the {@link CrossFrameEventService}, with no data.\r\n     *\r\n     * @param key The key that uniquely identifies the perspective to be activated. This is the same key as the key used in the [register]{@link IPerspectiveService#register} method.\r\n     */\r\n    IPerspectiveService.prototype.switchTo = function (key) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method returns true if a perspective is selected.\r\n     */\r\n    IPerspectiveService.prototype.hasActivePerspective = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method switches the currently-selected perspective to the default perspective.\r\n     * It will also disable all features for the default perspective before enabling them all back.\r\n     * If no value has been stored in the smartedit-perspectives cookie, the value of the default perspective is se.none.\r\n     * If a value is stored in the cookie, that value is used as the default perspective.\r\n     */\r\n    IPerspectiveService.prototype.selectDefault = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method returns true if the current active perspective is the Preview mode (No active overlay).\r\n     *\r\n     * @returns A promise with the boolean flag that indicates if the current perspective is the Preview mode.\r\n     */\r\n    IPerspectiveService.prototype.isEmptyPerspectiveActive = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method is used to refresh the prespective.\r\n     * If there is an exising perspective set then it is refreshed by replaying all the features associated to the current perspective.\r\n     * If there is no perspective set or if the perspective is not permitted then we set the default perspective.\r\n     */\r\n    IPerspectiveService.prototype.refreshPerspective = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method returns the key of the perspective that is currently loaded.\r\n     *\r\n     * @returns A promise that resolves to the key of the current perspective loaded in the storefront, null otherwise.\r\n     */\r\n    IPerspectiveService.prototype.getActivePerspectiveKey = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method returns true if the active perspective has the hotkey enabled\r\n     */\r\n    IPerspectiveService.prototype.isHotkeyEnabledForActivePerspective = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    IPerspectiveService.prototype.getActivePerspective = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    IPerspectiveService.prototype.getPerspectives = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    return IPerspectiveService;\r\n}());\r\nexport { IPerspectiveService };\r\n//# sourceMappingURL=IPerspectiveService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/perspectives/IPerspective.ts"],"map":"{\"version\":3,\"file\":\"IPerspectiveService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/perspectives/IPerspectiveService.ts\"],\"names\":[],\"mappings\":\"AAKA;IAAA;IA6FA,CAAC;IA5FG;;;;;OAKG;IACH,sCAAQ,GAAR,UAAS,aAA2B;QAChC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;OASG;IACH,sCAAQ,GAAR,UAAS,GAAW;QAChB,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,kDAAoB,GAApB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,2CAAa,GAAb;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,sDAAwB,GAAxB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,gDAAkB,GAAlB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,qDAAuB,GAAvB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,iEAAmC,GAAnC;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,kDAAoB,GAApB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,6CAAe,GAAf;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,0BAAC;AAAD,CAAC,AA7FD,IA6FC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/perspectives/IPerspectiveService.d.ts","writeByteOrderMark":false,"text":"import { IPerspective } from '../perspectives/IPerspective';\r\nexport declare abstract class IPerspectiveService {\r\n    /**\r\n     * This method registers a perspective.\r\n     * When an end user selects a perspective in the SmartEdit web application,\r\n     * all features bound to the perspective will be enabled when their respective enablingCallback functions are invoked\r\n     * and all features not bound to the perspective will be disabled when their respective disablingCallback functions are invoked.\r\n     */\r\n    register(configuration: IPerspective): Promise<void>;\r\n    /**\r\n     * This method activates a perspective identified by its key and deactivates the currently active perspective.\r\n     * Activating a perspective consists in activating any feature that is bound to the perspective\r\n     * or any feature that is bound to the perspective's referenced perspectives and deactivating any features\r\n     * that are not bound to the perspective or to its referenced perspectives.\r\n     * After the perspective is changed, the `seConstantsModule.EVENT_PERSPECTIVE_CHANGED`\r\n     * event is published on the {@link CrossFrameEventService}, with no data.\r\n     *\r\n     * @param key The key that uniquely identifies the perspective to be activated. This is the same key as the key used in the [register]{@link IPerspectiveService#register} method.\r\n     */\r\n    switchTo(key: string): Promise<void>;\r\n    /**\r\n     * This method returns true if a perspective is selected.\r\n     */\r\n    hasActivePerspective(): Promise<boolean>;\r\n    /**\r\n     * This method switches the currently-selected perspective to the default perspective.\r\n     * It will also disable all features for the default perspective before enabling them all back.\r\n     * If no value has been stored in the smartedit-perspectives cookie, the value of the default perspective is se.none.\r\n     * If a value is stored in the cookie, that value is used as the default perspective.\r\n     */\r\n    selectDefault(): Promise<void>;\r\n    /**\r\n     * This method returns true if the current active perspective is the Preview mode (No active overlay).\r\n     *\r\n     * @returns A promise with the boolean flag that indicates if the current perspective is the Preview mode.\r\n     */\r\n    isEmptyPerspectiveActive(): Promise<boolean>;\r\n    /**\r\n     * This method is used to refresh the prespective.\r\n     * If there is an exising perspective set then it is refreshed by replaying all the features associated to the current perspective.\r\n     * If there is no perspective set or if the perspective is not permitted then we set the default perspective.\r\n     */\r\n    refreshPerspective(): Promise<void>;\r\n    /**\r\n     * This method returns the key of the perspective that is currently loaded.\r\n     *\r\n     * @returns A promise that resolves to the key of the current perspective loaded in the storefront, null otherwise.\r\n     */\r\n    getActivePerspectiveKey(): Promise<string>;\r\n    /**\r\n     * This method returns true if the active perspective has the hotkey enabled\r\n     */\r\n    isHotkeyEnabledForActivePerspective(): Promise<boolean>;\r\n    getActivePerspective(): IPerspective;\r\n    getPerspectives(): Promise<IPerspective[]>;\r\n}\r\n"}}
