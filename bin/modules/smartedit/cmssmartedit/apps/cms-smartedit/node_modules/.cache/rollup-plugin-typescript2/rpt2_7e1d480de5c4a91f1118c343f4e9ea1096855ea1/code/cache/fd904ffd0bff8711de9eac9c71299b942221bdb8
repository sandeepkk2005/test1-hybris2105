{"code":"import { __awaiter, __decorate, __generator, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport { CmsitemsRestService, COMPONENT_CREATED_EVENT, COMPONENT_REMOVED_EVENT, COMPONENT_UPDATED_EVENT } from 'cmscommons';\r\nimport { CrossFrameEventService, EVENTS, LogService, OVERLAY_RERENDERED_EVENT, PromiseUtils, SeDowngradeService, UUID_ATTRIBUTE, YJQUERY_TOKEN } from 'smarteditcommons';\r\n/**\r\n * This service is used to fetch and cache components information.\r\n * This service keeps track of components added, edited and removed. It also automatically fetches and caches components when they are visible in the viewport (and invalidates them).\r\n *\r\n * This service is intended to be used to improve the performance of the application by reducing the number of xhr calls to the cmsitems api.\r\n * Example:\r\n * - a component in the overlay that is doing a fetch to the cmsitems api should use this service instead of using cmsitemsRestService.\r\n *   When a lot of components are rendered in the overlay we want to avoid one xhr call per component, but instead use this service that is listening\r\n *   to the 'OVERLAY_RERENDERED_EVENT' and fetch components information in batch (POST to cmsitems endpoint with an Array of uuids).\r\n */\r\nvar /* @ngInject */ ComponentInfoService = /** @class */ (function () {\r\n    function /* @ngInject */ ComponentInfoService(yjQuery, logService, crossFrameEventService, cmsitemsRestService, promiseUtils) {\r\n        var _this = this;\r\n        this.yjQuery = yjQuery;\r\n        this.logService = logService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.promiseUtils = promiseUtils;\r\n        this.cachedComponents = {};\r\n        this.promisesQueue = {};\r\n        this.crossFrameEventService.subscribe(OVERLAY_RERENDERED_EVENT, function (eventId, data) {\r\n            _this.onOverlayReRendered(data);\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_CREATED_EVENT, function (eventId, data) {\r\n            _this.onComponentAdded(data);\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_UPDATED_EVENT, function (eventId, data) {\r\n            _this.onComponentAdded(data);\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_REMOVED_EVENT, function (eventId, data) {\r\n            _this.onComponentRemoved(data);\r\n        });\r\n        // clear cache\r\n        this.crossFrameEventService.subscribe(EVENTS.PAGE_CHANGE, function () { return _this.clearCache(); });\r\n        this.crossFrameEventService.subscribe(EVENTS.USER_HAS_CHANGED, function () { return _this.clearCache(); });\r\n    }\r\n    /**\r\n     * @internal\r\n     * Returns a Promise that will be resolved with the component identified by the given uuid.\r\n     * When called this method works like this:\r\n     * - If the component is in the cache, the promise resolves right away.\r\n     * - If the component is not in the cache, and the forceRetrieval flag is not set, this method won't call the cmsItem backend API right away.\r\n     *   Instead, it waits until the component is cached (e.g., it is added to the overlay).\r\n     * - If the forceRetrieval flag is set, then the method will call the cmsItem backend API right away.\r\n     *\r\n     * @param uuid The uuid of the item to retrieve\r\n     * @param forceRetrieval Boolean flag. It specifies whether to retrieve the cmsItem right away.\r\n     * @returns Promise that will be resolved only if the component was added previously in the overlay and if not will resolve only when the component is added to the overlay.\r\n     *\r\n     */\r\n    /* @ngInject */ ComponentInfoService.prototype.getById = function (uuid, forceRetrieval) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var uuidSelector, deferred;\r\n            return __generator(this, function (_a) {\r\n                uuidSelector = \"[\" + UUID_ATTRIBUTE + \"='\" + uuid + \"']\";\r\n                if (!forceRetrieval &&\r\n                    !this.cachedComponents[uuid] &&\r\n                    !document.querySelectorAll(uuidSelector).length) {\r\n                    // For hidden components that are not present in the DOM\r\n                    forceRetrieval = true;\r\n                }\r\n                if (this.isComponentCached(uuid)) {\r\n                    return [2 /*return*/, this.cachedComponents[uuid]];\r\n                }\r\n                else if (forceRetrieval) {\r\n                    return [2 /*return*/, this.getComponentDataByUUID(uuid)];\r\n                }\r\n                else {\r\n                    deferred = this.promisesQueue[uuid] || this.promiseUtils.defer();\r\n                    if (!this.promisesQueue[uuid]) {\r\n                        this.promisesQueue[uuid] = deferred;\r\n                    }\r\n                    return [2 /*return*/, deferred.promise];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.resolvePromises = function (data) {\r\n        var _this = this;\r\n        (data.response ? data.response : [data]).forEach(function (component) {\r\n            _this.cachedComponents[component.uuid] = component;\r\n            if (_this.promisesQueue[component.uuid]) {\r\n                _this.promisesQueue[component.uuid].resolve(component);\r\n                delete _this.promisesQueue[component.uuid];\r\n            }\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.rejectPromises = function (uuids, error) {\r\n        var _this = this;\r\n        this.logService.error('componentInfoService:: getById error:', error.message);\r\n        uuids.forEach(function (uuid) {\r\n            if (_this.promisesQueue[uuid]) {\r\n                _this.promisesQueue[uuid].reject(error);\r\n                delete _this.promisesQueue[uuid];\r\n            }\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.getComponentDataByUUID = function (uuid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, error_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.cmsitemsRestService.getById(uuid)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        this.resolvePromises(response);\r\n                        return [2 /*return*/, this.cachedComponents[uuid]];\r\n                    case 2:\r\n                        error_1 = _a.sent();\r\n                        this.rejectPromises([uuid], error_1);\r\n                        throw error_1;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.getComponentsDataByUUIDs = function (uuids) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var components, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.cmsitemsRestService.getByIds(uuids, 'DEFAULT')];\r\n                    case 1:\r\n                        components = _a.sent();\r\n                        this.resolvePromises(components);\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        this.rejectPromises(uuids, e_1);\r\n                        return [3 /*break*/, 3];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.onComponentsAddedToOverlay = function (addedComponentsDomElements) {\r\n        var _this = this;\r\n        var uuids = addedComponentsDomElements\r\n            .map(function (component) { return _this.yjQuery(component).attr(UUID_ATTRIBUTE); })\r\n            .filter(function (uuid) { return !Object.keys(_this.cachedComponents).includes(uuid); });\r\n        if (uuids.length) {\r\n            this.getComponentsDataByUUIDs(uuids);\r\n        }\r\n    };\r\n    // delete from the cache the components that were removed from the DOM\r\n    // note: components that are still in the DOM were only removed from the overlay\r\n    /* @ngInject */ ComponentInfoService.prototype.onComponentsRemovedFromOverlay = function (removedComponentsDomElements) {\r\n        var _this = this;\r\n        removedComponentsDomElements\r\n            .filter(function (component) {\r\n            var uuidSelector = \"[\" + UUID_ATTRIBUTE + \"='\" + _this.yjQuery(component).attr(UUID_ATTRIBUTE) + \"']\";\r\n            return !_this.yjQuery(uuidSelector).length;\r\n        })\r\n            .filter(function (component) {\r\n            return Object.keys(_this.cachedComponents).includes(_this.yjQuery(component).attr(UUID_ATTRIBUTE));\r\n        })\r\n            .map(function (component) { return _this.yjQuery(component).attr(UUID_ATTRIBUTE); })\r\n            .forEach(function (uuid) {\r\n            delete _this.cachedComponents[uuid];\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.forceAddComponent = function (cmsComponentToAdd) {\r\n        this.resolvePromises({\r\n            response: [cmsComponentToAdd]\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.forceRemoveComponent = function (componentToRemove) {\r\n        delete this.cachedComponents[componentToRemove.uuid];\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.isComponentCached = function (componentUuid) {\r\n        return !!this.cachedComponents[componentUuid];\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.clearCache = function () {\r\n        this.cachedComponents = {};\r\n        this.promisesQueue = {};\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.onOverlayReRendered = function (data) {\r\n        if (data) {\r\n            if (data.addedComponents && data.addedComponents.length) {\r\n                this.onComponentsAddedToOverlay(data.addedComponents);\r\n            }\r\n            if (data.removedComponents && data.removedComponents.length) {\r\n                this.onComponentsRemovedFromOverlay(data.removedComponents);\r\n            }\r\n        }\r\n    };\r\n    // Components added & removed from storefront page.\r\n    /* @ngInject */ ComponentInfoService.prototype.onComponentAdded = function (data) {\r\n        this.forceAddComponent(data);\r\n    };\r\n    /* @ngInject */ ComponentInfoService.prototype.onComponentRemoved = function (data) {\r\n        this.forceRemoveComponent(data);\r\n    };\r\n    /* @ngInject */ ComponentInfoService = __decorate([\r\n        SeDowngradeService(),\r\n        __param(0, Inject(YJQUERY_TOKEN)),\r\n        __metadata(\"design:paramtypes\", [Function, LogService,\r\n            CrossFrameEventService,\r\n            CmsitemsRestService,\r\n            PromiseUtils])\r\n    ], /* @ngInject */ ComponentInfoService);\r\n    return /* @ngInject */ ComponentInfoService;\r\n}());\r\nexport { /* @ngInject */ ComponentInfoService };\r\n//# sourceMappingURL=ComponentInfoService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ComponentInfoService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ComponentInfoService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/ComponentInfoService.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\n/// <reference types=\"jquery\" />\r\nimport { CmsitemsRestService, ICMSComponent } from 'cmscommons';\r\nimport { CrossFrameEventService, LogService, PromiseUtils } from 'smarteditcommons';\r\n/**\r\n * This service is used to fetch and cache components information.\r\n * This service keeps track of components added, edited and removed. It also automatically fetches and caches components when they are visible in the viewport (and invalidates them).\r\n *\r\n * This service is intended to be used to improve the performance of the application by reducing the number of xhr calls to the cmsitems api.\r\n * Example:\r\n * - a component in the overlay that is doing a fetch to the cmsitems api should use this service instead of using cmsitemsRestService.\r\n *   When a lot of components are rendered in the overlay we want to avoid one xhr call per component, but instead use this service that is listening\r\n *   to the 'OVERLAY_RERENDERED_EVENT' and fetch components information in batch (POST to cmsitems endpoint with an Array of uuids).\r\n */\r\nexport declare class ComponentInfoService {\r\n    private yjQuery;\r\n    private logService;\r\n    private crossFrameEventService;\r\n    private cmsitemsRestService;\r\n    private promiseUtils;\r\n    private cachedComponents;\r\n    private promisesQueue;\r\n    constructor(yjQuery: JQueryStatic, logService: LogService, crossFrameEventService: CrossFrameEventService, cmsitemsRestService: CmsitemsRestService, promiseUtils: PromiseUtils);\r\n    /**\r\n     * @internal\r\n     * Returns a Promise that will be resolved with the component identified by the given uuid.\r\n     * When called this method works like this:\r\n     * - If the component is in the cache, the promise resolves right away.\r\n     * - If the component is not in the cache, and the forceRetrieval flag is not set, this method won't call the cmsItem backend API right away.\r\n     *   Instead, it waits until the component is cached (e.g., it is added to the overlay).\r\n     * - If the forceRetrieval flag is set, then the method will call the cmsItem backend API right away.\r\n     *\r\n     * @param uuid The uuid of the item to retrieve\r\n     * @param forceRetrieval Boolean flag. It specifies whether to retrieve the cmsItem right away.\r\n     * @returns Promise that will be resolved only if the component was added previously in the overlay and if not will resolve only when the component is added to the overlay.\r\n     *\r\n     */\r\n    getById(uuid: string, forceRetrieval?: boolean): Promise<ICMSComponent>;\r\n    private resolvePromises;\r\n    private rejectPromises;\r\n    private getComponentDataByUUID;\r\n    private getComponentsDataByUUIDs;\r\n    private onComponentsAddedToOverlay;\r\n    private onComponentsRemovedFromOverlay;\r\n    private forceAddComponent;\r\n    private forceRemoveComponent;\r\n    private isComponentCached;\r\n    private clearCache;\r\n    private onOverlayReRendered;\r\n    private onComponentAdded;\r\n    private onComponentRemoved;\r\n}\r\n"}}
