{"code":"/* @internal */\r\nexport var TreeServiceFactory = function ($q, restServiceFactory, getDataFromResponse) {\r\n    'ngInject';\r\n    /**\r\n     * A class to manage tree nodes through a REST API.\r\n     * @param nodeUri the REST entry point to handle tree nodes. it must support GET, POST, PUT and DELETE verbs:\r\n     * - GET nodeUri?parentUid={parentUid} will return a list of children `TreeNode` nodes wrapped in an object:\r\n     *\r\n     * ### Example\r\n     *      {\r\n     *      \t navigationNodes:[{\r\n     *      \t\t uid: \"2\",\r\n     *      \t\t name: \"node2\",\r\n     *      \t\t parentUid: \"root\"\r\n     *      \t\t hasChildren: true\r\n     *      \t }, {\r\n     *      \t\t uid: \"4\",\r\n     *      \t\t name: \"node4\",\r\n     *      \t\t parentUid: \"1\",\r\n     *      \t\t hasChildren: false\r\n     *      \t }]\r\n     *      }\r\n     *\r\n     * - POST nodeUri takes a `TreeNode` payload and returns the final object.\r\n     * - PUT nodeUri/{uid} takes a `TreeNode` payload and returns the final object.\r\n     * - DELETE nodeUri/{uid}\r\n     */\r\n    return /** @class */ (function () {\r\n        function class_1(nodeUri) {\r\n            if (nodeUri) {\r\n                this.nodesRestService = restServiceFactory.get(nodeUri);\r\n            }\r\n        }\r\n        /**\r\n         * Will fetch the children of a given node by querying GET nodeUri?parentUid={parentUid}\r\n         * - Once the children retrieved, the node will be marked as \"initiated\" and subsequent calls will not hit the server.\r\n         * - Each children will be given a ManyToOne reference to their parent.\r\n         * - The parent nodes will be assigned its children through the \"nodes\" property.\r\n         * @param parent the parent `TreeNode` object the nodes of which we want to fetch\r\n         */\r\n        class_1.prototype.fetchChildren = function (_parent) {\r\n            _parent.nodes = _parent.nodes || [];\r\n            if (_parent.initiated) {\r\n                return $q.when(_parent.nodes);\r\n            }\r\n            else {\r\n                return $q\r\n                    .when(this.nodesRestService.get({\r\n                    parentUid: _parent.uid\r\n                }))\r\n                    .then(function (response) {\r\n                    _parent.initiated = true;\r\n                    var children = getDataFromResponse(response);\r\n                    if (!children) {\r\n                        return [];\r\n                    }\r\n                    children.forEach(function (child) {\r\n                        child.parent = _parent;\r\n                    });\r\n                    Array.prototype.push.apply(_parent.nodes, children);\r\n                    return children;\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Will save a new node for the given parent by POSTing to nodeUri. The payload will only contain the parentUid and a generated name.\r\n         * On the front end side the parent model will be marked as having children.\r\n         * @param parent the parent `TreeNode` object from which to create a child\r\n         */\r\n        class_1.prototype.saveNode = function (_parent) {\r\n            return $q\r\n                .when(this.nodesRestService.save({\r\n                parentUid: _parent.uid,\r\n                name: (_parent.name ? _parent.name : _parent.uid) + _parent.nodes.length\r\n            }))\r\n                .then(function (response) {\r\n                _parent.hasChildren = true;\r\n                response.parent = _parent;\r\n                return response;\r\n            });\r\n        };\r\n        /**\r\n         * Will delete a node by sending DELETE to nodeUri/{uid}.\r\n         * On the front end side the parent model \"hasChildren\" will be re-evaluated.\r\n         * @param node the `TreeNode` object to delete.\r\n         */\r\n        class_1.prototype.removeNode = function (node) {\r\n            return $q\r\n                .when(this.nodesRestService.remove({\r\n                identifier: node.uid\r\n            }))\r\n                .then(function () {\r\n                var parent = node.parent;\r\n                parent.hasChildren = parent.nodes.length > 1;\r\n                return;\r\n            });\r\n        };\r\n        return class_1;\r\n    }());\r\n};\r\n//# sourceMappingURL=TreeServiceFactory.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/tree/types.ts"],"map":"{\"version\":3,\"file\":\"TreeServiceFactory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/tree/TreeServiceFactory.ts\"],\"names\":[],\"mappings\":\"AAMA,eAAe;AACf,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAC9B,EAAqB,EACrB,kBAAuC,EACvC,mBAA2C;IAE3C,UAAU,CAAC;IAEX;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH;QAGI,iBAAY,OAAe;YACvB,IAAI,OAAO,EAAE;gBACT,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAC3D;QACL,CAAC;QAED;;;;;;WAMG;QACH,+BAAa,GAAb,UAAc,OAAiB;YAC3B,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YACpC,IAAI,OAAO,CAAC,SAAS,EAAE;gBACnB,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACjC;iBAAM;gBACH,OAAO,EAAE;qBACJ,IAAI,CACD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;oBACtB,SAAS,EAAE,OAAO,CAAC,GAAG;iBACzB,CAAC,CACL;qBACA,IAAI,CAAC,UAAC,QAAoB;oBACvB,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;oBAEzB,IAAM,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;oBAE/C,IAAI,CAAC,QAAQ,EAAE;wBACX,OAAO,EAAE,CAAC;qBACb;oBAED,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAe;wBAC7B,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;oBAC3B,CAAC,CAAC,CAAC;oBAEH,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;oBACpD,OAAO,QAAQ,CAAC;gBACpB,CAAC,CAAC,CAAC;aACV;QACL,CAAC;QAED;;;;WAIG;QACH,0BAAQ,GAAR,UAAS,OAAiB;YACtB,OAAO,EAAE;iBACJ,IAAI,CACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBACvB,SAAS,EAAE,OAAO,CAAC,GAAG;gBACtB,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM;aAC3E,CAAC,CACL;iBACA,IAAI,CAAC,UAAC,QAAkB;gBACrB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC3B,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC;gBAC1B,OAAO,QAAQ,CAAC;YACpB,CAAC,CAAC,CAAC;QACX,CAAC;QACD;;;;WAIG;QACH,4BAAU,GAAV,UAAW,IAAc;YACrB,OAAO,EAAE;iBACJ,IAAI,CACD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;gBACzB,UAAU,EAAE,IAAI,CAAC,GAAG;aACvB,CAAC,CACL;iBACA,IAAI,CAAC;gBACF,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC3B,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC7C,OAAO;YACX,CAAC,CAAC,CAAC;QACX,CAAC;QACL,cAAC;IAAD,CAAC,AAnFM,IAmFL;AACN,CAAC,CAAC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/tree/TreeServiceFactory.d.ts","writeByteOrderMark":false,"text":"import { IRestServiceFactory } from 'smarteditcommons/services';\r\nexport declare const TreeServiceFactory: ($q: angular.IQService, restServiceFactory: IRestServiceFactory, getDataFromResponse: (response: any) => any) => any;\r\n"}}
