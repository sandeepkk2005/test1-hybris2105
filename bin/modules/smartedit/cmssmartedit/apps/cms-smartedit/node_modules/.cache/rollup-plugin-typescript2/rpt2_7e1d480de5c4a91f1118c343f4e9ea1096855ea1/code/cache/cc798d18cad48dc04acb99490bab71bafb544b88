{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\nimport { SlotContainerService } from 'cmssmartedit/services/SlotContainerService';\r\nimport { IContextualMenuService, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * This service is used to retrieve menu items that are available to be used with hidden components.\r\n */\r\nvar /* @ngInject */ HiddenComponentMenuService = /** @class */ (function () {\r\n    function /* @ngInject */ HiddenComponentMenuService(contextualMenuService, slotContainerService) {\r\n        this.contextualMenuService = contextualMenuService;\r\n        this.slotContainerService = slotContainerService;\r\n        this.MENU_ITEM_EXTERNAL = 'externalcomponentbutton';\r\n        this.MENU_ITEM_CLONE = 'clonecomponentbutton';\r\n        this.MENU_ITEM_REMOVE = 'se.cms.remove';\r\n        this.allowedItems = {};\r\n        this.setDefaultItemsAllowed();\r\n    }\r\n    /**\r\n     * This method is used to set the list of items that can be used with hidden components.\r\n     *\r\n     * @param itemsToAllow The ID of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.allowItemsInHiddenComponentMenu = function (itemsToAllow) {\r\n        var _this = this;\r\n        itemsToAllow.forEach(function (item) {\r\n            _this.allowedItems[item] = true;\r\n        });\r\n    };\r\n    /**\r\n     * This method removes a provided set of allowed menu items if previously allowed.\r\n     *\r\n     * @param itemsToDisallow An array containing the ID's of the menu items that cannot be used any longer with hidden\r\n     * components.\r\n     *\r\n     */\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.removeAllowedItemsInHiddenComponentMenu = function (itemsToDisallow) {\r\n        var _this = this;\r\n        itemsToDisallow.forEach(function (item) {\r\n            delete _this.allowedItems[item];\r\n        });\r\n    };\r\n    /**\r\n     * This method retrieves the list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     * @returns The list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.getAllowedItemsInHiddenComponentMenu = function () {\r\n        return Object.keys(this.allowedItems);\r\n    };\r\n    /**\r\n     * This method is used to retrieve the menu items available to be used in the provided component. To do so,\r\n     * this method retrieves contextual menu items available for the provided component and filters out the ones that cannot\r\n     * be used in hidden components. For example, assuming that a visible component has 'drag and drop' and 'remove'\r\n     * contextual menu items, if the component is hidden it should only have the remove button available, since the\r\n     * drag and drop operation is meaningless if the component is hidden. Hence, this service will retrieve only\r\n     * the remove item.\r\n     *\r\n     * @param component The hidden component for which to retrieve its menu items.\r\n     * @param slotId The SmartEdit id of the slot where the component is located.\r\n     *\r\n     * @returns Promise that resolves to an array of contextual menu items available for the component\r\n     * provided.\r\n     */\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.getItemsForHiddenComponent = function (component, slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var configuration;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.validateComponent(component);\r\n                        return [4 /*yield*/, this.buildComponentInfo(slotId, component)];\r\n                    case 1:\r\n                        configuration = _a.sent();\r\n                        return [2 /*return*/, this.getAllowedItemsForComponent(component, configuration)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.validateComponent = function (component) {\r\n        if (!component) {\r\n            throw new Error('HiddenComponentMenuService - Component cannot be null.');\r\n        }\r\n        if (!component.uid) {\r\n            throw new Error('HiddenComponentMenuService - Component needs a uid.');\r\n        }\r\n        if (!component.typeCode) {\r\n            throw new Error('HiddenComponentMenuService - Component needs a type code.');\r\n        }\r\n        if (!component.uuid) {\r\n            throw new Error('HiddenComponentMenuService - Component needs a uuid.');\r\n        }\r\n    };\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.setDefaultItemsAllowed = function () {\r\n        this.allowItemsInHiddenComponentMenu([\r\n            this.MENU_ITEM_EXTERNAL,\r\n            this.MENU_ITEM_CLONE,\r\n            this.MENU_ITEM_REMOVE\r\n        ]);\r\n    };\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.buildComponentInfo = function (slotId, component) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var componentContainer;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.slotContainerService.getComponentContainer(slotId, component.uuid)];\r\n                    case 1:\r\n                        componentContainer = _a.sent();\r\n                        return [2 /*return*/, {\r\n                                componentType: component.typeCode,\r\n                                componentId: component.uid,\r\n                                componentAttributes: {\r\n                                    smarteditCatalogVersionUuid: component.catalogVersion,\r\n                                    smarteditComponentId: component.uid,\r\n                                    smarteditComponentType: component.componentType,\r\n                                    smarteditComponentUuid: component.uuid,\r\n                                    smarteditElementUuid: null\r\n                                },\r\n                                containerType: componentContainer ? componentContainer.containerType : null,\r\n                                containerId: componentContainer ? componentContainer.containerId : null,\r\n                                element: null,\r\n                                isComponentHidden: true,\r\n                                slotId: slotId,\r\n                                iLeftBtns: 0\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ HiddenComponentMenuService.prototype.getAllowedItemsForComponent = function (component, configuration) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var menuItems, allowedActionsPromises, allowedActions;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        menuItems = this.contextualMenuService.getContextualMenuByType(component.typeCode);\r\n                        allowedActionsPromises = menuItems\r\n                            .filter(function (item) { return _this.allowedItems[item.key] && !!item.condition; })\r\n                            .map(function (item) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var isEnabled, _a;\r\n                            return __generator(this, function (_b) {\r\n                                switch (_b.label) {\r\n                                    case 0:\r\n                                        _b.trys.push([0, 2, , 3]);\r\n                                        return [4 /*yield*/, item.condition(configuration)];\r\n                                    case 1:\r\n                                        isEnabled = _b.sent();\r\n                                        return [3 /*break*/, 3];\r\n                                    case 2:\r\n                                        _a = _b.sent();\r\n                                        isEnabled = false;\r\n                                        return [3 /*break*/, 3];\r\n                                    case 3: return [2 /*return*/, { isEnabled: isEnabled, item: item }];\r\n                                }\r\n                            });\r\n                        }); });\r\n                        return [4 /*yield*/, Promise.all(allowedActionsPromises)];\r\n                    case 1:\r\n                        allowedActions = (_a.sent())\r\n                            .filter(function (_a) {\r\n                            var isEnabled = _a.isEnabled;\r\n                            return isEnabled;\r\n                        })\r\n                            .map(function (_a) {\r\n                            var item = _a.item;\r\n                            return item;\r\n                        });\r\n                        return [2 /*return*/, { buttons: allowedActions, configuration: configuration }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ HiddenComponentMenuService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IContextualMenuService,\r\n            SlotContainerService])\r\n    ], /* @ngInject */ HiddenComponentMenuService);\r\n    return /* @ngInject */ HiddenComponentMenuService;\r\n}());\r\nexport { /* @ngInject */ HiddenComponentMenuService };\r\n//# sourceMappingURL=HiddenComponentMenuService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/IHiddenComponentMenu.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/SlotContainerService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"HiddenComponentMenuService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/HiddenComponentMenuService.ts\"],\"names\":[],\"mappings\":\";AAKA,OAAO,EAAE,oBAAoB,EAAE,MAAM,4CAA4C,CAAC;AAClF,OAAO,EAGH,sBAAsB,EACtB,kBAAkB,EAErB,MAAM,kBAAkB,CAAC;AAE1B;;GAEG;AAEH;IAOI,oDACY,qBAA6C,EAC7C,oBAA0C;QAD1C,0BAAqB,GAArB,qBAAqB,CAAwB;QAC7C,yBAAoB,GAApB,oBAAoB,CAAsB;QARrC,uBAAkB,GAAG,yBAAyB,CAAC;QAC/C,oBAAe,GAAG,sBAAsB,CAAC;QACzC,qBAAgB,GAAG,eAAe,CAAC;QAE5C,iBAAY,GAAsB,EAAE,CAAC;QAMzC,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACI,oFAA+B,GAAtC,UAAuC,YAAsB;QAA7D,iBAIC;QAHG,YAAY,CAAC,OAAO,CAAC,UAAC,IAAI;YACtB,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACI,4FAAuC,GAA9C,UAA+C,eAAyB;QAAxE,iBAIC;QAHG,eAAe,CAAC,OAAO,CAAC,UAAC,IAAI;YACzB,OAAO,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACI,yFAAoC,GAA3C;QACI,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;;;;;;;;OAaG;IACU,+EAA0B,GAAvC,UACI,SAAwB,EACxB,MAAc;;;;;;wBAEd,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;wBAEZ,qBAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,SAAS,CAAC,EAAA;;wBAAhE,aAAa,GAAG,SAAgD;wBACtE,sBAAO,IAAI,CAAC,2BAA2B,CAAC,SAAS,EAAE,aAAa,CAAC,EAAC;;;;KACrE;IAEO,sEAAiB,GAAzB,UAA0B,SAAwB;QAC9C,IAAI,CAAC,SAAS,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC7E;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;SAC1E;QACD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;SAChF;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;SAC3E;IACL,CAAC;IAEO,2EAAsB,GAA9B;QACI,IAAI,CAAC,+BAA+B,CAAC;YACjC,IAAI,CAAC,kBAAkB;YACvB,IAAI,CAAC,eAAe;YACpB,IAAI,CAAC,gBAAgB;SACxB,CAAC,CAAC;IACP,CAAC;IAEa,uEAAkB,GAAhC,UACI,MAAc,EACd,SAAwB;;;;;4BAEG,qBAAM,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAC5E,MAAM,EACN,SAAS,CAAC,IAAI,CACjB,EAAA;;wBAHK,kBAAkB,GAAG,SAG1B;wBAED,sBAAO;gCACH,aAAa,EAAE,SAAS,CAAC,QAAQ;gCACjC,WAAW,EAAE,SAAS,CAAC,GAAG;gCAC1B,mBAAmB,EAAE;oCACjB,2BAA2B,EAAE,SAAS,CAAC,cAAc;oCACrD,oBAAoB,EAAE,SAAS,CAAC,GAAG;oCACnC,sBAAsB,EAAE,SAAS,CAAC,aAAa;oCAC/C,sBAAsB,EAAE,SAAS,CAAC,IAAI;oCACtC,oBAAoB,EAAE,IAAI;iCAC7B;gCACD,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI;gCAC3E,WAAW,EAAE,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI;gCACvE,OAAO,EAAE,IAAI;gCACb,iBAAiB,EAAE,IAAI;gCACvB,MAAM,QAAA;gCACN,SAAS,EAAE,CAAC;6BACf,EAAC;;;;KACL;IAEa,gFAA2B,GAAzC,UACI,SAAwB,EACxB,aAA2C;;;;;;;wBAErC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;wBAEnF,sBAAsB,GAAG,SAAS;6BACnC,MAAM,CACH,UAAC,IAA2B,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,EAA/C,CAA+C,CACnF;6BACA,GAAG,CAAC,UAAO,IAAI;;;;;;wCAGI,qBAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAA;;wCAA/C,SAAS,GAAG,SAAmC,CAAC;;;;wCAEhD,SAAS,GAAG,KAAK,CAAC;;4CAEtB,sBAAO,EAAE,SAAS,WAAA,EAAE,IAAI,MAAA,EAAE,EAAC;;;6BAC9B,CAAC,CAAC;wBAEiB,qBAAM,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,EAAA;;wBAA3D,cAAc,GAAG,CAAC,SAAyC,CAAC;6BAC7D,MAAM,CAAC,UAAC,EAAa;gCAAX,SAAS,eAAA;4BAAO,OAAA,SAAS;wBAAT,CAAS,CAAC;6BACpC,GAAG,CAAC,UAAC,EAAQ;gCAAN,IAAI,UAAA;4BAAO,OAAA,IAAI;wBAAJ,CAAI,CAAC;wBAE5B,sBAAO,EAAE,OAAO,EAAE,cAAc,EAAE,aAAa,eAAA,EAAE,EAAC;;;;KACrD;IArJL;QADC,kBAAkB,EAAE;yCASkB,sBAAsB;YACvB,oBAAoB;kDA6IzD;IAAD,iDAAC;CAAA,AAtJD,IAsJC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/HiddenComponentMenuService.d.ts","writeByteOrderMark":false,"text":"import { ICMSComponent } from 'cmscommons';\r\nimport { IHiddenComponentMenu } from 'cmssmartedit/services/IHiddenComponentMenu';\r\nimport { SlotContainerService } from 'cmssmartedit/services/SlotContainerService';\r\nimport { IContextualMenuService } from 'smarteditcommons';\r\n/**\r\n * This service is used to retrieve menu items that are available to be used with hidden components.\r\n */\r\nexport declare class HiddenComponentMenuService {\r\n    private contextualMenuService;\r\n    private slotContainerService;\r\n    private readonly MENU_ITEM_EXTERNAL;\r\n    private readonly MENU_ITEM_CLONE;\r\n    private readonly MENU_ITEM_REMOVE;\r\n    private allowedItems;\r\n    constructor(contextualMenuService: IContextualMenuService, slotContainerService: SlotContainerService);\r\n    /**\r\n     * This method is used to set the list of items that can be used with hidden components.\r\n     *\r\n     * @param itemsToAllow The ID of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    allowItemsInHiddenComponentMenu(itemsToAllow: string[]): void;\r\n    /**\r\n     * This method removes a provided set of allowed menu items if previously allowed.\r\n     *\r\n     * @param itemsToDisallow An array containing the ID's of the menu items that cannot be used any longer with hidden\r\n     * components.\r\n     *\r\n     */\r\n    removeAllowedItemsInHiddenComponentMenu(itemsToDisallow: string[]): void;\r\n    /**\r\n     * This method retrieves the list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     * @returns The list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    getAllowedItemsInHiddenComponentMenu(): string[];\r\n    /**\r\n     * This method is used to retrieve the menu items available to be used in the provided component. To do so,\r\n     * this method retrieves contextual menu items available for the provided component and filters out the ones that cannot\r\n     * be used in hidden components. For example, assuming that a visible component has 'drag and drop' and 'remove'\r\n     * contextual menu items, if the component is hidden it should only have the remove button available, since the\r\n     * drag and drop operation is meaningless if the component is hidden. Hence, this service will retrieve only\r\n     * the remove item.\r\n     *\r\n     * @param component The hidden component for which to retrieve its menu items.\r\n     * @param slotId The SmartEdit id of the slot where the component is located.\r\n     *\r\n     * @returns Promise that resolves to an array of contextual menu items available for the component\r\n     * provided.\r\n     */\r\n    getItemsForHiddenComponent(component: ICMSComponent, slotId: string): Promise<IHiddenComponentMenu>;\r\n    private validateComponent;\r\n    private setDefaultItemsAllowed;\r\n    private buildComponentInfo;\r\n    private getAllowedItemsForComponent;\r\n}\r\n"}}
