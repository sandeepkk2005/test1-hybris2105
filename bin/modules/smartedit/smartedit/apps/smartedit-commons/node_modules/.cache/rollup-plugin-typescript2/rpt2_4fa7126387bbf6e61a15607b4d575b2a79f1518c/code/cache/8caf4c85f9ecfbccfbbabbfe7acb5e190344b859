{"code":"import { __awaiter, __decorate, __generator, __metadata, __spreadArrays } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { RestServiceFactory } from '@smart/utils';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { apiUtils } from '../../utils';\r\nimport { TreeNestedDataSource } from './TreeNestedDataSource';\r\nimport { TreeNodeItemFactory } from './TreeNodeItemFactory';\r\n/**\r\n * A service to manage tree nodes through a REST API.\r\n */\r\nvar /* @ngInject */ TreeService = /** @class */ (function () {\r\n    function /* @ngInject */ TreeService(restServiceFactory, treeNodeItemFactory) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.treeNodeItemFactory = treeNodeItemFactory;\r\n        this.dataSource = new TreeNestedDataSource();\r\n        this.$onTreeUpdated = new BehaviorSubject(false);\r\n    }\r\n    /* @ngInject */ TreeService.prototype.onTreeUpdated = function () {\r\n        return this.$onTreeUpdated.pipe(filter(function (value) { return !!value; }));\r\n    };\r\n    /**\r\n     * Initializes the REST service and sets root node.\r\n     *\r\n     * @param nodeUri URI passed to {@link TreeComponent}.\r\n     * @param rootNodeUid root uid passed to {@link TreeComponent}.\r\n     */\r\n    /* @ngInject */ TreeService.prototype.init = function (nodeUri, rootNodeUid) {\r\n        if (nodeUri) {\r\n            this.nodesRestService = this.restServiceFactory.get(nodeUri);\r\n        }\r\n        this.setRoot(rootNodeUid);\r\n    };\r\n    /**\r\n     * Updates the position of the node within the tree.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     * @param position New position of node.\r\n     */\r\n    /* @ngInject */ TreeService.prototype.rearrange = function (node, parent, position) {\r\n        var siblings = parent.nodes.filter(function (_node) { return _node.uid !== node.uid; });\r\n        var rearranged = __spreadArrays(siblings.slice(0, position), [\r\n            node\r\n        ], siblings.slice(position, siblings.length));\r\n        node.parent.removeNode(node);\r\n        parent.removeAllNodes().addNodes(rearranged);\r\n        this.update();\r\n    };\r\n    /**\r\n     * Fetches the node children and updates the tree.\r\n     */\r\n    /* @ngInject */ TreeService.prototype.fetchChildren = function (_parent) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parent, response, children;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        parent = _parent || this.root;\r\n                        if (!parent.initiated) return [3 /*break*/, 1];\r\n                        this.update();\r\n                        return [2 /*return*/, Promise.resolve(parent.nodes)];\r\n                    case 1: return [4 /*yield*/, this.nodesRestService.get({ parentUid: parent.uid })];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        children = (apiUtils.getDataFromResponse(response) || []).map(function (dto) {\r\n                            return _this.treeNodeItemFactory.get(dto);\r\n                        });\r\n                        parent.removeAllNodes().addNodes(children).setInitiated(true);\r\n                        this.update();\r\n                        return [2 /*return*/, children];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Toggles the passed node and fetches children\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    /* @ngInject */ TreeService.prototype.toggle = function (node) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                node.toggle();\r\n                return [2 /*return*/, this.fetchChildren(node)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds a new child to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    /* @ngInject */ TreeService.prototype.newChild = function (node) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var nodeData, response, elm;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        nodeData = node || this.root;\r\n                        return [4 /*yield*/, this.saveNode(nodeData)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!nodeData.isExpanded) {\r\n                            this.toggle(nodeData);\r\n                        }\r\n                        else {\r\n                            elm = nodeData.nodes.find(function (_node) { return _node.uid === response.uid; });\r\n                            if (!elm) {\r\n                                nodeData.addNode(this.treeNodeItemFactory.get(response));\r\n                                this.update();\r\n                            }\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds new sibling to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    /* @ngInject */ TreeService.prototype.newSibling = function (node) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.saveNode(node.parent)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        node.parent.addNode(this.treeNodeItemFactory.get(response));\r\n                        this.update();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    /* @ngInject */ TreeService.prototype.removeNode = function (node) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.nodesRestService.remove({ identifier: node.uid })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        node.parent.removeNode(node);\r\n                        this.update();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the data source from where the nodes are retrieved\r\n     */\r\n    /* @ngInject */ TreeService.prototype.update = function () {\r\n        this.dataSource.set(null);\r\n        this.dataSource.set(this.root.nodes);\r\n        this.$onTreeUpdated.next(true);\r\n    };\r\n    /**\r\n     * Expands all nodes from the root node\r\n     */\r\n    /* @ngInject */ TreeService.prototype.expandAll = function () {\r\n        this.root.expandAll();\r\n        this.update();\r\n    };\r\n    /**\r\n     * Collapses all nodes from the root node\r\n     */\r\n    /* @ngInject */ TreeService.prototype.collapseAll = function () {\r\n        this.root.collapseAll();\r\n        this.update();\r\n    };\r\n    /* @ngInject */ TreeService.prototype.getNodePositionById = function (nodeUid) {\r\n        return this.getNodeById(nodeUid).position;\r\n    };\r\n    /* @ngInject */ TreeService.prototype.getNodeById = function (nodeUid, nodeArray) {\r\n        if (nodeUid === this.root.uid) {\r\n            return this.root;\r\n        }\r\n        var nodes = nodeArray || this.root.nodes;\r\n        // eslint-disable-next-line @typescript-eslint/no-for-in-array\r\n        for (var i in nodes) {\r\n            if (nodes.hasOwnProperty(i)) {\r\n                if (nodes[i].uid === nodeUid) {\r\n                    return nodes[i];\r\n                }\r\n                if (nodes[i].hasChildren) {\r\n                    nodes[i].nodes = nodes[i].nodes || [];\r\n                    var result = this.getNodeById(nodeUid, nodes[i].nodes);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /* @ngInject */ TreeService.prototype.saveNode = function (_parent) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.nodesRestService.save({\r\n                            parentUid: _parent.uid,\r\n                            name: (_parent.name ? _parent.name : _parent.uid) + _parent.nodes.length\r\n                        })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ TreeService.prototype.setRoot = function (uid) {\r\n        this.root = this.treeNodeItemFactory.get({ uid: uid, name: 'root', level: 0 });\r\n    };\r\n    /* @ngInject */ TreeService = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [RestServiceFactory,\r\n            TreeNodeItemFactory])\r\n    ], /* @ngInject */ TreeService);\r\n    return /* @ngInject */ TreeService;\r\n}());\r\nexport { /* @ngInject */ TreeService };\r\n//# sourceMappingURL=TreeService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/treeModule/TreeNestedDataSource.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/treeModule/TreeNodeItemFactory.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/treeModule/types.ts"],"map":"{\"version\":3,\"file\":\"TreeService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/treeModule/TreeService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/treeModule/TreeService.d.ts","writeByteOrderMark":false,"text":"import { IRestService, RestServiceFactory } from '@smart/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { TreeNestedDataSource } from './TreeNestedDataSource';\r\nimport { TreeNodeItemFactory } from './TreeNodeItemFactory';\r\nimport { ITreeNodeItem, TreeNodeItemDTO } from './types';\r\n/**\r\n * A service to manage tree nodes through a REST API.\r\n */\r\nexport declare class TreeService<T, D extends TreeNodeItemDTO> {\r\n    private restServiceFactory;\r\n    private treeNodeItemFactory;\r\n    nodesRestService: IRestService<D | D[]>;\r\n    dataSource: TreeNestedDataSource<ITreeNodeItem<T>>;\r\n    root: ITreeNodeItem<T>;\r\n    private $onTreeUpdated;\r\n    constructor(restServiceFactory: RestServiceFactory, treeNodeItemFactory: TreeNodeItemFactory);\r\n    onTreeUpdated(): Observable<boolean>;\r\n    /**\r\n     * Initializes the REST service and sets root node.\r\n     *\r\n     * @param nodeUri URI passed to {@link TreeComponent}.\r\n     * @param rootNodeUid root uid passed to {@link TreeComponent}.\r\n     */\r\n    init(nodeUri: string, rootNodeUid: string): void;\r\n    /**\r\n     * Updates the position of the node within the tree.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     * @param position New position of node.\r\n     */\r\n    rearrange(node: ITreeNodeItem<T>, parent: ITreeNodeItem<T>, position: number): void;\r\n    /**\r\n     * Fetches the node children and updates the tree.\r\n     */\r\n    fetchChildren(_parent?: ITreeNodeItem<T>): Promise<ITreeNodeItem<T>[]>;\r\n    /**\r\n     * Toggles the passed node and fetches children\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    toggle(node: ITreeNodeItem<T>): Promise<ITreeNodeItem<T>[]>;\r\n    /**\r\n     * Adds a new child to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    newChild(node?: ITreeNodeItem<T>): Promise<void>;\r\n    /**\r\n     * Adds new sibling to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    newSibling(node: ITreeNodeItem<T>): Promise<void>;\r\n    /**\r\n     * Removes passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    removeNode(node: ITreeNodeItem<T>): Promise<void>;\r\n    /**\r\n     * Updates the data source from where the nodes are retrieved\r\n     */\r\n    update(): void;\r\n    /**\r\n     * Expands all nodes from the root node\r\n     */\r\n    expandAll(): void;\r\n    /**\r\n     * Collapses all nodes from the root node\r\n     */\r\n    collapseAll(): void;\r\n    getNodePositionById(nodeUid: string): number;\r\n    getNodeById(nodeUid: string, nodeArray?: ITreeNodeItem<T>[]): ITreeNodeItem<T>;\r\n    private saveNode;\r\n    private setRoot;\r\n}\r\n"}}
