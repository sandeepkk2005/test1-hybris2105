{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { UrlUtils } from '@smart/utils';\r\nimport { SeInjectable } from 'smarteditcommons/di';\r\n/**\r\n * Interface for previewService.\r\n *\r\n * This service is for managing the storefront preview ticket and is proxied across the gateway.\r\n */\r\nvar /* @ngInject */ IPreviewService = /** @class */ (function () {\r\n    function /* @ngInject */ IPreviewService(urlUtils) {\r\n        this.urlUtils = urlUtils;\r\n    }\r\n    /**\r\n     * This method will create a new previewTicket for the given experience, using the preview API\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param previewData Data representing storefront preview\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    /* @ngInject */ IPreviewService.prototype.createPreview = function (previewData) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method will update a previewTicket for the given the preview data, using the preview API\r\n     *\r\n     * @param previewData Data representing storefront preview containing the preview ticketId\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    /* @ngInject */ IPreviewService.prototype.updatePreview = function (previewData) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method will preduce a resourcePath from a given preview url\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     */\r\n    /* @ngInject */ IPreviewService.prototype.getResourcePathFromPreviewUrl = function (previewUrl) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method will create a new preview ticket, and return the given url with an updated previewTicketId query param\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param storefrontUrl Existing storefront url\r\n     * @param previewData JSON representing storefront previewData (catalog, catalog vesion, etc...)\r\n     *\r\n     * @returns A new string with storefrontUrl having the new ticket ID inside\r\n     */\r\n    /* @ngInject */ IPreviewService.prototype.updateUrlWithNewPreviewTicketId = function (storefrontUrl, previewData) {\r\n        var _this = this;\r\n        return this.createPreview(previewData).then(function (preview) {\r\n            return _this.urlUtils.updateUrlParameter(storefrontUrl, 'cmsTicketId', preview.ticketId);\r\n        });\r\n    };\r\n    /* @ngInject */ IPreviewService = __decorate([\r\n        SeInjectable(),\r\n        __metadata(\"design:paramtypes\", [UrlUtils])\r\n    ], /* @ngInject */ IPreviewService);\r\n    return /* @ngInject */ IPreviewService;\r\n}());\r\nexport { /* @ngInject */ IPreviewService };\r\n//# sourceMappingURL=IPreviewService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IPreview.ts"],"map":"{\"version\":3,\"file\":\"IPreviewService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/IPreviewService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAGnD;;;;GAIG;AAEH;IACI,yCAAsB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAAG,CAAC;IAE5C;;;;;;;;;OASG;IACH,uDAAa,GAAb,UAAc,WAAyB;QACnC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACH,uDAAa,GAAb,UAAc,WAAyB;QACnC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,uEAA6B,GAA7B,UAA8B,UAAkB;QAC5C,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;;OAUG;IACH,yEAA+B,GAA/B,UACI,aAAqB,EACrB,WAAyB;QAF7B,iBAOC;QAHG,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,OAAqB;YAC9D,OAAA,KAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,aAAa,EAAE,aAAa,EAAE,OAAO,CAAC,QAAQ,CAAC;QAAhF,CAAgF,CACnF,CAAC;IACN,CAAC;IA3DL;QADC,YAAY,EAAE;yCAEqB,QAAQ;uCA2D3C;IAAD,sCAAC;CAAA,AA5DD,IA4DC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/interfaces/IPreviewService.d.ts","writeByteOrderMark":false,"text":"import { UrlUtils } from '@smart/utils';\r\nimport { IPreviewData } from './IPreview';\r\n/**\r\n * Interface for previewService.\r\n *\r\n * This service is for managing the storefront preview ticket and is proxied across the gateway.\r\n */\r\nexport declare abstract class IPreviewService {\r\n    protected urlUtils: UrlUtils;\r\n    constructor(urlUtils: UrlUtils);\r\n    /**\r\n     * This method will create a new previewTicket for the given experience, using the preview API\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param previewData Data representing storefront preview\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    createPreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    /**\r\n     * This method will update a previewTicket for the given the preview data, using the preview API\r\n     *\r\n     * @param previewData Data representing storefront preview containing the preview ticketId\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    updatePreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    /**\r\n     * This method will preduce a resourcePath from a given preview url\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     */\r\n    getResourcePathFromPreviewUrl(previewUrl: string): Promise<string>;\r\n    /**\r\n     * This method will create a new preview ticket, and return the given url with an updated previewTicketId query param\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param storefrontUrl Existing storefront url\r\n     * @param previewData JSON representing storefront previewData (catalog, catalog vesion, etc...)\r\n     *\r\n     * @returns A new string with storefrontUrl having the new ticket ID inside\r\n     */\r\n    updateUrlWithNewPreviewTicketId(storefrontUrl: string, previewData: IPreviewData): Promise<string>;\r\n}\r\n"}}
