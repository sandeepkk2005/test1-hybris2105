{"code":"/**\r\n * Convenience service to open an editor modal window for a given component type and component ID.\r\n *\r\n * Example:\r\n * We pass information about component to open method, and the component editor in form of modal appears.\r\n */\r\nvar IEditorModalService = /** @class */ (function () {\r\n    function IEditorModalService() {\r\n    }\r\n    /**\r\n     * Proxy function which delegates opening an editor modal for a given component type and component ID to the\r\n     * SmartEdit container.\r\n     *\r\n     * @param componentAttributes The details of the component to be created/edited\r\n     * @param componentAttributes.smarteditComponentUuid An optional universally unique UUID of the component if the component is being edited.\r\n     * @param componentAttributes.smarteditComponentId An optional universally unique ID of the component if the component is being edited.\r\n     * @param componentAttributes.smarteditComponentType The component type\r\n     * @param componentAttributes.smarteditCatalogVersionUuid The smartedit catalog version UUID to add the component to.\r\n     * @param componentAttributes.catalogVersionUuid The catalog version UUID to add the component to.\r\n     * @param componentAttributes.initialDirty Is the component dirty.\r\n     * @param componentAttributes.content An optional content for create operation. It's ignored if componentAttributes.smarteditComponentUuid is defined.\r\n     * @param targetSlotId The ID of the slot in which the component is placed.\r\n     * @param position The position in a given slot where the component should be placed.\r\n     * @param targetedQualifier Causes the genericEditor to switch to the tab containing a qualifier of the given name.\r\n     * @param saveCallback The optional function that is executed if the user clicks the Save button and the modal closes successfully. The function provides one parameter: item that has been saved.\r\n     * @param editorStackId The string that identifies the stack of editors being edited together.\r\n     *\r\n     * @returns A promise that resolves to the data returned by the modal when it is closed.\r\n     */\r\n    IEditorModalService.prototype.open = function (componentAttributes, targetSlotId, position, targetedQualifier, saveCallback, editorStackId) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Proxy function which delegates opening an editor modal for a given component type and component ID to the\r\n     * SmartEdit container.\r\n     *\r\n     * @param componentType The type of component as defined in the platform.\r\n     * @param componentUuid The UUID of the component as defined in the database.\r\n     * @param targetedQualifier Causes the genericEditor to switch to the tab containing a qualifier of the given name.\r\n     * @param saveCallback The optional function that is executed if the user clicks the Save button and the modal closes successfully. The function provides one parameter: item that has been saved.\r\n     * @param editorStackId The string that identifies the stack of editors being edited together.\r\n     *\r\n     * @returns A promise that resolves to the data returned by the modal when it is closed.\r\n     */\r\n    IEditorModalService.prototype.openAndRerenderSlot = function (componentType, componentUuid, targetedQualifier, saveCallback, editorStackId) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Proxy function which delegates opening an generic editor modal for a given IGenericEditorModalServiceComponent data object\r\n     *\r\n     * @param componentData Object that contains all parameters for generic editor.\r\n     * @param saveCallback the save callback that is triggered after submit.\r\n     * @param errorCallback the error callback that is triggered after submit.\r\n     * @returns A promise that resolves to the data returned by the modal when it is closed.\r\n     */\r\n    IEditorModalService.prototype.openGenericEditor = function (data, saveCallback, errorCallback, config) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    return IEditorModalService;\r\n}());\r\nexport { IEditorModalService };\r\n//# sourceMappingURL=IEditorModalService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@fundamental-ngx/core@0.13.2_9a9a80bb6ff375d99f90188f858ebbd5/node_modules/@fundamental-ngx/core/fundamental-ngx-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/services/IGenericEditorModalServiceComponent.ts"],"map":"{\"version\":3,\"file\":\"IEditorModalService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/IEditorModalService.ts\"],\"names\":[],\"mappings\":\"AAMA;;;;;GAKG;AACH;IAAA;IAyEA,CAAC;IAxEG;;;;;;;;;;;;;;;;;;;OAmBG;IACH,kCAAI,GAAJ,UACI,mBAA+B,EAC/B,YAAqB,EACrB,QAAiB,EACjB,iBAA0B,EAC1B,YAAkC,EAClC,aAAsB;QAEtB,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;;;OAWG;IACH,iDAAmB,GAAnB,UACI,aAAqB,EACrB,aAAqB,EACrB,iBAA0B,EAC1B,YAAkC,EAClC,aAAsB;QAEtB,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACH,+CAAiB,GAAjB,UACI,IAAyC,EACzC,YAAyB,EACzB,aAA0B,EAC1B,MAAoB;QAEpB,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,0BAAC;AAAD,CAAC,AAzED,IAyEC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/services/IEditorModalService.d.ts","writeByteOrderMark":false,"text":"import { ModalConfig } from '@fundamental-ngx/core';\r\nimport { Payload } from 'smarteditcommons';\r\nimport { IGenericEditorModalServiceComponent } from './IGenericEditorModalServiceComponent';\r\n/**\r\n * Convenience service to open an editor modal window for a given component type and component ID.\r\n *\r\n * Example:\r\n * We pass information about component to open method, and the component editor in form of modal appears.\r\n */\r\nexport declare abstract class IEditorModalService {\r\n    /**\r\n     * Proxy function which delegates opening an editor modal for a given component type and component ID to the\r\n     * SmartEdit container.\r\n     *\r\n     * @param componentAttributes The details of the component to be created/edited\r\n     * @param componentAttributes.smarteditComponentUuid An optional universally unique UUID of the component if the component is being edited.\r\n     * @param componentAttributes.smarteditComponentId An optional universally unique ID of the component if the component is being edited.\r\n     * @param componentAttributes.smarteditComponentType The component type\r\n     * @param componentAttributes.smarteditCatalogVersionUuid The smartedit catalog version UUID to add the component to.\r\n     * @param componentAttributes.catalogVersionUuid The catalog version UUID to add the component to.\r\n     * @param componentAttributes.initialDirty Is the component dirty.\r\n     * @param componentAttributes.content An optional content for create operation. It's ignored if componentAttributes.smarteditComponentUuid is defined.\r\n     * @param targetSlotId The ID of the slot in which the component is placed.\r\n     * @param position The position in a given slot where the component should be placed.\r\n     * @param targetedQualifier Causes the genericEditor to switch to the tab containing a qualifier of the given name.\r\n     * @param saveCallback The optional function that is executed if the user clicks the Save button and the modal closes successfully. The function provides one parameter: item that has been saved.\r\n     * @param editorStackId The string that identifies the stack of editors being edited together.\r\n     *\r\n     * @returns A promise that resolves to the data returned by the modal when it is closed.\r\n     */\r\n    open<T = any>(componentAttributes: IComponent, targetSlotId?: string, position?: number, targetedQualifier?: string, saveCallback?: (item: any) => void, editorStackId?: string): Promise<T>;\r\n    /**\r\n     * Proxy function which delegates opening an editor modal for a given component type and component ID to the\r\n     * SmartEdit container.\r\n     *\r\n     * @param componentType The type of component as defined in the platform.\r\n     * @param componentUuid The UUID of the component as defined in the database.\r\n     * @param targetedQualifier Causes the genericEditor to switch to the tab containing a qualifier of the given name.\r\n     * @param saveCallback The optional function that is executed if the user clicks the Save button and the modal closes successfully. The function provides one parameter: item that has been saved.\r\n     * @param editorStackId The string that identifies the stack of editors being edited together.\r\n     *\r\n     * @returns A promise that resolves to the data returned by the modal when it is closed.\r\n     */\r\n    openAndRerenderSlot(componentType: string, componentUuid: string, targetedQualifier?: string, saveCallback?: (item: any) => void, editorStackId?: string): Promise<any>;\r\n    /**\r\n     * Proxy function which delegates opening an generic editor modal for a given IGenericEditorModalServiceComponent data object\r\n     *\r\n     * @param componentData Object that contains all parameters for generic editor.\r\n     * @param saveCallback the save callback that is triggered after submit.\r\n     * @param errorCallback the error callback that is triggered after submit.\r\n     * @returns A promise that resolves to the data returned by the modal when it is closed.\r\n     */\r\n    openGenericEditor(data: IGenericEditorModalServiceComponent, saveCallback?: () => void, errorCallback?: () => void, config?: ModalConfig): Promise<any>;\r\n}\r\nexport interface IComponent {\r\n    smarteditComponentUuid?: string;\r\n    smarteditComponentType: string;\r\n    catalogVersionUuid?: string;\r\n    smarteditCatalogVersionUuid?: string;\r\n    smarteditComponentId?: string;\r\n    smarteditElementUuid?: string;\r\n    content?: Payload;\r\n    initialDirty?: boolean;\r\n}\r\n"}}
