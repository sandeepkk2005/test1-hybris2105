{"code":"import { __assign, __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { COMPONENT_UPDATED_EVENT, IComponentVisibilityAlertService, IEditorModalService, ISlotRestrictionsService } from 'cmscommons';\r\nimport { ComponentHandlerService } from 'smartedit';\r\nimport { IFeatureService, SeDowngradeService, SystemEventService } from 'smarteditcommons';\r\n/**\r\n * Allows enabling the Edit Component contextual menu item,\r\n * providing a SmartEdit CMS admin the ability to edit various properties of the given component.\r\n *\r\n * Convenience service to attach the open Editor Modal action to the contextual menu of a given component type, or\r\n * given regex corresponding to a selection of component types.\r\n *\r\n * Example: The Edit button is added to the contextual menu of the CMSParagraphComponent, and all types postfixed\r\n * with BannerComponent.\r\n */\r\nvar /* @ngInject */ EditorEnablerService = /** @class */ (function () {\r\n    function /* @ngInject */ EditorEnablerService(componentHandlerService, componentVisibilityAlertService, editorModalService, featureService, slotRestrictionsService, systemEventService) {\r\n        var _this = this;\r\n        this.componentHandlerService = componentHandlerService;\r\n        this.componentVisibilityAlertService = componentVisibilityAlertService;\r\n        this.editorModalService = editorModalService;\r\n        this.featureService = featureService;\r\n        this.slotRestrictionsService = slotRestrictionsService;\r\n        this.systemEventService = systemEventService;\r\n        this.contextualMenuButton = {\r\n            key: 'se.cms.edit',\r\n            nameI18nKey: 'se.cms.contextmenu.nameI18nKey.edit',\r\n            i18nKey: 'se.cms.contextmenu.title.edit',\r\n            descriptionI18nKey: 'se.cms.contextmenu.descriptionI18n.edit',\r\n            displayClass: 'editbutton',\r\n            displayIconClass: 'sap-icon--edit',\r\n            displaySmallIconClass: 'sap-icon--edit',\r\n            priority: 400,\r\n            permissions: ['se.context.menu.edit.component'],\r\n            action: {\r\n                callback: function (config) {\r\n                    return _this.onClickEditButton(config);\r\n                }\r\n            },\r\n            condition: function (config) {\r\n                return _this.isSlotEditableForNonExternalComponent(config);\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Enables the Edit contextual menu item for the given component types.\r\n     *\r\n     * @param componentTypes The list of component types, as defined in the platform, for which to enable the Edit contextual menu.\r\n     */\r\n    /* @ngInject */ EditorEnablerService.prototype.enableForComponents = function (componentTypes) {\r\n        var contextualMenuConfig = __assign(__assign({}, this.contextualMenuButton), { regexpKeys: componentTypes });\r\n        this.featureService.addContextualMenuButton(contextualMenuConfig);\r\n    };\r\n    /* @ngInject */ EditorEnablerService.prototype.onClickEditButton = function (_a) {\r\n        var slotUuid = _a.slotUuid, componentAttributes = _a.componentAttributes;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var item, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        if (this.isEditorModalOpen) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        this.isEditorModalOpen = true;\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        _c.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.editorModalService.open(componentAttributes)];\r\n                    case 2:\r\n                        item = _c.sent();\r\n                        this.isEditorModalOpen = false;\r\n                        this.systemEventService.publish(COMPONENT_UPDATED_EVENT, item);\r\n                        return [2 /*return*/, this.componentVisibilityAlertService.checkAndAlertOnComponentVisibility({\r\n                                itemId: item.uuid,\r\n                                itemType: item.itemtype,\r\n                                catalogVersion: item.catalogVersion,\r\n                                restricted: item.restricted,\r\n                                slotId: slotUuid,\r\n                                visible: item.visible\r\n                            })];\r\n                    case 3:\r\n                        _b = _c.sent();\r\n                        this.isEditorModalOpen = false;\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ EditorEnablerService.prototype.isSlotEditableForNonExternalComponent = function (config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var slotId, isEditable;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        slotId = this.componentHandlerService.getParentSlotForComponent(config.element);\r\n                        return [4 /*yield*/, this.slotRestrictionsService.isSlotEditable(slotId)];\r\n                    case 1:\r\n                        isEditable = _a.sent();\r\n                        return [2 /*return*/, (isEditable &&\r\n                                !this.componentHandlerService.isExternalComponent(config.componentId, config.componentType))];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ EditorEnablerService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [ComponentHandlerService,\r\n            IComponentVisibilityAlertService,\r\n            IEditorModalService,\r\n            IFeatureService,\r\n            ISlotRestrictionsService,\r\n            SystemEventService])\r\n    ], /* @ngInject */ EditorEnablerService);\r\n    return /* @ngInject */ EditorEnablerService;\r\n}());\r\nexport { /* @ngInject */ EditorEnablerService };\r\n//# sourceMappingURL=EditorEnablerService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"EditorEnablerService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/EditorEnablerService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/EditorEnablerService.d.ts","writeByteOrderMark":false,"text":"import { IComponentVisibilityAlertService, IEditorModalService, ISlotRestrictionsService } from 'cmscommons';\r\nimport { ComponentHandlerService } from 'smartedit';\r\nimport { IFeatureService, SystemEventService } from 'smarteditcommons';\r\n/**\r\n * Allows enabling the Edit Component contextual menu item,\r\n * providing a SmartEdit CMS admin the ability to edit various properties of the given component.\r\n *\r\n * Convenience service to attach the open Editor Modal action to the contextual menu of a given component type, or\r\n * given regex corresponding to a selection of component types.\r\n *\r\n * Example: The Edit button is added to the contextual menu of the CMSParagraphComponent, and all types postfixed\r\n * with BannerComponent.\r\n */\r\nexport declare class EditorEnablerService {\r\n    private componentHandlerService;\r\n    private componentVisibilityAlertService;\r\n    private editorModalService;\r\n    private featureService;\r\n    private slotRestrictionsService;\r\n    private systemEventService;\r\n    private contextualMenuButton;\r\n    private isEditorModalOpen;\r\n    constructor(componentHandlerService: ComponentHandlerService, componentVisibilityAlertService: IComponentVisibilityAlertService, editorModalService: IEditorModalService, featureService: IFeatureService, slotRestrictionsService: ISlotRestrictionsService, systemEventService: SystemEventService);\r\n    /**\r\n     * Enables the Edit contextual menu item for the given component types.\r\n     *\r\n     * @param componentTypes The list of component types, as defined in the platform, for which to enable the Edit contextual menu.\r\n     */\r\n    enableForComponents(componentTypes: string[]): void;\r\n    private onClickEditButton;\r\n    private isSlotEditableForNonExternalComponent;\r\n}\r\n"}}
