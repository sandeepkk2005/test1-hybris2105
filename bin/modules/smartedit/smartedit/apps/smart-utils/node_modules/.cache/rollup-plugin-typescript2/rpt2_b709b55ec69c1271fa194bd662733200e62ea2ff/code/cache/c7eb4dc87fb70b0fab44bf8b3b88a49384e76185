{"code":"//# sourceMappingURL=i-retry.js.map","references":[],"map":"{\"version\":3,\"file\":\"i-retry.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/services/interceptors/errors/retries/retryPolicies/i-retry.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/interceptors/errors/retries/retryPolicies/i-retry.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:IRetry\r\n * @description\r\n * Interface for retry policies\r\n */\r\nexport interface IRetry {\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:IRetry#calculateNextDelay\r\n     * @methodOf @smartutils.services:IRetry\r\n     *\r\n     * @description\r\n     * This method will calculate the next delay time.\r\n     *\r\n     * @param {Number} attemptCount The current number of retry attempts\r\n     * @param {Number =} maxBackoff The maximum delay between two retries\r\n     * @param {Number =} minBackoff The minimum delay between two retries\r\n     *\r\n     * @return {Number} The next delay value\r\n     */\r\n    calculateNextDelay(attemptCount: number, maxBackoff?: number, minBackoff?: number): number;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:IRetry#canRetry\r\n     * @methodOf @smartutils.services:IRetry\r\n     *\r\n     * @description\r\n     * This method returns true if it is valid to perform another retry, otherwise, it returns false.\r\n     *\r\n     * @param {Number} attemptCount The current number of retry attempts\r\n     * @param {Number =} maxAttempt The maximum number of retry attempts\r\n     *\r\n     * @return {Boolean} is valid to perform another retry?\r\n     */\r\n    canRetry(attemptCount: number, maxAttempt?: number): boolean;\r\n}\r\n"}}
