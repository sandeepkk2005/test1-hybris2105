{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/* tslint:disable:max-classes-per-file */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * @internal\r\n * Internal property on the constructor used for adding decorator metadata\r\n * so that it can be later picked up after component compilation.\r\n */\r\nexport var FORM_PROP = Symbol('_form_prop_');\r\n/**\r\n * Base data PropDecorator.\r\n * @internal\r\n */\r\nvar PropDecorator = /** @class */ (function () {\r\n    function PropDecorator(property) {\r\n        this.property = property;\r\n    }\r\n    return PropDecorator;\r\n}());\r\nexport { PropDecorator };\r\n/**\r\n * @internal\r\n */\r\nvar InputPropDecorator = /** @class */ (function (_super) {\r\n    __extends(InputPropDecorator, _super);\r\n    function InputPropDecorator(property, alias) {\r\n        var _this = _super.call(this, property) || this;\r\n        _this.alias = alias ? alias : _this.property;\r\n        return _this;\r\n    }\r\n    return InputPropDecorator;\r\n}(PropDecorator));\r\nexport { InputPropDecorator };\r\n/**\r\n * @internal\r\n */\r\nvar FormPropDecorator = /** @class */ (function (_super) {\r\n    __extends(FormPropDecorator, _super);\r\n    function FormPropDecorator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return FormPropDecorator;\r\n}(PropDecorator));\r\nexport { FormPropDecorator };\r\n/**\r\n * Used for tagging dynamic inputs and adding them to the FORM_PROP property\r\n * of the target constructor.\r\n */\r\nfunction makePropertyDecorator(factory) {\r\n    return function (target, key) {\r\n        var ctor = target.constructor;\r\n        if (!ctor[FORM_PROP]) {\r\n            ctor[FORM_PROP] = [];\r\n        }\r\n        ctor[FORM_PROP].push(factory(key));\r\n    };\r\n}\r\n/**\r\n * Injects the AbstractForm for the dynamic form component.\r\n */\r\nexport function DynamicForm() {\r\n    return makePropertyDecorator(function (key) { return new FormPropDecorator(key); });\r\n}\r\n/**\r\n * Injects a property of the AbstractForm for the dynamic form component.\r\n * Inputs are assigned from the FormSchema's 'inputs' property.\r\n * NOTE:\r\n * Property values are only available ngOnInit or onDynamicInputChange.\r\n * @param alias Use this alias to target a property of the AbstractForm. Defaults\r\n * to the assigned class property.\r\n * @example\r\n * <pre>\r\n *     @Component({ ... })\r\n *     export class DynamicFormComponent {\r\n *         @DynamicInput()\r\n *         property: string\r\n *     }\r\n * <pre>\r\n */\r\nexport var DynamicInput = function (alias) {\r\n    if (alias === void 0) { alias = null; }\r\n    return makePropertyDecorator(function (key) { return new InputPropDecorator(key, alias); });\r\n};\r\n//# sourceMappingURL=decorators.js.map","references":[],"map":"{\"version\":3,\"file\":\"decorators.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/form-builder/decorators.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH,yCAAyC;AACzC;;;GAGG;AACH;;;GAGG;AACH,yCAAyC;;AAEzC;;;;GAIG;AACH,MAAM,CAAC,IAAM,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AAE/C;;;GAGG;AACH;IACI,uBAAmB,QAAgB;QAAhB,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IAC3C,oBAAC;AAAD,CAAC,AAFD,IAEC;;AAED;;GAEG;AACH;IAAwC,sCAAa;IAEjD,4BAAY,QAAgB,EAAE,KAAoB;QAAlD,YACI,kBAAM,QAAQ,CAAC,SAElB;QADG,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC;;IAC/C,CAAC;IACL,yBAAC;AAAD,CAAC,AAND,CAAwC,aAAa,GAMpD;;AAED;;GAEG;AACH;IAAuC,qCAAa;IAApD;;IAAsD,CAAC;IAAD,wBAAC;AAAD,CAAC,AAAvD,CAAuC,aAAa,GAAG;;AAEvD;;;GAGG;AACH,SAAS,qBAAqB,CAAI,OAAuC;IACrE,OAAO,UAAI,MAAS,EAAE,GAAW;QAC7B,IAAM,IAAI,GAAI,MAAc,CAAC,WAAW,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC;AACN,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW;IACvB,OAAO,qBAAqB,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,iBAAiB,CAAC,GAAG,CAAC,EAA1B,CAA0B,CAAC,CAAC;AACtE,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,IAAM,YAAY,GAAG,UAAC,KAA2B;IAA3B,sBAAA,EAAA,YAA2B;IACpD,OAAA,qBAAqB,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,kBAAkB,CAAC,GAAG,EAAE,KAAK,CAAC,EAAlC,CAAkC,CAAC;AAAlE,CAAkE,CAAC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/modules/form-builder/decorators.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * @internal\r\n * Internal property on the constructor used for adding decorator metadata\r\n * so that it can be later picked up after component compilation.\r\n */\r\nexport declare const FORM_PROP: unique symbol;\r\n/**\r\n * Base data PropDecorator.\r\n * @internal\r\n */\r\nexport declare class PropDecorator {\r\n    property: string;\r\n    constructor(property: string);\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport declare class InputPropDecorator extends PropDecorator {\r\n    alias: string;\r\n    constructor(property: string, alias: string | null);\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport declare class FormPropDecorator extends PropDecorator {\r\n}\r\n/**\r\n * Injects the AbstractForm for the dynamic form component.\r\n */\r\nexport declare function DynamicForm(): <C>(target: C, key: string) => void;\r\n/**\r\n * Injects a property of the AbstractForm for the dynamic form component.\r\n * Inputs are assigned from the FormSchema's 'inputs' property.\r\n * NOTE:\r\n * Property values are only available ngOnInit or onDynamicInputChange.\r\n * @param alias Use this alias to target a property of the AbstractForm. Defaults\r\n * to the assigned class property.\r\n * @example\r\n * <pre>\r\n *     @Component({ ... })\r\n *     export class DynamicFormComponent {\r\n *         @DynamicInput()\r\n *         property: string\r\n *     }\r\n * <pre>\r\n */\r\nexport declare const DynamicInput: (alias?: string | null) => <C>(target: C, key: string) => void;\r\n"}}
