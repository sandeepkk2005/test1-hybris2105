{"code":"import { __awaiter, __decorate, __generator, __metadata, __param } from \"tslib\";\r\nimport { Component, Inject } from '@angular/core';\r\nimport { TypePermissionsRestService } from 'cmscommons';\r\nimport { isEmpty } from 'lodash';\r\nimport { FileValidationService, GENERIC_EDITOR_WIDGET_DATA, LogService, SeDowngradeComponent } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from 'smarteditcontainer';\r\nvar MediaContainerClonePrefix = 'clone_';\r\nexport var MediaFormatType;\r\n(function (MediaFormatType) {\r\n    MediaFormatType[\"widescreen\"] = \"widescreen\";\r\n    MediaFormatType[\"desktop\"] = \"desktop\";\r\n    MediaFormatType[\"tablet\"] = \"tablet\";\r\n    MediaFormatType[\"mobile\"] = \"mobile\";\r\n})(MediaFormatType || (MediaFormatType = {}));\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"MediaContainerComponent\", {\r\n    selector: 'se-media-container',\r\n    template: \"<div *ngIf=\\\"hasReadPermissionOnMediaRelatedTypes && advancedMediaContainerManagementEnabled\\\"><se-media-container-selector [eventNameAffix]=\\\"selectorEventNameAffix\\\" [isAdvancedCloning]=\\\"isAdvancedCloning()\\\" [initialName]=\\\"initialMediaContainerName\\\" [name]=\\\"getMediaContainerName()\\\" (nameChange)=\\\"onMediaContainerNameChange($event)\\\" (onCreate)=\\\"onMediaContainerCreate($event)\\\" (onRemove)=\\\"onMediaContainerRemove()\\\" (onSelect)=\\\"setMediaContainer($event)\\\" (onCreationInProgressChange)=\\\"onMediaContainerCreationInProgressChange($event)\\\"></se-media-container-selector></div><div class=\\\"se-media-container-field\\\" *ngIf=\\\"canShowMediaFormatWithUploadForm()\\\"><div class=\\\"se-media-container-field__media-list\\\"><se-media-format class=\\\"se-media-container-cell\\\" *ngFor=\\\"let format of field.options\\\" [ngClass]=\\\"getMediaContainerCellClassName(format.id)\\\" [errorMessages]=\\\"field.messages\\\" [isEditable]=\\\"field.editable\\\" [isUnderEdit]=\\\"isMediaFormatUnderEdit(format.id)\\\" [isFieldDisabled]=\\\"isFieldDisabled()\\\" [mediaUuid]=\\\"model[lang].medias[format.id]\\\" [mediaFormat]=\\\"format.id\\\" (onFileSelect)=\\\"onFileSelect($event, format.id)\\\" (onDelete)=\\\"removeMediaByFormat(format.id)\\\"></se-media-format></div><se-media-upload-form *ngIf=\\\"image\\\" class=\\\"se-media-upload-form-wrapper se-media-upload-form-wrapper--spaced\\\" [image]=\\\"image.file\\\" (onCancel)=\\\"resetImage()\\\" (onSelect)=\\\"onFileSelect($event)\\\" (onUploadSuccess)=\\\"onFileUploadSuccess($event, image.format)\\\"></se-media-upload-form><se-media-errors [errors]=\\\"fileValidationErrors\\\"></se-media-errors></div><div *ngIf=\\\"!hasReadPermissionOnMediaRelatedTypes\\\"><span translate=\\\"se.cms.media.typepermissions.error\\\" [translateParams]=\\\"{ containedTypes: field.containedTypes }\\\"></span></div>\"\r\n});\r\nvar /* @ngInject */ MediaContainerComponent = /** @class */ (function () {\r\n    function /* @ngInject */ MediaContainerComponent(logService, typePermissionsRestService, loadConfigManagerService, fileValidationService, data) {\r\n        this.logService = logService;\r\n        this.typePermissionsRestService = typePermissionsRestService;\r\n        this.loadConfigManagerService = loadConfigManagerService;\r\n        this.fileValidationService = fileValidationService;\r\n        (this.field = data.field, this.model = data.model, this.editor = data.editor, this.lang = data.qualifier, this.isFieldDisabled = data.isFieldDisabled);\r\n        this.selectorEventNameAffix = this.field.qualifier + \"_\" + this.lang;\r\n    }\r\n    /* @ngInject */ MediaContainerComponent.prototype.ngOnInit = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cloneMediaName;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.model[this.lang]) {\r\n                            this.setMediaContainer({\r\n                                catalogVersion: undefined,\r\n                                medias: {},\r\n                                qualifier: undefined,\r\n                                mediaContainerUuid: undefined\r\n                            });\r\n                        }\r\n                        return [4 /*yield*/, this.initHasReadPermissionOnMediaRelatedTypes()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.initAdvancedMediaContainerManagementEnabled()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        this.initialMediaContainerName = this.getMediaContainerName();\r\n                        if (this.isAdvancedCloning()) {\r\n                            cloneMediaName = \"\" + MediaContainerClonePrefix + this.initialMediaContainerName.trim();\r\n                            this.onMediaContainerNameChange(cloneMediaName);\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.getMediaContainerName = function () {\r\n        var _a;\r\n        return ((_a = this.model[this.lang]) === null || _a === void 0 ? void 0 : _a.qualifier) || '';\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.getMediaContainerCellClassName = function (format) {\r\n        return \"se-media-container-cell--\" + format;\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.setMediaContainer = function (mediaContainer) {\r\n        this.model[this.lang] = mediaContainer;\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.canShowMediaFormatWithUploadForm = function () {\r\n        return (this.hasReadPermissionOnMediaRelatedTypes &&\r\n            (this.isMediaContainerSelected() ||\r\n                this.mediaContainerCreationInProgress ||\r\n                !this.advancedMediaContainerManagementEnabled));\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.isMediaFormatUnderEdit = function (format) {\r\n        var _a;\r\n        return format === ((_a = this.image) === null || _a === void 0 ? void 0 : _a.format);\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.onFileSelect = function (files, format) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var file, imageFormat, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        this.resetImage();\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        _c.trys.push([1, 3, , 4]);\r\n                        file = files[0];\r\n                        return [4 /*yield*/, this.fileValidationService.validate(file, this.fileValidationErrors)];\r\n                    case 2:\r\n                        _c.sent();\r\n                        imageFormat = ((_a = this.image) === null || _a === void 0 ? void 0 : _a.format) || format;\r\n                        this.image = {\r\n                            file: file,\r\n                            format: imageFormat\r\n                        };\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _b = _c.sent();\r\n                        this.logService.warn('Invalid file');\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.onFileUploadSuccess = function (uuid, format) {\r\n        this.setMediaUuidForFormat(uuid, format);\r\n        this.resetImage();\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerCreate = function (name) {\r\n        this.clearModel();\r\n        this.onMediaContainerNameChange(name);\r\n        this.model[this.lang].medias = {};\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerRemove = function () {\r\n        this.clearModel();\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerNameChange = function (name) {\r\n        this.model[this.lang].qualifier = name;\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerCreationInProgressChange = function (inProgress) {\r\n        this.mediaContainerCreationInProgress = inProgress;\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.removeMediaByFormat = function (format) {\r\n        delete this.model[this.lang].medias[format];\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.initAdvancedMediaContainerManagementEnabled = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var configurations;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.loadConfigManagerService.loadAsObject()];\r\n                    case 1:\r\n                        configurations = _a.sent();\r\n                        this.advancedMediaContainerManagementEnabled =\r\n                            configurations.advancedMediaContainerManagement || false;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.initHasReadPermissionOnMediaRelatedTypes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var permissionsResult_1, error_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.typePermissionsRestService.hasAllPermissionsForTypes(this.field.containedTypes)];\r\n                    case 1:\r\n                        permissionsResult_1 = _a.sent();\r\n                        this.hasReadPermissionOnMediaRelatedTypes = this.field.containedTypes.every(function (type) { return permissionsResult_1[type].read; });\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        error_1 = _a.sent();\r\n                        this.hasReadPermissionOnMediaRelatedTypes = false;\r\n                        this.logService.warn('Failed to retrieve type permissions', error_1);\r\n                        return [3 /*break*/, 3];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.setMediaUuidForFormat = function (uuid, format) {\r\n        this.model[this.lang].medias[format] = uuid;\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.isAdvancedCloning = function () {\r\n        var isCloning = !!this.editor.initialContent.cloneComponent;\r\n        return isCloning && this.advancedMediaContainerManagementEnabled;\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.isMediaContainerSelected = function () {\r\n        return !isEmpty(this.model[this.lang]);\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.resetImage = function () {\r\n        this.fileValidationErrors = [];\r\n        this.image = null;\r\n    };\r\n    /* @ngInject */ MediaContainerComponent.prototype.clearModel = function () {\r\n        var _this = this;\r\n        Object.keys(this.model[this.lang]).forEach(function (key) { return delete _this.model[_this.lang][key]; });\r\n    };\r\n    /* @ngInject */ MediaContainerComponent = __decorate([\r\n        SeDowngradeComponent(),\r\n        Component({\r\n            selector: 'se-media-container',\r\n            template: \"<div *ngIf=\\\"hasReadPermissionOnMediaRelatedTypes && advancedMediaContainerManagementEnabled\\\"><se-media-container-selector [eventNameAffix]=\\\"selectorEventNameAffix\\\" [isAdvancedCloning]=\\\"isAdvancedCloning()\\\" [initialName]=\\\"initialMediaContainerName\\\" [name]=\\\"getMediaContainerName()\\\" (nameChange)=\\\"onMediaContainerNameChange($event)\\\" (onCreate)=\\\"onMediaContainerCreate($event)\\\" (onRemove)=\\\"onMediaContainerRemove()\\\" (onSelect)=\\\"setMediaContainer($event)\\\" (onCreationInProgressChange)=\\\"onMediaContainerCreationInProgressChange($event)\\\"></se-media-container-selector></div><div class=\\\"se-media-container-field\\\" *ngIf=\\\"canShowMediaFormatWithUploadForm()\\\"><div class=\\\"se-media-container-field__media-list\\\"><se-media-format class=\\\"se-media-container-cell\\\" *ngFor=\\\"let format of field.options\\\" [ngClass]=\\\"getMediaContainerCellClassName(format.id)\\\" [errorMessages]=\\\"field.messages\\\" [isEditable]=\\\"field.editable\\\" [isUnderEdit]=\\\"isMediaFormatUnderEdit(format.id)\\\" [isFieldDisabled]=\\\"isFieldDisabled()\\\" [mediaUuid]=\\\"model[lang].medias[format.id]\\\" [mediaFormat]=\\\"format.id\\\" (onFileSelect)=\\\"onFileSelect($event, format.id)\\\" (onDelete)=\\\"removeMediaByFormat(format.id)\\\"></se-media-format></div><se-media-upload-form *ngIf=\\\"image\\\" class=\\\"se-media-upload-form-wrapper se-media-upload-form-wrapper--spaced\\\" [image]=\\\"image.file\\\" (onCancel)=\\\"resetImage()\\\" (onSelect)=\\\"onFileSelect($event)\\\" (onUploadSuccess)=\\\"onFileUploadSuccess($event, image.format)\\\"></se-media-upload-form><se-media-errors [errors]=\\\"fileValidationErrors\\\"></se-media-errors></div><div *ngIf=\\\"!hasReadPermissionOnMediaRelatedTypes\\\"><span translate=\\\"se.cms.media.typepermissions.error\\\" [translateParams]=\\\"{ containedTypes: field.containedTypes }\\\"></span></div>\"\r\n        }),\r\n        __param(4, Inject(GENERIC_EDITOR_WIDGET_DATA)),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            TypePermissionsRestService,\r\n            LoadConfigManagerService,\r\n            FileValidationService, Object])\r\n    ], /* @ngInject */ MediaContainerComponent);\r\n    return /* @ngInject */ MediaContainerComponent;\r\n}());\r\nexport { /* @ngInject */ MediaContainerComponent };\r\n//# sourceMappingURL=MediaContainerComponent.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"MediaContainerComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/components/genericEditor/media/components/mediaContainer/MediaContainerComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/genericEditor/media/components/mediaContainer/MediaContainerComponent.d.ts","writeByteOrderMark":false,"text":"import { OnInit } from '@angular/core';\r\nimport { TypePermissionsRestService } from 'cmscommons';\r\nimport { ErrorContext, FileValidationService, GenericEditorField, GenericEditorWidgetData, LogService, TypedMap } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from 'smarteditcontainer';\r\nexport interface MediaContainer {\r\n    catalogVersion: string;\r\n    medias: {\r\n        [index in MediaFormatType]: string;\r\n    } | unknown;\r\n    qualifier: string;\r\n    mediaContainerUuid: string;\r\n}\r\nexport declare enum MediaFormatType {\r\n    widescreen = \"widescreen\",\r\n    desktop = \"desktop\",\r\n    tablet = \"tablet\",\r\n    mobile = \"mobile\"\r\n}\r\nexport declare class MediaContainerComponent implements OnInit {\r\n    private logService;\r\n    private typePermissionsRestService;\r\n    private loadConfigManagerService;\r\n    private fileValidationService;\r\n    image: {\r\n        file: File;\r\n        format: MediaFormatType;\r\n    };\r\n    advancedMediaContainerManagementEnabled: boolean;\r\n    hasReadPermissionOnMediaRelatedTypes: boolean;\r\n    mediaContainerCreationInProgress: boolean;\r\n    selectorEventNameAffix: string;\r\n    fileValidationErrors: ErrorContext[];\r\n    initialMediaContainerName: string;\r\n    field: GenericEditorField;\r\n    model: TypedMap<MediaContainer | undefined>;\r\n    lang: string;\r\n    isFieldDisabled: () => boolean;\r\n    private editor;\r\n    constructor(logService: LogService, typePermissionsRestService: TypePermissionsRestService, loadConfigManagerService: LoadConfigManagerService, fileValidationService: FileValidationService, data: GenericEditorWidgetData<TypedMap<MediaContainer>>);\r\n    ngOnInit(): Promise<void>;\r\n    getMediaContainerName(): string;\r\n    getMediaContainerCellClassName(format: MediaFormatType): string;\r\n    setMediaContainer(mediaContainer: MediaContainer): void;\r\n    canShowMediaFormatWithUploadForm(): boolean;\r\n    isMediaFormatUnderEdit(format: MediaFormatType): boolean;\r\n    onFileSelect(files: FileList, format?: MediaFormatType): Promise<void>;\r\n    onFileUploadSuccess(uuid: string, format: MediaFormatType): void;\r\n    onMediaContainerCreate(name: string): void;\r\n    onMediaContainerRemove(): void;\r\n    onMediaContainerNameChange(name: string): void;\r\n    onMediaContainerCreationInProgressChange(inProgress: boolean): void;\r\n    removeMediaByFormat(format: MediaFormatType): void;\r\n    private initAdvancedMediaContainerManagementEnabled;\r\n    private initHasReadPermissionOnMediaRelatedTypes;\r\n    private setMediaUuidForFormat;\r\n    private isAdvancedCloning;\r\n    private isMediaContainerSelected;\r\n    private resetImage;\r\n    private clearModel;\r\n}\r\n"}}
