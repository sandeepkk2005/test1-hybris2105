{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\nimport { difference } from 'lodash';\r\nimport { authorizationEvictionTag, rarelyChangingContent, Cached, IRestServiceFactory, ISessionService, SeDowngradeService, LogService } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available attribute permission names for a given item\r\n */\r\nexport var AttributePermissionNames;\r\n(function (AttributePermissionNames) {\r\n    AttributePermissionNames[\"READ\"] = \"read\";\r\n    AttributePermissionNames[\"CHANGE\"] = \"change\";\r\n})(AttributePermissionNames || (AttributePermissionNames = {}));\r\n/**\r\n * Rest Service to retrieve attribute permissions.\r\n */\r\nvar /* @ngInject */ AttributePermissionsRestService = /** @class */ (function () {\r\n    function /* @ngInject */ AttributePermissionsRestService(restServiceFactory, sessionService, logService) {\r\n        this.sessionService = sessionService;\r\n        this.logService = logService;\r\n        this.ATTRIBUTE_PERMISSIONS_URI = '/permissionswebservices/v1/permissions/attributes/search';\r\n        this.permissionRestService = restServiceFactory.get(this.ATTRIBUTE_PERMISSIONS_URI);\r\n    }\r\n    /**\r\n     * Determines if the current user has READ access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their read permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their read permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.hasReadPermissionOnAttributesInType = function (type, attributeNames) {\r\n        return this.getPermissionsForAttributesAndNameByType(type, attributeNames, AttributePermissionNames.READ);\r\n    };\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their change permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their change permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.hasChangePermissionOnAttributesInType = function (type, attributeNames) {\r\n        return this.getPermissionsForAttributesAndNameByType(type, attributeNames, AttributePermissionNames.CHANGE);\r\n    };\r\n    /**\r\n     * @internal\r\n     *\r\n     * This method retrieves ALL the permissions the current user has on the given attributes. Attributes are expected with the following format:\r\n     * - type.attribute name\r\n     * For example, for an attribute called approvalStatus within the type ContentPage, the given attribute must be:\r\n     * - ContentPage.approvalStatus\r\n     *\r\n     * Note: This method is cached.\r\n     *\r\n     * @param attributes The list of attributes for which to retrieve permissions\r\n     * @returns A promise that resolves to a list of IPermissionsRestServiceResult, each of which\r\n     * represents the permissions of one of the given attributes.\r\n     */\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.getAllPermissionsForAttributes = function (attributes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var user, result, error_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (attributes.length <= 0) {\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        return [4 /*yield*/, this.sessionService.getCurrentUsername()];\r\n                    case 1:\r\n                        user = _a.sent();\r\n                        if (!user) {\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 4, , 5]);\r\n                        return [4 /*yield*/, this.permissionRestService.queryByPost({ principalUid: user }, {\r\n                                attributes: attributes.join(','),\r\n                                permissionNames: AttributePermissionNames.CHANGE + ',' + AttributePermissionNames.READ\r\n                            })];\r\n                    case 3:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result.permissionsList || []];\r\n                    case 4:\r\n                        error_1 = _a.sent();\r\n                        if (error_1) {\r\n                            this.logService.error(\"AttributePermissionsRestService - couldn't retrieve attribute permissions \" + attributes);\r\n                        }\r\n                        return [2 /*return*/, []];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.getPermissionsForAttributesAndNameByType = function (type, attributes, permissionName) {\r\n        var convertedAttributeNames = attributes.map(function (attr) { return type + '.' + attr; });\r\n        return this.getPermissionsForAttributesAndName(convertedAttributeNames, permissionName).then(function (attributePermissionsByTypeMap) {\r\n            return attributePermissionsByTypeMap[type];\r\n        });\r\n    };\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.getPermissionsForAttributesAndName = function (attributes, permissionName) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result, allPermissions;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getAllPermissionsForAttributes(attributes)];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        allPermissions = this.concatPermissionsNotFound(attributes, result);\r\n                        return [2 /*return*/, allPermissions.reduce(function (attributePermissionsByTypeMap, permissionsResult) {\r\n                                if (permissionsResult.permissions) {\r\n                                    var typeAttributePair = _this.parsePermissionsResultId(permissionsResult.id);\r\n                                    if (!attributePermissionsByTypeMap[typeAttributePair.type]) {\r\n                                        attributePermissionsByTypeMap[typeAttributePair.type] = {};\r\n                                    }\r\n                                    attributePermissionsByTypeMap[typeAttributePair.type][typeAttributePair.attribute] = _this.getPermissionByNameFromResult(permissionsResult, permissionName);\r\n                                }\r\n                                return attributePermissionsByTypeMap;\r\n                            }, {})];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.parsePermissionsResultId = function (id) {\r\n        var tokens = id.split('.');\r\n        if (tokens.length !== 2) {\r\n            throw new Error('AttributePermissionsRestService - Received invalid attribute permissions');\r\n        }\r\n        return {\r\n            type: tokens[0],\r\n            attribute: tokens[1]\r\n        };\r\n    };\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.getPermissionByNameFromResult = function (permissionsResult, permissionName) {\r\n        var foundPermission = permissionsResult.permissions.find(function (permission) { return permission.key === permissionName; });\r\n        return JSON.parse(foundPermission.value);\r\n    };\r\n    /* @ngInject */ AttributePermissionsRestService.prototype.concatPermissionsNotFound = function (attributes, permissionsFound) {\r\n        var permissionKeysFound = permissionsFound.map(function (permission) { return permission.id; });\r\n        var permissionKeysNotFound = difference(attributes, permissionKeysFound);\r\n        return permissionsFound.concat(permissionKeysNotFound.map(function (key) { return ({\r\n            id: key,\r\n            permissions: [\r\n                {\r\n                    key: AttributePermissionNames.READ,\r\n                    value: 'false'\r\n                },\r\n                {\r\n                    key: AttributePermissionNames.CHANGE,\r\n                    value: 'false'\r\n                }\r\n            ]\r\n        }); }));\r\n    };\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [authorizationEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ AttributePermissionsRestService.prototype, \"getAllPermissionsForAttributes\", null);\r\n    /* @ngInject */ AttributePermissionsRestService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n            ISessionService,\r\n            LogService])\r\n    ], /* @ngInject */ AttributePermissionsRestService);\r\n    return /* @ngInject */ AttributePermissionsRestService;\r\n}());\r\nexport { /* @ngInject */ AttributePermissionsRestService };\r\n//# sourceMappingURL=AttributePermissionsRestService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"AttributePermissionsRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/AttributePermissionsRestService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/services/AttributePermissionsRestService.d.ts","writeByteOrderMark":false,"text":"import { IRestServiceFactory, ISessionService, TypedMap, LogService } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available attribute permission names for a given item\r\n */\r\nexport declare enum AttributePermissionNames {\r\n    READ = \"read\",\r\n    CHANGE = \"change\"\r\n}\r\n/**\r\n * Rest Service to retrieve attribute permissions.\r\n */\r\nexport declare class AttributePermissionsRestService {\r\n    private sessionService;\r\n    private logService;\r\n    private readonly ATTRIBUTE_PERMISSIONS_URI;\r\n    private readonly permissionRestService;\r\n    constructor(restServiceFactory: IRestServiceFactory, sessionService: ISessionService, logService: LogService);\r\n    /**\r\n     * Determines if the current user has READ access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their read permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their read permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasReadPermissionOnAttributesInType(type: string, attributeNames: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their change permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their change permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasChangePermissionOnAttributesInType(type: string, attributeNames: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * @internal\r\n     *\r\n     * This method retrieves ALL the permissions the current user has on the given attributes. Attributes are expected with the following format:\r\n     * - type.attribute name\r\n     * For example, for an attribute called approvalStatus within the type ContentPage, the given attribute must be:\r\n     * - ContentPage.approvalStatus\r\n     *\r\n     * Note: This method is cached.\r\n     *\r\n     * @param attributes The list of attributes for which to retrieve permissions\r\n     * @returns A promise that resolves to a list of IPermissionsRestServiceResult, each of which\r\n     * represents the permissions of one of the given attributes.\r\n     */\r\n    private getAllPermissionsForAttributes;\r\n    private getPermissionsForAttributesAndNameByType;\r\n    private getPermissionsForAttributesAndName;\r\n    private parsePermissionsResultId;\r\n    private getPermissionByNameFromResult;\r\n    private concatPermissionsNotFound;\r\n}\r\n"}}
