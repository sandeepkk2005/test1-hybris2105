import { PnpmShrinkwrapFile, IPnpmShrinkwrapDependencyYaml } from './PnpmShrinkwrapFile';
import { RushConfigurationProject } from '../../api/RushConfigurationProject';
export interface IPnpmProjectDependencyManifestOptions {
    pnpmShrinkwrapFile: PnpmShrinkwrapFile;
    project: RushConfigurationProject;
}
/**
 * This class handles creating the project/.rush/temp/shrinkwrap-deps.json file
 * which tracks the direct and indirect dependencies that a project consumes. This is used
 * to better determine which projects should be rebuilt when dependencies are updated.
 */
export declare class PnpmProjectDependencyManifest {
    /**
     * This mapping is used to map all project dependencies and all their dependencies
     * to their respective dependency integrity hash. For example, if the project contains
     * a dependency A which itself has a dependency on B, the mapping would look like:
     * 'A@1.2.3': '{Integrity of A}',
     * 'B@4.5.6': '{Integrity of B}',
     * ...
     */
    private _projectDependencyManifestFile;
    private readonly _projectDependencyManifestFilename;
    private readonly _pnpmShrinkwrapFile;
    private readonly _project;
    constructor(options: IPnpmProjectDependencyManifestOptions);
    /**
     * Get the fully-qualified path to the project/.rush/temp/shrinkwrap-deps.json
     * for the specified project.
     */
    static getFilePathForProject(project: RushConfigurationProject): string;
    addDependency(name: string, version: string, parentShrinkwrapEntry: Pick<IPnpmShrinkwrapDependencyYaml, 'dependencies' | 'optionalDependencies' | 'peerDependencies'>): void;
    /**
     * Save the current state of the object to project/.rush/temp/shrinkwrap-deps.json
     */
    saveAsync(): Promise<void>;
    /**
     * If the project/.rush/temp/shrinkwrap-deps.json file exists, delete it. Otherwise, do nothing.
     */
    deleteIfExistsAsync(): Promise<void>;
    private _addDependencyInternal;
}
//# sourceMappingURL=PnpmProjectDependencyManifest.d.ts.map