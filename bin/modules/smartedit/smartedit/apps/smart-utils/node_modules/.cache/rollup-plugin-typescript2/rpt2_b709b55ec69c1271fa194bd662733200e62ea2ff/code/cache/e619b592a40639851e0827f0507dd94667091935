{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { __decorate, __metadata, __param } from \"tslib\";\r\nimport { Inject, Injectable, Injector } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { EVENT_SERVICE, LANGUAGE_SERVICE_CONSTANTS, SELECTED_LANGUAGE, SWITCH_LANGUAGE_EVENT } from '../constants';\r\nimport { IStorageService } from '../interfaces';\r\nimport { PromiseUtils } from '../utils';\r\nimport { BrowserService } from './browser';\r\nimport { rarelyChangingContent, Cached } from './cache';\r\nimport { LogService } from './log.service';\r\nimport { RestServiceFactory } from './rest';\r\n/**\r\n * @ngdoc object\r\n * @name resourceLocationsModule.object:LANGUAGE_RESOURCE_URI\r\n *\r\n * @description\r\n * Resource URI of the languages REST service.\r\n */\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:LanguageService\r\n */\r\nvar LanguageService = /** @class */ (function () {\r\n    function LanguageService(logService, translateService, promiseUtils, eventService, browserService, storageService, injector, languageServiceConstants) {\r\n        this.logService = logService;\r\n        this.translateService = translateService;\r\n        this.promiseUtils = promiseUtils;\r\n        this.eventService = eventService;\r\n        this.browserService = browserService;\r\n        this.storageService = storageService;\r\n        this.injector = injector;\r\n        this.languageServiceConstants = languageServiceConstants;\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getToolingLanguages\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Retrieves a list of language descriptors using REST calls to the i18n API.\r\n     *\r\n     * @returns {Promise<IToolingLanguage[]>} A promise that resolves to an array of IToolingLanguage.\r\n     */\r\n    LanguageService.prototype.getToolingLanguages = function () {\r\n        var _this = this;\r\n        return this.i18nLanguageRestService\r\n            .get({})\r\n            .then(function (response) { return response.languages; })\r\n            .catch(function (error) {\r\n            _this.logService.error('LanguageService.getToolingLanguages() - Error loading tooling languages');\r\n            return Promise.reject(error);\r\n        });\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getBrowserLanguageIsoCode\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @deprecated since 1808\r\n     *\r\n     * @description\r\n     * Uses the browser's current locale to determine the selected language ISO code.\r\n     *\r\n     * @returns {String} The language ISO code of the browser's currently selected locale.\r\n     */\r\n    LanguageService.prototype.getBrowserLanguageIsoCode = function () {\r\n        return window.navigator.language.split('-')[0];\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getBrowserLocale\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @deprecated since 1808 - use browserService instead.\r\n     *\r\n     * @description\r\n     * determines the browser locale in the format en_US\r\n     *\r\n     * @returns {string} the browser locale\r\n     */\r\n    LanguageService.prototype.getBrowserLocale = function () {\r\n        return this.browserService.getBrowserLocale();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getResolveLocale\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Resolve the user preference tooling locale. It determines in the\r\n     * following order:\r\n     *\r\n     * 1. Check if the user has previously selected the language\r\n     * 2. Check if the user browser locale is supported in the system\r\n     *\r\n     * @returns {Promise<string>} the locale\r\n     */\r\n    LanguageService.prototype.getResolveLocale = function () {\r\n        return this._getDefaultLanguage();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getResolveLocaleIsoCode\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Resolve the user preference tooling locale ISO code. i.e.: If the selected tooling language is 'en_US',\r\n     * the resolved value will be 'en'.\r\n     *\r\n     * @returns {Promise<string>} A promise that resolves to the isocode of the tooling language.\r\n     */\r\n    LanguageService.prototype.getResolveLocaleIsoCode = function () {\r\n        var _this = this;\r\n        return this.getResolveLocale().then(function (resolveLocale) { return _this.convertBCP47TagToJavaTag(resolveLocale).split('_')[0]; });\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#setSelectedToolingLanguage\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Set the user preference language in the storage service\r\n     *\r\n     * @param {IToolingLanguage} language the language object to be saved.\r\n     */\r\n    LanguageService.prototype.setSelectedToolingLanguage = function (language) {\r\n        this.storageService.setValueInLocalStorage(SELECTED_LANGUAGE, language, false);\r\n        this.translateService.use(language.isoCode);\r\n        this.setApplicationTitle();\r\n        this.eventService.publish(SWITCH_LANGUAGE_EVENT, {\r\n            isoCode: language.isoCode\r\n        });\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#registerSwitchLanguage\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Register a callback function to the gateway in order to switch the tooling language\r\n     */\r\n    LanguageService.prototype.registerSwitchLanguage = function () {\r\n        var _this = this;\r\n        this.eventService.subscribe(SWITCH_LANGUAGE_EVENT, function (eventId, language) {\r\n            if (_this.translateService.currentLang !== language.isoCode) {\r\n                _this.translateService.use(language.isoCode);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#convertBCP47TagToJavaTag\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Method converts the BCP47 language tag representing the locale to the default java representation.\r\n     * For example, method converts \"en-US\" to \"en_US\".\r\n     *\r\n     * @param {string} languageTag the language tag to be converted.\r\n     *\r\n     * @returns {string} the languageTag in java representation\r\n     */\r\n    LanguageService.prototype.convertBCP47TagToJavaTag = function (languageTag) {\r\n        return !!languageTag ? languageTag.replace(/-/g, '_') : languageTag;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#convertJavaTagToBCP47Tag\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Method converts the default java language tag representing the locale to the BCP47 representation.\r\n     * For example, method converts \"en_US\" to \"en-US\".\r\n     *\r\n     * @param {string} languageTag the language tag to be converted.\r\n     *\r\n     * @returns {string} the languageTag in BCP47 representation\r\n     */\r\n    LanguageService.prototype.convertJavaTagToBCP47Tag = function (languageTag) {\r\n        return !!languageTag ? languageTag.replace(/_/g, '-') : languageTag;\r\n    };\r\n    LanguageService.prototype._getDefaultLanguage = function () {\r\n        var _this = this;\r\n        return this.storageService.getValueFromLocalStorage(SELECTED_LANGUAGE, false).then(function (lang) {\r\n            return lang ? lang.isoCode : _this.browserService.getBrowserLocale();\r\n        }, function () { return _this.browserService.getBrowserLocale(); });\r\n    };\r\n    LanguageService.prototype.setApplicationTitle = function () {\r\n        this.translateService.get('se.application.name').subscribe(function (pageTitle) {\r\n            document.title = pageTitle;\r\n        });\r\n    };\r\n    Object.defineProperty(LanguageService.prototype, \"i18nLanguageRestService\", {\r\n        get: function () {\r\n            return this.injector\r\n                .get(RestServiceFactory)\r\n                .get(this.languageServiceConstants.I18N_LANGUAGES_RESOURCE_URI);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], LanguageService.prototype, \"getToolingLanguages\", null);\r\n    LanguageService = __decorate([\r\n        Injectable(),\r\n        __param(3, Inject(EVENT_SERVICE)),\r\n        __param(7, Inject(LANGUAGE_SERVICE_CONSTANTS)),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            TranslateService,\r\n            PromiseUtils, Object, BrowserService,\r\n            IStorageService,\r\n            Injector, Object])\r\n    ], LanguageService);\r\n    return LanguageService;\r\n}());\r\nexport { LanguageService };\r\n//# sourceMappingURL=language.service.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate/core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/constants.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/interfaces/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/browser/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/cache/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/log.service.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/rest/index.ts"],"map":"{\"version\":3,\"file\":\"language.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/language.service.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/language.service.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { Injector } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Payload } from '../dtos';\r\nimport { IEventService, ILanguageServiceConstants, IStorageService } from '../interfaces';\r\nimport { PromiseUtils } from '../utils';\r\nimport { BrowserService } from './browser';\r\nimport { LogService } from './log.service';\r\nimport { IRestService } from './rest';\r\n/**\r\n * @ngdoc interface\r\n * @name @smartutils.interfaces:ILanguage\r\n * @description\r\n * Interface for language information\r\n */\r\nexport interface ILanguage extends Payload {\r\n    active: boolean;\r\n    isocode: string;\r\n    name: string;\r\n    nativeName: string;\r\n    required: boolean;\r\n}\r\nexport interface IToolingLanguage extends Payload {\r\n    isoCode: string;\r\n    name: string;\r\n}\r\n/**\r\n * @ngdoc object\r\n * @name resourceLocationsModule.object:LANGUAGE_RESOURCE_URI\r\n *\r\n * @description\r\n * Resource URI of the languages REST service.\r\n */\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:LanguageService\r\n */\r\nexport declare class LanguageService {\r\n    protected logService: LogService;\r\n    protected translateService: TranslateService;\r\n    protected promiseUtils: PromiseUtils;\r\n    protected eventService: IEventService;\r\n    protected browserService: BrowserService;\r\n    protected storageService: IStorageService;\r\n    protected injector: Injector;\r\n    protected languageServiceConstants: ILanguageServiceConstants;\r\n    constructor(logService: LogService, translateService: TranslateService, promiseUtils: PromiseUtils, eventService: IEventService, browserService: BrowserService, storageService: IStorageService, injector: Injector, languageServiceConstants: ILanguageServiceConstants);\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getToolingLanguages\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Retrieves a list of language descriptors using REST calls to the i18n API.\r\n     *\r\n     * @returns {Promise<IToolingLanguage[]>} A promise that resolves to an array of IToolingLanguage.\r\n     */\r\n    getToolingLanguages(): Promise<IToolingLanguage[]>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getBrowserLanguageIsoCode\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @deprecated since 1808\r\n     *\r\n     * @description\r\n     * Uses the browser's current locale to determine the selected language ISO code.\r\n     *\r\n     * @returns {String} The language ISO code of the browser's currently selected locale.\r\n     */\r\n    getBrowserLanguageIsoCode(): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getBrowserLocale\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @deprecated since 1808 - use browserService instead.\r\n     *\r\n     * @description\r\n     * determines the browser locale in the format en_US\r\n     *\r\n     * @returns {string} the browser locale\r\n     */\r\n    getBrowserLocale(): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getResolveLocale\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Resolve the user preference tooling locale. It determines in the\r\n     * following order:\r\n     *\r\n     * 1. Check if the user has previously selected the language\r\n     * 2. Check if the user browser locale is supported in the system\r\n     *\r\n     * @returns {Promise<string>} the locale\r\n     */\r\n    getResolveLocale(): Promise<string>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#getResolveLocaleIsoCode\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Resolve the user preference tooling locale ISO code. i.e.: If the selected tooling language is 'en_US',\r\n     * the resolved value will be 'en'.\r\n     *\r\n     * @returns {Promise<string>} A promise that resolves to the isocode of the tooling language.\r\n     */\r\n    getResolveLocaleIsoCode(): Promise<string>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#setSelectedToolingLanguage\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Set the user preference language in the storage service\r\n     *\r\n     * @param {IToolingLanguage} language the language object to be saved.\r\n     */\r\n    setSelectedToolingLanguage(language: IToolingLanguage): void;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#registerSwitchLanguage\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Register a callback function to the gateway in order to switch the tooling language\r\n     */\r\n    registerSwitchLanguage(): void;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#convertBCP47TagToJavaTag\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Method converts the BCP47 language tag representing the locale to the default java representation.\r\n     * For example, method converts \"en-US\" to \"en_US\".\r\n     *\r\n     * @param {string} languageTag the language tag to be converted.\r\n     *\r\n     * @returns {string} the languageTag in java representation\r\n     */\r\n    convertBCP47TagToJavaTag(languageTag: string): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:LanguageService#convertJavaTagToBCP47Tag\r\n     * @methodOf @smartutils.services:LanguageService\r\n     *\r\n     * @description\r\n     * Method converts the default java language tag representing the locale to the BCP47 representation.\r\n     * For example, method converts \"en_US\" to \"en-US\".\r\n     *\r\n     * @param {string} languageTag the language tag to be converted.\r\n     *\r\n     * @returns {string} the languageTag in BCP47 representation\r\n     */\r\n    convertJavaTagToBCP47Tag(languageTag: string): string;\r\n    protected _getDefaultLanguage(): Promise<string>;\r\n    protected setApplicationTitle(): void;\r\n    protected get i18nLanguageRestService(): IRestService<{\r\n        languages: IToolingLanguage[];\r\n    }>;\r\n}\r\n"}}
