{"version":3,"file":"TarExecutable.js","sourceRoot":"","sources":["../../src/utilities/TarExecutable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,oEAAgF;AAEhF,+CAAiC;AAGjC,MAAa,aAAa;IAGxB,YAAoB,iBAAyB;QAC3C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,QAAkB;QAC5C,QAAQ,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,CAAC;QACzD,MAAM,iBAAiB,GAAuB,8BAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC3E,IAAI,CAAC,iBAAiB,EAAE;YACtB,QAAQ,CAAC,gBAAgB,CAAC,iCAAiC,CAAC,CAAC;YAC7D,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,IAAI,aAAa,CAAC,iBAAiB,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,aAAa,CAAC,WAAmB,EAAE,gBAAwB;QACtE,MAAM,YAAY,GAAiB,8BAAU,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,CAAC,EAAE;YACtG,uBAAuB,EAAE,gBAAgB;SAC1C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC9D,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,qCAAqC,CAChD,WAAmB,EACnB,KAAe,EACf,OAAiC;QAEjC,MAAM,iBAAiB,GAAW,GAAG,OAAO,CAAC,qBAAqB,aAAa,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAC5F,MAAM,8BAAU,CAAC,cAAc,CAAC,iBAAiB,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAErE,MAAM,iBAAiB,GAAW,OAAO,CAAC,aAAa,CAAC;QACxD,MAAM,YAAY,GAAiB,8BAAU,CAAC,KAAK,CACjD,IAAI,CAAC,kBAAkB,EACvB,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,iBAAiB,EAAE,cAAc,EAAE,iBAAiB,CAAC,EAC3F;YACE,uBAAuB,EAAE,iBAAiB;SAC3C,CACF,CAAC;QACF,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC9D,MAAM,8BAAU,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QAEpD,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AAvDD,sCAuDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Executable, FileSystem, Terminal } from '@rushstack/node-core-library';\r\nimport { ChildProcess } from 'child_process';\r\nimport * as events from 'events';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\n\r\nexport class TarExecutable {\r\n  private _tarExecutablePath: string;\r\n\r\n  private constructor(tarExecutablePath: string) {\r\n    this._tarExecutablePath = tarExecutablePath;\r\n  }\r\n\r\n  public static tryInitialize(terminal: Terminal): TarExecutable | undefined {\r\n    terminal.writeVerboseLine('Trying to find \"tar\" binary');\r\n    const tarExecutablePath: string | undefined = Executable.tryResolve('tar');\r\n    if (!tarExecutablePath) {\r\n      terminal.writeVerboseLine('\"tar\" was not found on the PATH');\r\n      return undefined;\r\n    }\r\n\r\n    return new TarExecutable(tarExecutablePath);\r\n  }\r\n\r\n  /**\r\n   * @returns\r\n   * The \"tar\" exit code\r\n   */\r\n  public async tryUntarAsync(archivePath: string, outputFolderPath: string): Promise<number> {\r\n    const childProcess: ChildProcess = Executable.spawn(this._tarExecutablePath, ['-x', '-f', archivePath], {\r\n      currentWorkingDirectory: outputFolderPath\r\n    });\r\n    const [tarExitCode] = await events.once(childProcess, 'exit');\r\n    return tarExitCode;\r\n  }\r\n\r\n  /**\r\n   * @returns\r\n   * The \"tar\" exit code\r\n   */\r\n  public async tryCreateArchiveFromProjectPathsAsync(\r\n    archivePath: string,\r\n    paths: string[],\r\n    project: RushConfigurationProject\r\n  ): Promise<number> {\r\n    const pathsListFilePath: string = `${project.projectRushTempFolder}/tarPaths_${Date.now()}`;\r\n    await FileSystem.writeFileAsync(pathsListFilePath, paths.join('\\n'));\r\n\r\n    const projectFolderPath: string = project.projectFolder;\r\n    const childProcess: ChildProcess = Executable.spawn(\r\n      this._tarExecutablePath,\r\n      ['-c', '-f', archivePath, '-z', '-C', projectFolderPath, '--files-from', pathsListFilePath],\r\n      {\r\n        currentWorkingDirectory: projectFolderPath\r\n      }\r\n    );\r\n    const [tarExitCode] = await events.once(childProcess, 'exit');\r\n    await FileSystem.deleteFileAsync(pathsListFilePath);\r\n\r\n    return tarExitCode;\r\n  }\r\n}\r\n"]}