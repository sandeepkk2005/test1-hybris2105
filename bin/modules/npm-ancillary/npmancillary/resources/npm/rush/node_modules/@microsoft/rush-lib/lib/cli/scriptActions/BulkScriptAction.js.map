{"version":3,"file":"BulkScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/BulkScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport colors from 'colors/safe';\r\n\r\nimport { AlreadyReportedError, ConsoleTerminalProvider, Terminal } from '@rushstack/node-core-library';\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineParameterKind\r\n} from '@rushstack/ts-command-line';\r\n\r\nimport { Event } from '../../index';\r\nimport { SetupChecks } from '../../logic/SetupChecks';\r\nimport { ITaskSelectorConstructor, TaskSelector } from '../../logic/TaskSelector';\r\nimport { Stopwatch, StopwatchState } from '../../utilities/Stopwatch';\r\nimport { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';\r\nimport { ITaskRunnerOptions, TaskRunner } from '../../logic/taskRunner/TaskRunner';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { EnvironmentVariableNames } from '../../api/EnvironmentConfiguration';\r\nimport { LastLinkFlag, LastLinkFlagFactory } from '../../api/LastLinkFlag';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\r\nimport { Selection } from '../../logic/Selection';\r\nimport { SelectionParameterSet } from '../SelectionParameterSet';\r\nimport { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\r\n\r\n/**\r\n * Constructor parameters for BulkScriptAction.\r\n */\r\nexport interface IBulkScriptActionOptions extends IBaseScriptActionOptions {\r\n  enableParallelism: boolean;\r\n  ignoreMissingScript: boolean;\r\n  ignoreDependencyOrder: boolean;\r\n  incremental: boolean;\r\n  allowWarningsInSuccessfulBuild: boolean;\r\n  watchForChanges: boolean;\r\n  disableBuildCache: boolean;\r\n\r\n  /**\r\n   * Optional command to run. Otherwise, use the `actionName` as the command to run.\r\n   */\r\n  commandToRun?: string;\r\n}\r\n\r\ninterface IExecuteInternalOptions {\r\n  taskSelectorOptions: ITaskSelectorConstructor;\r\n  taskRunnerOptions: ITaskRunnerOptions;\r\n  stopwatch: Stopwatch;\r\n  ignoreHooks?: boolean;\r\n  terminal: Terminal;\r\n}\r\n\r\n/**\r\n * This class implements bulk commands which are run individually for each project in the repo,\r\n * possibly in parallel.  The action executes a script found in the project's package.json file.\r\n *\r\n * @remarks\r\n * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\r\n * and \"rebuild\" commands are also modeled as bulk commands, because they essentially just\r\n * execute scripts from package.json in the same as any custom command.\r\n */\r\nexport class BulkScriptAction extends BaseScriptAction {\r\n  private readonly _enableParallelism: boolean;\r\n  private readonly _ignoreMissingScript: boolean;\r\n  private readonly _isIncrementalBuildAllowed: boolean;\r\n  private readonly _commandToRun: string;\r\n  private readonly _watchForChanges: boolean;\r\n  private readonly _disableBuildCache: boolean;\r\n  private readonly _repoCommandLineConfiguration: CommandLineConfiguration | undefined;\r\n  private readonly _ignoreDependencyOrder: boolean;\r\n  private readonly _allowWarningsInSuccessfulBuild: boolean;\r\n\r\n  private _changedProjectsOnly!: CommandLineFlagParameter;\r\n  private _selectionParameters!: SelectionParameterSet;\r\n  private _verboseParameter!: CommandLineFlagParameter;\r\n  private _parallelismParameter: CommandLineStringParameter | undefined;\r\n  private _ignoreHooksParameter!: CommandLineFlagParameter;\r\n  private _disableBuildCacheFlag: CommandLineFlagParameter | undefined;\r\n\r\n  public constructor(options: IBulkScriptActionOptions) {\r\n    super(options);\r\n    this._enableParallelism = options.enableParallelism;\r\n    this._ignoreMissingScript = options.ignoreMissingScript;\r\n    this._isIncrementalBuildAllowed = options.incremental;\r\n    this._commandToRun = options.commandToRun || options.actionName;\r\n    this._ignoreDependencyOrder = options.ignoreDependencyOrder;\r\n    this._allowWarningsInSuccessfulBuild = options.allowWarningsInSuccessfulBuild;\r\n    this._watchForChanges = options.watchForChanges;\r\n    this._disableBuildCache = options.disableBuildCache;\r\n    this._repoCommandLineConfiguration = options.commandLineConfiguration;\r\n  }\r\n\r\n  public async runAsync(): Promise<void> {\r\n    // TODO: Replace with last-install.flag when \"rush link\" and \"rush unlink\" are deprecated\r\n    const lastLinkFlag: LastLinkFlag = LastLinkFlagFactory.getCommonTempFlag(this.rushConfiguration);\r\n    if (!lastLinkFlag.isValid()) {\r\n      const useWorkspaces: boolean =\r\n        this.rushConfiguration.pnpmOptions && this.rushConfiguration.pnpmOptions.useWorkspaces;\r\n      if (useWorkspaces) {\r\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush install\" or \"rush update\"?`);\r\n      } else {\r\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush link\"?`);\r\n      }\r\n    }\r\n\r\n    this._doBeforeTask();\r\n\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    const isQuietMode: boolean = !this._verboseParameter.value;\r\n\r\n    // if this is parallelizable, then use the value from the flag (undefined or a number),\r\n    // if parallelism is not enabled, then restrict to 1 core\r\n    const parallelism: string | undefined = this._enableParallelism ? this._parallelismParameter!.value : '1';\r\n\r\n    // Collect all custom parameter values\r\n    const customParameterValues: string[] = [];\r\n    for (const customParameter of this.customParameters) {\r\n      customParameter.appendToArgList(customParameterValues);\r\n    }\r\n\r\n    const changedProjectsOnly: boolean = this._isIncrementalBuildAllowed && this._changedProjectsOnly.value;\r\n\r\n    const terminal: Terminal = new Terminal(new ConsoleTerminalProvider());\r\n    let buildCacheConfiguration: BuildCacheConfiguration | undefined;\r\n    if (!this._disableBuildCacheFlag?.value && !this._disableBuildCache) {\r\n      buildCacheConfiguration = await BuildCacheConfiguration.loadFromDefaultPathAsync(\r\n        terminal,\r\n        this.rushConfiguration\r\n      );\r\n    }\r\n\r\n    const selection: Set<RushConfigurationProject> = this._selectionParameters.getSelectedProjects();\r\n\r\n    const taskSelectorOptions: ITaskSelectorConstructor = {\r\n      rushConfiguration: this.rushConfiguration,\r\n      buildCacheConfiguration,\r\n      selection,\r\n      commandName: this.actionName,\r\n      commandToRun: this._commandToRun,\r\n      customParameterValues,\r\n      isQuietMode: isQuietMode,\r\n      isIncrementalBuildAllowed: this._isIncrementalBuildAllowed,\r\n      ignoreMissingScript: this._ignoreMissingScript,\r\n      ignoreDependencyOrder: this._ignoreDependencyOrder,\r\n      packageDepsFilename: Utilities.getPackageDepsFilenameForCommand(this._commandToRun)\r\n    };\r\n\r\n    const taskRunnerOptions: ITaskRunnerOptions = {\r\n      quietMode: isQuietMode,\r\n      parallelism: parallelism,\r\n      changedProjectsOnly: changedProjectsOnly,\r\n      allowWarningsInSuccessfulBuild: this._allowWarningsInSuccessfulBuild,\r\n      repoCommandLineConfiguration: this._repoCommandLineConfiguration\r\n    };\r\n\r\n    const executeOptions: IExecuteInternalOptions = {\r\n      taskSelectorOptions,\r\n      taskRunnerOptions,\r\n      stopwatch,\r\n      terminal\r\n    };\r\n\r\n    if (this._watchForChanges) {\r\n      await this._runWatch(executeOptions);\r\n    } else {\r\n      await this._runOnce(executeOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runs the command in watch mode. Fundamentally is a simple loop:\r\n   * 1) Wait for a change to one or more projects in the selection (skipped initially)\r\n   * 2) Invoke the command on the changed projects, and, if applicable, impacted projects\r\n   *    Uses the same algorithm as --impacted-by\r\n   * 3) Goto (1)\r\n   */\r\n  private async _runWatch(options: IExecuteInternalOptions): Promise<void> {\r\n    const {\r\n      taskSelectorOptions: {\r\n        buildCacheConfiguration: initialBuildCacheConfiguration,\r\n        selection: projectsToWatch\r\n      },\r\n      stopwatch,\r\n      terminal\r\n    } = options;\r\n\r\n    // Use async import so that we don't pay the cost for sync builds\r\n    const { ProjectWatcher } = await import('../../logic/ProjectWatcher');\r\n\r\n    const projectWatcher: typeof ProjectWatcher.prototype = new ProjectWatcher({\r\n      debounceMilliseconds: 1000,\r\n      rushConfiguration: this.rushConfiguration,\r\n      projectsToWatch\r\n    });\r\n\r\n    let isInitialPass: boolean = true;\r\n\r\n    // Loop until Ctrl+C\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      // Report so that the developer can always see that it is in watch mode as the latest console line.\r\n      terminal.writeLine(\r\n        `Watching for changes to ${projectsToWatch.size} ${\r\n          projectsToWatch.size === 1 ? 'project' : 'projects'\r\n        }. Press Ctrl+C to exit.`\r\n      );\r\n\r\n      // On the initial invocation, this promise will return immediately with the full set of projects\r\n      const { changedProjects, state } = await projectWatcher.waitForChange();\r\n\r\n      let selection: ReadonlySet<RushConfigurationProject> = changedProjects;\r\n\r\n      if (stopwatch.state === StopwatchState.Stopped) {\r\n        // Clear and reset the stopwatch so that we only report time from a single execution at a time\r\n        stopwatch.reset();\r\n        stopwatch.start();\r\n      }\r\n\r\n      terminal.writeLine(`Detected changes in ${selection.size} project${selection.size === 1 ? '' : 's'}:`);\r\n      const names: string[] = [...selection].map((x) => x.packageName).sort();\r\n      for (const name of names) {\r\n        terminal.writeLine(`    ${colors.cyan(name)}`);\r\n      }\r\n\r\n      // If the command ignores dependency order, that means that only the changed projects should be affected\r\n      // That said, running watch for commands that ignore dependency order may have unexpected results\r\n      if (!this._ignoreDependencyOrder) {\r\n        selection = Selection.intersection(Selection.expandAllConsumers(selection), projectsToWatch);\r\n      }\r\n\r\n      const executeOptions: IExecuteInternalOptions = {\r\n        taskSelectorOptions: {\r\n          ...options.taskSelectorOptions,\r\n          // Current implementation of the build cache deletes output folders before repopulating them;\r\n          // this tends to break `webpack --watch`, etc.\r\n          // Also, skipping writes to the local cache reduces CPU overhead and saves disk usage.\r\n          buildCacheConfiguration: isInitialPass ? initialBuildCacheConfiguration : undefined,\r\n          // Revise down the set of projects to execute the command on\r\n          selection,\r\n          // Pass the PackageChangeAnalyzer from the state differ to save a bit of overhead\r\n          packageChangeAnalyzer: state\r\n        },\r\n        taskRunnerOptions: options.taskRunnerOptions,\r\n        stopwatch,\r\n        // For now, don't run pre-build or post-build in watch mode\r\n        ignoreHooks: true,\r\n        terminal\r\n      };\r\n\r\n      try {\r\n        // Delegate the the underlying command, for only the projects that need reprocessing\r\n        await this._runOnce(executeOptions);\r\n      } catch (err) {\r\n        // In watch mode, we want to rebuild even if the original build failed.\r\n        if (!(err instanceof AlreadyReportedError)) {\r\n          throw err;\r\n        }\r\n      }\r\n\r\n      isInitialPass = false;\r\n    }\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    if (this._enableParallelism) {\r\n      this._parallelismParameter = this.defineStringParameter({\r\n        parameterLongName: '--parallelism',\r\n        parameterShortName: '-p',\r\n        argumentName: 'COUNT',\r\n        environmentVariable: EnvironmentVariableNames.RUSH_PARALLELISM,\r\n        description:\r\n          'Specifies the maximum number of concurrent processes to launch during a build.' +\r\n          ' The COUNT should be a positive integer or else the word \"max\" to specify a count that is equal to' +\r\n          ' the number of CPU cores. If this parameter is omitted, then the default value depends on the' +\r\n          ' operating system and number of CPU cores.'\r\n      });\r\n    }\r\n\r\n    this._selectionParameters = new SelectionParameterSet(this.rushConfiguration, this);\r\n\r\n    this._verboseParameter = this.defineFlagParameter({\r\n      parameterLongName: '--verbose',\r\n      parameterShortName: '-v',\r\n      description: 'Display the logs during the build, rather than just displaying the build status summary'\r\n    });\r\n\r\n    if (this._isIncrementalBuildAllowed) {\r\n      this._changedProjectsOnly = this.defineFlagParameter({\r\n        parameterLongName: '--changed-projects-only',\r\n        parameterShortName: '-c',\r\n        description:\r\n          'Normally the incremental build logic will rebuild changed projects as well as' +\r\n          ' any projects that directly or indirectly depend on a changed project. Specify \"--changed-projects-only\"' +\r\n          ' to ignore dependent projects, only rebuilding those projects whose files were changed.' +\r\n          ' Note that this parameter is \"unsafe\"; it is up to the developer to ensure that the ignored projects' +\r\n          ' are okay to ignore.'\r\n      });\r\n    }\r\n\r\n    this._ignoreHooksParameter = this.defineFlagParameter({\r\n      parameterLongName: '--ignore-hooks',\r\n      description: `Skips execution of the \"eventHooks\" scripts defined in rush.json. Make sure you know what you are skipping.`\r\n    });\r\n\r\n    if (\r\n      !this._disableBuildCache &&\r\n      this.rushConfiguration?.experimentsConfiguration.configuration.buildCache\r\n    ) {\r\n      this._disableBuildCacheFlag = this.defineFlagParameter({\r\n        parameterLongName: '--disable-build-cache',\r\n        description: '(EXPERIMENTAL) Disables the build cache for this command invocation.'\r\n      });\r\n    }\r\n\r\n    this.defineScriptParameters();\r\n  }\r\n\r\n  /**\r\n   * Runs a single invocation of the command\r\n   */\r\n  private async _runOnce(options: IExecuteInternalOptions): Promise<void> {\r\n    const taskSelector: TaskSelector = new TaskSelector(options.taskSelectorOptions);\r\n\r\n    // Register all tasks with the task collection\r\n\r\n    const taskRunner: TaskRunner = new TaskRunner(\r\n      taskSelector.registerTasks().getOrderedTasks(),\r\n      options.taskRunnerOptions\r\n    );\r\n\r\n    const { ignoreHooks, stopwatch } = options;\r\n\r\n    try {\r\n      await taskRunner.executeAsync();\r\n\r\n      stopwatch.stop();\r\n      console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));\r\n\r\n      if (!ignoreHooks) {\r\n        this._doAfterTask(stopwatch, true);\r\n      }\r\n    } catch (error) {\r\n      stopwatch.stop();\r\n\r\n      if (error instanceof AlreadyReportedError) {\r\n        console.log(`rush ${this.actionName} (${stopwatch.toString()})`);\r\n      } else {\r\n        if (error && error.message) {\r\n          if (this.parser.isDebug) {\r\n            console.log('Error: ' + error.stack);\r\n          } else {\r\n            console.log('Error: ' + error.message);\r\n          }\r\n        }\r\n\r\n        console.log(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));\r\n      }\r\n\r\n      if (!ignoreHooks) {\r\n        this._doAfterTask(stopwatch, false);\r\n      }\r\n      throw new AlreadyReportedError();\r\n    }\r\n  }\r\n\r\n  private _doBeforeTask(): void {\r\n    if (\r\n      this.actionName !== RushConstants.buildCommandName &&\r\n      this.actionName !== RushConstants.rebuildCommandName\r\n    ) {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n\r\n    SetupChecks.validate(this.rushConfiguration);\r\n\r\n    this.eventHooksManager.handle(Event.preRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\r\n  }\r\n\r\n  private _doAfterTask(stopwatch: Stopwatch, success: boolean): void {\r\n    if (\r\n      this.actionName !== RushConstants.buildCommandName &&\r\n      this.actionName !== RushConstants.rebuildCommandName\r\n    ) {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n    this._collectTelemetry(stopwatch, success);\r\n    this.parser.flushTelemetry();\r\n    this.eventHooksManager.handle(Event.postRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\r\n  }\r\n\r\n  private _collectTelemetry(stopwatch: Stopwatch, success: boolean): void {\r\n    const extraData: { [key: string]: string } = this._selectionParameters.getTelemetry();\r\n\r\n    for (const customParameter of this.customParameters) {\r\n      switch (customParameter.kind) {\r\n        case CommandLineParameterKind.Flag:\r\n        case CommandLineParameterKind.Choice:\r\n        case CommandLineParameterKind.String:\r\n        case CommandLineParameterKind.Integer:\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          extraData[customParameter.longName] = JSON.stringify((customParameter as any).value);\r\n          break;\r\n        default:\r\n          extraData[customParameter.longName] = '?';\r\n      }\r\n    }\r\n\r\n    if (this.parser.telemetry) {\r\n      this.parser.telemetry.log({\r\n        name: this.actionName,\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}