{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/* forbiddenNameSpaces useClass:false */\r\nimport { InjectionToken } from '@angular/core';\r\n/**\r\n * Used to register Custom Populators that will be available for `GenericEditorDropdownServiceFactory`.\r\n *\r\n * A custom populator can be registered by providing the name of that populator without \"DropdownPopulator\" suffix\r\n * in the following properties of {@link GenericEditorField}.\r\n *\r\n * - propertType - e.g. `MyCustomDropdownPopulator` -> { propertyType: 'myCustom' }\r\n *\r\n * - cmsStrutureType - e.g. `MyCustomDropdownPopulator` -> { cmsStructureType: 'myCustom' }\r\n *\r\n * - smarteditComponentType - e.g. `MyCustomDropdownPopulator` -> { smarteditComponentType: 'myCustom' }\r\n *\r\n * - smarteditComponentType + qualifier - e.g. `MyCustomProductDropdownPopulator` { smarteditComponentType: 'myCustom', qualifier: 'product' }\r\n *\r\n * Note: The value of those properties is case insensitive.\r\n *\r\n * ### Example\r\n *\r\n *      \\@NgModule({\r\n *          imports: [],\r\n *          providers: [\r\n *              {\r\n *                  provide: CustomDropdownPopulatorsToken,\r\n *                  useClass: MyCustomDropdownPopulator,\r\n *                  multi: true\r\n *               }\r\n *          ]\r\n *      })\r\n *      export class ExtensionModule {};\r\n */\r\nexport var CustomDropdownPopulatorsToken = new InjectionToken('CustomDropdownPopulatorsToken');\r\nexport var IDropdownPopulatorInterface = new InjectionToken('IDropdownPopulatorInterface');\r\n//# sourceMappingURL=types.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/types.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/components/dropdown/populators/DropdownPopulatorInterface.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/components/genericEditor/components/dropdown/populators/types.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH,wCAAwC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AA2D/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,MAAM,CAAC,IAAM,6BAA6B,GAAG,IAAI,cAAc,CAC3D,+BAA+B,CAClC,CAAC;AAEF,MAAM,CAAC,IAAM,2BAA2B,GAAG,IAAI,cAAc,CACzD,6BAA6B,CAChC,CAAC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/genericEditor/components/dropdown/populators/types.d.ts","writeByteOrderMark":false,"text":"import { InjectionToken } from '@angular/core';\r\nimport { Page, Payload } from '@smart/utils';\r\nimport { GenericEditorField, GenericEditorOption } from '../../../types';\r\nimport { DropdownPopulatorInterface } from './DropdownPopulatorInterface';\r\nexport interface IDropdownPopulator {\r\n    isPaged(): boolean;\r\n    fetchAll(payload: DropdownPopulatorPayload): Promise<GenericEditorOption[]>;\r\n    fetchPage<T = any>(payload: DropdownPopulatorPagePayload): Promise<DropdownPopulatorFetchPageResponse<T>>;\r\n    populateAttributes(items: GenericEditorOption[], idAttribute: string, orderedLabelAttributes: string[]): GenericEditorOption[];\r\n    search(items: GenericEditorOption[], searchTerm: string): Promise<GenericEditorOption[]> | Promise<GenericEditorOption[]>;\r\n    getItem(payload: DropdownPopulatorItemPayload): Promise<GenericEditorOption>;\r\n}\r\nexport interface DropdownPopulatorPayload extends DropdownPopulatorItemPayload {\r\n    /** The object containing the full option object that is now selected in a dropdown that we depend on (Optional, see dependsOn property in {@link SeDropdownComponent}). */\r\n    selection: GenericEditorOption;\r\n    /** The search key when the user types in the dropdown (optional). */\r\n    search: string;\r\n}\r\nexport interface DropdownPopulatorItemPayload {\r\n    /** The id of the item to fetch. */\r\n    id?: string;\r\n    /**\r\n     * The field descriptor from {@link GenericEditorFactoryService} containing information about the dropdown.\r\n     */\r\n    field: GenericEditorField;\r\n    /** The model used when building query params on attributes defined in `payload.field.dependsOn`. */\r\n    model: Payload;\r\n    /** Cms Items URI for fetching the data. */\r\n    uri?: string;\r\n}\r\nexport interface DropdownPopulatorPagePayload extends DropdownPopulatorPayload {\r\n    /**  Number of items in the page. */\r\n    pageSize: number;\r\n    currentPage: number;\r\n}\r\nexport interface DropdownPopulatorFetchPageResponse<T = any> extends Page<T> {\r\n    field: GenericEditorField;\r\n    [index: string]: any;\r\n}\r\n/**\r\n * Used to register Custom Populators that will be available for `GenericEditorDropdownServiceFactory`.\r\n *\r\n * A custom populator can be registered by providing the name of that populator without \"DropdownPopulator\" suffix\r\n * in the following properties of {@link GenericEditorField}.\r\n *\r\n * - propertType - e.g. `MyCustomDropdownPopulator` -> { propertyType: 'myCustom' }\r\n *\r\n * - cmsStrutureType - e.g. `MyCustomDropdownPopulator` -> { cmsStructureType: 'myCustom' }\r\n *\r\n * - smarteditComponentType - e.g. `MyCustomDropdownPopulator` -> { smarteditComponentType: 'myCustom' }\r\n *\r\n * - smarteditComponentType + qualifier - e.g. `MyCustomProductDropdownPopulator` { smarteditComponentType: 'myCustom', qualifier: 'product' }\r\n *\r\n * Note: The value of those properties is case insensitive.\r\n *\r\n * ### Example\r\n *\r\n *      \\@NgModule({\r\n *          imports: [],\r\n *          providers: [\r\n *              {\r\n *                  provide: CustomDropdownPopulatorsToken,\r\n *                  useClass: MyCustomDropdownPopulator,\r\n *                  multi: true\r\n *               }\r\n *          ]\r\n *      })\r\n *      export class ExtensionModule {};\r\n */\r\nexport declare const CustomDropdownPopulatorsToken: InjectionToken<DropdownPopulatorInterface[]>;\r\nexport declare const IDropdownPopulatorInterface: InjectionToken<() => DropdownPopulatorInterface>;\r\n"}}
