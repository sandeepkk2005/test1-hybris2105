/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */

package de.hybris.platform.outboundsync.job.impl.info;

import de.hybris.platform.integrationservices.model.TypeDescriptor;
import de.hybris.platform.outboundsync.job.InfoExpressionGenerator;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import org.apache.commons.lang3.StringUtils;

/**
 * Default implementation of the info expression generator for {@link de.hybris.platform.outboundsync.model.OutboundSyncStreamConfigurationModel}s.
 * The generated info expression provides information about the changed item integration key, type and the
 * root item type in the integration object associated with the stream configuration.
 */
public class DefaultInfoExpressionGenerator implements InfoExpressionGenerator
{
	private static final String DELIMITER = ", ";
	private static final String EMPTY_JSON = "{}";
	private final Map<String, ExpressionGenerator> expressionGenerators;

	public DefaultInfoExpressionGenerator()
	{
		expressionGenerators = new HashMap<>();
	}


	/**
	 * {@inheritDoc}
	 *
	 * @return a String that contains a SpEL expression to be evaluated into a JSON string containing changed item integration key,
	 * type, and root item type in the integration object. Here is example of a string, to which the generated expression may be
	 * evaluated at runtime:
	 * <pre><code>
	 *   {
	 *     "key": "clothing",
	 *     "type": "Category",
	 *     "rootType": "Catalog"
	 *   }
	 * </code></pre>
	 * If {@code itemType} is {@code null}, then the generated info expression is an empty JSON, i.e {@code "{}"}.
	 */
	@Override
	public String generateInfoExpression(final TypeDescriptor itemType)
	{
		if (itemType == null)
		{
			return EMPTY_JSON;
		}
		final String body = expressionGenerators.entrySet()
		                                        .stream()
		                                        .map(e -> generateElement(e.getValue(), e.getKey(), itemType))
		                                        .filter(Objects::nonNull)
		                                        .reduce("", (p, n) -> p + DELIMITER + n);
		final String cleanBody = body.isEmpty() ? body : body.substring(DELIMITER.length());
		return "{ " + cleanBody + " }";
	}

	private String generateElement(final ExpressionGenerator generator,
	                               final String element, final TypeDescriptor itemType)
	{
		final String value = generator.generateExpression(itemType);
		return StringUtils.isNotBlank(value)
				? (quote(element) + ": " + quote(value))
				: null;
	}

	private String quote(final String v)
	{
		return '"' + v + '"';
	}

	/**
	 * Injects expression generators to be included in the info expression generation.
	 *
	 * @param generators expression generators to use in the info expression generation process. Key of the map is name of the
	 *                   element in the info expression, and value is the generator to provide expression value for that element.<br/>
	 *                   For example, if generators are {@code Map.of("one", gen1, "two", gen2)}, then the info expression will be
	 *                   {@code {"one": "gen1_expr", "two": "gen2_expr"}}, where "gen1_expr" is the expression generated by the
	 *                   {@code gen1} and "gen2_expr" is the expression generated by the {@code gen2}.<br/>
	 *                   {@code null} generators are ignored.
	 */
	public void setExpressionGenerators(final Map<String, ExpressionGenerator> generators)
	{
		if (generators != null)
		{
			generators.entrySet().stream()
			          .filter(e -> StringUtils.isNotBlank(e.getKey()))
			          .filter(e -> e.getValue() != null)
			          .forEach(e -> expressionGenerators.put(e.getKey(), e.getValue()));
		}
	}
}
