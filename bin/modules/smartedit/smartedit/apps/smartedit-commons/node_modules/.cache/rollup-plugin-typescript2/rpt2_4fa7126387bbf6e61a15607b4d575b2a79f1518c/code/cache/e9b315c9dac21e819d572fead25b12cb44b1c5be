{"code":"/**\r\n * Represents a typical factory of {@link IStorageManager}(s).\r\n * There should typically only be 1 StorageManager in the system, which make this factory seem redundant, but it's used\r\n * to create wrapper around the single real StorageManager.\r\n *\r\n * The main use-case is for namespacing. A namespaced storagemanager will take care to prevent storageID clashes\r\n * between extensions or teams.\r\n */\r\nvar IStorageManagerFactory = /** @class */ (function () {\r\n    function IStorageManagerFactory() {\r\n    }\r\n    /**\r\n     * @param namespace A unique namespace for all your storage ids\r\n     */\r\n    IStorageManagerFactory.prototype.getStorageManager = function (namespace) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    return IStorageManagerFactory;\r\n}());\r\nexport { IStorageManagerFactory };\r\n//# sourceMappingURL=IStorageManagerFactory.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/storage/IStorageManager.ts"],"map":"{\"version\":3,\"file\":\"IStorageManagerFactory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/storage/IStorageManagerFactory.ts\"],\"names\":[],\"mappings\":\"AAKA;;;;;;;GAOG;AACH;IAAA;IAQA,CAAC;IAPG;;OAEG;IACH,kDAAiB,GAAjB,UAAkB,SAAiB;QAC/B,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,6BAAC;AAAD,CAAC,AARD,IAQC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/storage/IStorageManagerFactory.d.ts","writeByteOrderMark":false,"text":"import { IStorageManager } from './IStorageManager';\r\n/**\r\n * Represents a typical factory of {@link IStorageManager}(s).\r\n * There should typically only be 1 StorageManager in the system, which make this factory seem redundant, but it's used\r\n * to create wrapper around the single real StorageManager.\r\n *\r\n * The main use-case is for namespacing. A namespaced storagemanager will take care to prevent storageID clashes\r\n * between extensions or teams.\r\n */\r\nexport declare abstract class IStorageManagerFactory {\r\n    /**\r\n     * @param namespace A unique namespace for all your storage ids\r\n     */\r\n    getStorageManager(namespace: string): IStorageManager;\r\n}\r\n"}}
