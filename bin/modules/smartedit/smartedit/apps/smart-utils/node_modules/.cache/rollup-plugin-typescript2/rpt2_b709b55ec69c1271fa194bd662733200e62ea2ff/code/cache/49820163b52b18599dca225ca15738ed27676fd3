{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { ContentChildren, Directive, EventEmitter, HostListener, Input, Output, QueryList } from '@angular/core';\r\nimport { ListItemKeyboardControlDirective } from './list-item-keyboard-control.directive';\r\nexport var KeyboardKey;\r\n(function (KeyboardKey) {\r\n    KeyboardKey[\"ArrowDown\"] = \"ArrowDown\";\r\n    KeyboardKey[\"ArrowUp\"] = \"ArrowUp\";\r\n    KeyboardKey[\"Enter\"] = \"Enter\";\r\n    KeyboardKey[\"Esc\"] = \"Escape\";\r\n})(KeyboardKey || (KeyboardKey = {}));\r\n/**\r\n * Directive that manages the active option in a list of items based on keyboard interaction.\r\n * For disabled options, a predicate must be passed with `suListKeyboardControlDisabledPredicate`\r\n * which will prevent that option from navigating with arrow up / down key.\r\n *\r\n * Note: It will include only direct children having the `suListItemKeyboardControl` directive.\r\n *\r\n * @example\r\n * ```\r\n * items = [\r\n *   {\r\n *     id: 1,\r\n *     label: 'item 1'\r\n *   },\r\n *   {\r\n *     id: 2,\r\n *     label: 'item 2'\r\n *   },\r\n *   {\r\n *     id: 3,\r\n *     label: 'item 3'\r\n *   }\r\n * ]\r\n * <ul suListKeyboardControl>\r\n *   <li suListItemKeyboardControl *ngFor=\"let item of items\">\r\n *     {{ item.label }}\r\n *   </li>\r\n * </ul>\r\n * ```\r\n */\r\nvar ListKeyboardControlDirective = /** @class */ (function () {\r\n    function ListKeyboardControlDirective() {\r\n        /** Whether the keyboard interaction is enabled */\r\n        this.suListKeyboardControlEnabled = true;\r\n        this.suListKeyboardControlEnterKeydown = new EventEmitter();\r\n        this.suListKeyboardControlEscKeydown = new EventEmitter();\r\n        /** @internal */\r\n        this.didNgAfterContentInit = false;\r\n        /** @internal */\r\n        this.activeItem = null;\r\n        /** @internal */\r\n        this.activeItemIndex = null;\r\n    }\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.onKeyDown = function (event) {\r\n        if (!this.suListKeyboardControlEnabled || this.items.length === 0) {\r\n            return;\r\n        }\r\n        // For ArrowDown and ArrowUp prevent from scrolling the container.\r\n        // Focus event is called when setting an active item so it will also scroll if needed.\r\n        switch (event.key) {\r\n            case KeyboardKey.ArrowDown:\r\n                event.preventDefault();\r\n                this.handleArrowDown();\r\n                return;\r\n            case KeyboardKey.ArrowUp:\r\n                event.preventDefault();\r\n                this.handleArrowUp();\r\n                return;\r\n            case KeyboardKey.Enter:\r\n                event.preventDefault();\r\n                this.handleEnter();\r\n                return;\r\n            case KeyboardKey.Esc:\r\n                this.handleEsc();\r\n                return;\r\n        }\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.ngAfterContentInit = function () {\r\n        var _this = this;\r\n        this.items.changes.subscribe(function () { return _this.onItemsChange(); });\r\n        // Items may be cached by wrapper component e.g. <fd-popover> so items.changes subscription will not receive an event.\r\n        // Ensure that whenever a dropdown is opened, subscription will receive an event\r\n        this.items.notifyOnChanges();\r\n        this.didNgAfterContentInit = true;\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.ngOnChanges = function (changes) {\r\n        if (!this.didNgAfterContentInit) {\r\n            return;\r\n        }\r\n        var enabledChange = changes.suListKeyboardControlEnabled;\r\n        var predicateChange = changes.suListKeyboardControlDisabledPredicate;\r\n        var shouldSetActive = enabledChange && enabledChange.currentValue && !enabledChange.previousValue;\r\n        var shouldUnsetActive = enabledChange && !enabledChange.currentValue && enabledChange.previousValue;\r\n        var shouldSetActiveForPredicate = predicateChange && predicateChange.currentValue && !!this.suListKeyboardControlEnabled;\r\n        var shouldUnsetActiveForPredicate = predicateChange &&\r\n            !predicateChange.currentValue &&\r\n            predicateChange.previousValue &&\r\n            !!this.suListKeyboardControlEnabled;\r\n        if (this.items.length === 0) {\r\n            return;\r\n        }\r\n        if (shouldSetActive || shouldSetActiveForPredicate) {\r\n            this.setFirstItemActive();\r\n        }\r\n        if (shouldUnsetActive || shouldUnsetActiveForPredicate) {\r\n            this.unsetActiveItem();\r\n        }\r\n    };\r\n    /**\r\n     * Handler for dynamic content change.\r\n     * Sets or unsets active item.\r\n     * @internal\r\n     */\r\n    ListKeyboardControlDirective.prototype.onItemsChange = function () {\r\n        if (this.items.length === 0) {\r\n            this.clearActiveItem();\r\n            return;\r\n        }\r\n        if (this.suListKeyboardControlEnabled) {\r\n            if (!this.isActiveItemSet()) {\r\n                // if no active item then set the first one as active\r\n                this.setActiveItemByIndex(0, 1);\r\n            }\r\n            else if (!this.itemExistsByIndex(this.activeItemIndex)) {\r\n                // clear active item if the active item no longer exists\r\n                this.clearActiveItem();\r\n            }\r\n        }\r\n        else {\r\n            // keyboard control is not enabled\r\n            this.clearActiveItem();\r\n        }\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.handleArrowUp = function () {\r\n        this.setPreviousItemActive();\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.handleArrowDown = function () {\r\n        this.setNextItemActive();\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.handleEnter = function () {\r\n        this.suListKeyboardControlEnterKeydown.emit(this.activeItemIndex);\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.handleEsc = function () {\r\n        this.suListKeyboardControlEscKeydown.emit();\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.getItemByIndex = function (index) {\r\n        var items = this.getItemsArray();\r\n        return items[index];\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.getItemsArray = function () {\r\n        return this.items.toArray();\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.setActiveItemByIndex = function (index, delta) {\r\n        var items = this.getItemsArray();\r\n        if (this.suListKeyboardControlDisabledPredicate) {\r\n            while (this.suListKeyboardControlDisabledPredicate(items[index], index)) {\r\n                index += delta;\r\n                if (!items[index]) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        var item = this.getItemByIndex(index);\r\n        this.setActiveItem(item);\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.setActiveItem = function (item) {\r\n        var items = this.getItemsArray();\r\n        var index = items.indexOf(item);\r\n        if (this.activeItem) {\r\n            this.activeItem.setInactive();\r\n        }\r\n        if (items.length > 0) {\r\n            this.activeItem = items[index];\r\n            this.activeItem.setActive();\r\n            this.activeItemIndex = index;\r\n        }\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.unsetActiveItem = function () {\r\n        if (!this.activeItem) {\r\n            return;\r\n        }\r\n        this.activeItem.setInactive();\r\n        this.activeItemIndex = null;\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.setFirstItemActive = function () {\r\n        this.setActiveItemByIndex(0, 1);\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.setNextItemActive = function () {\r\n        if (this.activeItemIndex === null) {\r\n            this.setFirstItemActive();\r\n            return;\r\n        }\r\n        if (this.activeItemIndex < this.items.length - 1) {\r\n            this.setActiveItemByIndex(this.activeItemIndex + 1, 1);\r\n        }\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.setPreviousItemActive = function () {\r\n        if (this.activeItemIndex === null) {\r\n            this.setFirstItemActive();\r\n            return;\r\n        }\r\n        if (this.activeItemIndex > 0) {\r\n            this.setActiveItemByIndex(this.activeItemIndex - 1, -1);\r\n        }\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.itemExistsByIndex = function (index) {\r\n        if (index === null) {\r\n            return false;\r\n        }\r\n        return !!this.getItemByIndex(index);\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.clearActiveItem = function () {\r\n        this.activeItem = null;\r\n        this.activeItemIndex = null;\r\n    };\r\n    /** @internal */\r\n    ListKeyboardControlDirective.prototype.isActiveItemSet = function () {\r\n        return !!this.activeItem;\r\n    };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], ListKeyboardControlDirective.prototype, \"suListKeyboardControlEnabled\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function)\r\n    ], ListKeyboardControlDirective.prototype, \"suListKeyboardControlDisabledPredicate\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", Object)\r\n    ], ListKeyboardControlDirective.prototype, \"suListKeyboardControlEnterKeydown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", Object)\r\n    ], ListKeyboardControlDirective.prototype, \"suListKeyboardControlEscKeydown\", void 0);\r\n    __decorate([\r\n        ContentChildren(ListItemKeyboardControlDirective),\r\n        __metadata(\"design:type\", QueryList)\r\n    ], ListKeyboardControlDirective.prototype, \"items\", void 0);\r\n    __decorate([\r\n        HostListener('document:keydown', ['$event']),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [KeyboardEvent]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], ListKeyboardControlDirective.prototype, \"onKeyDown\", null);\r\n    ListKeyboardControlDirective = __decorate([\r\n        Directive({\r\n            selector: '[suListKeyboardControl]'\r\n        })\r\n    ], ListKeyboardControlDirective);\r\n    return ListKeyboardControlDirective;\r\n}());\r\nexport { ListKeyboardControlDirective };\r\n//# sourceMappingURL=list-keyboard-control.directive.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/directives/list-keyboard-control/list-item-keyboard-control.directive.ts"],"map":"{\"version\":3,\"file\":\"list-keyboard-control.directive.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/directives/list-keyboard-control/list-keyboard-control.directive.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/directives/list-keyboard-control/list-keyboard-control.directive.d.ts","writeByteOrderMark":false,"text":"import { AfterContentInit, EventEmitter, OnChanges, QueryList, SimpleChanges } from '@angular/core';\r\nimport { ListItemKeyboardControlDirective } from './list-item-keyboard-control.directive';\r\nexport declare enum KeyboardKey {\r\n    ArrowDown = \"ArrowDown\",\r\n    ArrowUp = \"ArrowUp\",\r\n    Enter = \"Enter\",\r\n    Esc = \"Escape\"\r\n}\r\nexport declare type ListKeyboardControlDisabledPredicate = (item: ListItemKeyboardControlDirective, index: number) => boolean;\r\n/**\r\n * Directive that manages the active option in a list of items based on keyboard interaction.\r\n * For disabled options, a predicate must be passed with `suListKeyboardControlDisabledPredicate`\r\n * which will prevent that option from navigating with arrow up / down key.\r\n *\r\n * Note: It will include only direct children having the `suListItemKeyboardControl` directive.\r\n *\r\n * @example\r\n * ```\r\n * items = [\r\n *   {\r\n *     id: 1,\r\n *     label: 'item 1'\r\n *   },\r\n *   {\r\n *     id: 2,\r\n *     label: 'item 2'\r\n *   },\r\n *   {\r\n *     id: 3,\r\n *     label: 'item 3'\r\n *   }\r\n * ]\r\n * <ul suListKeyboardControl>\r\n *   <li suListItemKeyboardControl *ngFor=\"let item of items\">\r\n *     {{ item.label }}\r\n *   </li>\r\n * </ul>\r\n * ```\r\n */\r\nexport declare class ListKeyboardControlDirective implements OnChanges, AfterContentInit {\r\n    /** Whether the keyboard interaction is enabled */\r\n    suListKeyboardControlEnabled: boolean;\r\n    /** Predicate called for each item. If true, the item will be excluded from keyboard navigation */\r\n    suListKeyboardControlDisabledPredicate?: ListKeyboardControlDisabledPredicate;\r\n    suListKeyboardControlEnterKeydown: EventEmitter<number>;\r\n    suListKeyboardControlEscKeydown: EventEmitter<void>;\r\n    /** @internal */\r\n    items: QueryList<ListItemKeyboardControlDirective>;\r\n    /** @internal */\r\n    private didNgAfterContentInit;\r\n    /** @internal */\r\n    private activeItem;\r\n    /** @internal */\r\n    private activeItemIndex;\r\n    /** @internal */\r\n    onKeyDown(event: KeyboardEvent): void;\r\n    /** @internal */\r\n    ngAfterContentInit(): void;\r\n    /** @internal */\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * Handler for dynamic content change.\r\n     * Sets or unsets active item.\r\n     * @internal\r\n     */\r\n    private onItemsChange;\r\n    /** @internal */\r\n    private handleArrowUp;\r\n    /** @internal */\r\n    private handleArrowDown;\r\n    /** @internal */\r\n    private handleEnter;\r\n    /** @internal */\r\n    private handleEsc;\r\n    /** @internal */\r\n    private getItemByIndex;\r\n    /** @internal */\r\n    private getItemsArray;\r\n    /** @internal */\r\n    private setActiveItemByIndex;\r\n    /** @internal */\r\n    private setActiveItem;\r\n    /** @internal */\r\n    private unsetActiveItem;\r\n    /** @internal */\r\n    private setFirstItemActive;\r\n    /** @internal */\r\n    private setNextItemActive;\r\n    /** @internal */\r\n    private setPreviousItemActive;\r\n    /** @internal */\r\n    private itemExistsByIndex;\r\n    /** @internal */\r\n    private clearActiveItem;\r\n    /** @internal */\r\n    private isActiveItemSet;\r\n}\r\n"}}
