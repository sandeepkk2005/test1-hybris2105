{"code":"import { __awaiter, __decorate, __extends, __generator, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport { CONTENT_SLOTS_TYPE_RESTRICTION_RESOURCE_URI, IPageContentSlotsComponentsRestService, ISlotRestrictionsService, TypePermissionsRestService, COMPONENT_IN_SLOT_STATUS } from 'cmscommons';\r\nimport { flatten, uniq, chunk, includes } from 'lodash';\r\nimport { ComponentHandlerService } from 'smartedit';\r\nimport { GatewayProxied, IPageInfoService, LogService, SeDowngradeService, YJQUERY_TOKEN, stringUtils, CONTENT_SLOT_TYPE, IRestServiceFactory, CrossFrameEventService, EVENTS } from 'smarteditcommons';\r\nimport { SlotSharedService } from './SlotSharedService';\r\nvar /* @ngInject */ SlotRestrictionsService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ SlotRestrictionsService, _super);\r\n    function /* @ngInject */ SlotRestrictionsService(componentHandlerService, logService, pageContentSlotsComponentsRestService, pageInfoService, restServiceFactory, slotSharedService, typePermissionsRestService, yjQuery, crossFrameEventService) {\r\n        var _this = _super.call(this) || this;\r\n        _this.componentHandlerService = componentHandlerService;\r\n        _this.logService = logService;\r\n        _this.pageContentSlotsComponentsRestService = pageContentSlotsComponentsRestService;\r\n        _this.pageInfoService = pageInfoService;\r\n        _this.restServiceFactory = restServiceFactory;\r\n        _this.slotSharedService = slotSharedService;\r\n        _this.typePermissionsRestService = typePermissionsRestService;\r\n        _this.yjQuery = yjQuery;\r\n        _this.currentPageId = null;\r\n        _this.slotRestrictions = {};\r\n        _this.CONTENT_SLOTS_TYPE_RESTRICTION_FETCH_LIMIT = 100;\r\n        crossFrameEventService.subscribe(EVENTS.PAGE_CHANGE, function () {\r\n            _this.emptyCache();\r\n            _this.cacheSlotsRestrictions();\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * @deprecated since 2005\r\n     */\r\n    /* @ngInject */ SlotRestrictionsService.prototype.getAllComponentTypesSupportedOnPage = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var slots, slotIds, slotRestrictionPromises, arrayOfSlotRestrictions, error_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        slots = this.yjQuery(this.componentHandlerService.getAllSlotsSelector());\r\n                        slotIds = slots\r\n                            .get()\r\n                            .map(function (slot) { return _this.componentHandlerService.getId(slot); });\r\n                        slotRestrictionPromises = slotIds.map(function (slotId) { return _this.getSlotRestrictions(slotId); });\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, Promise.all(slotRestrictionPromises)];\r\n                    case 2:\r\n                        arrayOfSlotRestrictions = _a.sent();\r\n                        return [2 /*return*/, flatten(arrayOfSlotRestrictions)];\r\n                    case 3:\r\n                        error_1 = _a.sent();\r\n                        this.logService.info(error_1);\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService.prototype.getSlotRestrictions = function (slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageId, restrictionId;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getPageUID(this.currentPageId)];\r\n                    case 1:\r\n                        pageId = _a.sent();\r\n                        this.currentPageId = pageId;\r\n                        restrictionId = this.getEntryId(this.currentPageId, slotId);\r\n                        if (this.slotRestrictions[restrictionId]) {\r\n                            return [2 /*return*/, this.slotRestrictions[restrictionId]];\r\n                        }\r\n                        else if (this.isExternalSlot(slotId)) {\r\n                            this.slotRestrictions[restrictionId] = [];\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This methods determines whether a component of the provided type is allowed in the slot.\r\n     *\r\n     * @param slot The slot for which to verify if it allows a component of the provided type.\r\n     * @returns Promise containing COMPONENT_IN_SLOT_STATUS (ALLOWED, DISALLOWED, MAYBEALLOWED) string that determines whether a component of the provided type is allowed in the slot.\r\n     *\r\n     * TODO: The name is misleading. To not introduce breaking change in 2105, consider changing the name in the next release (after 2105).\r\n     * Candidates: \"getComponentStatusInSlot\", \"determineComponentStatusInSlot\"\r\n     */\r\n    /* @ngInject */ SlotRestrictionsService.prototype.isComponentAllowedInSlot = function (slot, dragInfo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentSlotRestrictions, componentsForSlot, isComponentIdAllowed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getSlotRestrictions(slot.id)];\r\n                    case 1:\r\n                        currentSlotRestrictions = _a.sent();\r\n                        return [4 /*yield*/, this.pageContentSlotsComponentsRestService.getComponentsForSlot(slot.id)];\r\n                    case 2:\r\n                        componentsForSlot = _a.sent();\r\n                        isComponentIdAllowed = slot.id === dragInfo.slotId ||\r\n                            !componentsForSlot.some(function (component) { return component.uid === dragInfo.componentId; });\r\n                        if (isComponentIdAllowed) {\r\n                            if (currentSlotRestrictions) {\r\n                                return [2 /*return*/, includes(currentSlotRestrictions, dragInfo.componentType)\r\n                                        ? COMPONENT_IN_SLOT_STATUS.ALLOWED\r\n                                        : COMPONENT_IN_SLOT_STATUS.DISALLOWED];\r\n                            }\r\n                            return [2 /*return*/, COMPONENT_IN_SLOT_STATUS.MAYBEALLOWED];\r\n                        }\r\n                        return [2 /*return*/, COMPONENT_IN_SLOT_STATUS.DISALLOWED];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService.prototype.isSlotEditable = function (slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var slotPermissions, isShared, result, isExternalSlot;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.typePermissionsRestService.hasUpdatePermissionForTypes([\r\n                            CONTENT_SLOT_TYPE\r\n                        ])];\r\n                    case 1:\r\n                        slotPermissions = _a.sent();\r\n                        return [4 /*yield*/, this.slotSharedService.isSlotShared(slotId)];\r\n                    case 2:\r\n                        isShared = _a.sent();\r\n                        result = slotPermissions[CONTENT_SLOT_TYPE];\r\n                        if (isShared) {\r\n                            isExternalSlot = this.isExternalSlot(slotId);\r\n                            result = result && !isExternalSlot && !this.slotSharedService.areSharedSlotsDisabled();\r\n                        }\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService.prototype.emptyCache = function () {\r\n        this.slotRestrictions = {};\r\n        this.currentPageId = null;\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService.prototype.cacheSlotsRestrictions = function () {\r\n        var _this = this;\r\n        var originalSlotIds = this.componentHandlerService.getAllSlotUids() || [];\r\n        var nonExternalOriginalSlotIds = originalSlotIds.filter(function (slotId) { return !_this.isExternalSlot(slotId); });\r\n        var uniqueSlotIds = uniq(nonExternalOriginalSlotIds);\r\n        var chunks = chunk(uniqueSlotIds, this.CONTENT_SLOTS_TYPE_RESTRICTION_FETCH_LIMIT);\r\n        return this.recursiveFetchSlotsRestrictions(chunks, 0);\r\n    };\r\n    // Recursively fetch slots restrictions by the number of chunks of slotIds split by fetch limit\r\n    /* @ngInject */ SlotRestrictionsService.prototype.recursiveFetchSlotsRestrictions = function (slotIdsByChunks, chunkIndex) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (chunkIndex === slotIdsByChunks.length) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, this.fetchSlotsRestrictions(slotIdsByChunks[chunkIndex])];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.recursiveFetchSlotsRestrictions(slotIdsByChunks, chunkIndex + 1);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Fetch slot restriction and cache them in-memory\r\n    /* @ngInject */ SlotRestrictionsService.prototype.fetchSlotsRestrictions = function (slotIds) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageId, contentSlotsResponse, contentSlots, error_2;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getPageUID(this.currentPageId)];\r\n                    case 1:\r\n                        pageId = _a.sent();\r\n                        this.currentPageId = pageId;\r\n                        this.slotsRestrictionsRestService =\r\n                            this.slotsRestrictionsRestService ||\r\n                                this.restServiceFactory.get(CONTENT_SLOTS_TYPE_RESTRICTION_RESOURCE_URI, this.currentPageId);\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 4, , 5]);\r\n                        return [4 /*yield*/, this.slotsRestrictionsRestService.save({\r\n                                slotIds: slotIds,\r\n                                pageUid: this.currentPageId\r\n                            })];\r\n                    case 3:\r\n                        contentSlotsResponse = _a.sent();\r\n                        contentSlots = contentSlotsResponse || [];\r\n                        contentSlots.forEach(function (slot) {\r\n                            var restrictionId = _this.getEntryId(_this.currentPageId, slot.contentSlotUid);\r\n                            _this.slotRestrictions[restrictionId] = slot.validComponentTypes;\r\n                        });\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        error_2 = _a.sent();\r\n                        this.logService.info(error_2);\r\n                        throw new Error(error_2);\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService.prototype.getPageUID = function (pageUID) {\r\n        return !stringUtils.isBlank(pageUID)\r\n            ? Promise.resolve(pageUID)\r\n            : this.pageInfoService.getPageUID();\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService.prototype.getEntryId = function (pageId, slotId) {\r\n        return pageId + \"_\" + slotId;\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService.prototype.isExternalSlot = function (slotId) {\r\n        return this.componentHandlerService.isExternalComponent(slotId, CONTENT_SLOT_TYPE);\r\n    };\r\n    /* @ngInject */ SlotRestrictionsService = __decorate([\r\n        SeDowngradeService(ISlotRestrictionsService),\r\n        GatewayProxied('getAllComponentTypesSupportedOnPage', 'getSlotRestrictions'),\r\n        __param(7, Inject(YJQUERY_TOKEN)),\r\n        __metadata(\"design:paramtypes\", [ComponentHandlerService,\r\n            LogService,\r\n            IPageContentSlotsComponentsRestService,\r\n            IPageInfoService,\r\n            IRestServiceFactory,\r\n            SlotSharedService,\r\n            TypePermissionsRestService, Function, CrossFrameEventService])\r\n    ], /* @ngInject */ SlotRestrictionsService);\r\n    return /* @ngInject */ SlotRestrictionsService;\r\n}(ISlotRestrictionsService));\r\nexport { /* @ngInject */ SlotRestrictionsService };\r\n//# sourceMappingURL=SlotRestrictionsServiceInner.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/dragAndDrop/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/SlotSharedService.ts"],"map":"{\"version\":3,\"file\":\"SlotRestrictionsServiceInner.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotRestrictionsServiceInner.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/SlotRestrictionsServiceInner.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\n/// <reference types=\"jquery\" />\r\nimport { IPageContentSlotsComponentsRestService, ISlotRestrictionsService, TypePermissionsRestService, COMPONENT_IN_SLOT_STATUS } from 'cmscommons';\r\nimport { ComponentHandlerService } from 'smartedit';\r\nimport { IPageInfoService, LogService, IRestServiceFactory, CrossFrameEventService } from 'smarteditcommons';\r\nimport { CmsDragAndDropCachedSlot, CmsDragAndDropDragInfo } from './dragAndDrop';\r\nimport { SlotSharedService } from './SlotSharedService';\r\nexport interface ContentSlot {\r\n    /**\r\n     * The uid of content slot.\r\n     *\r\n     * E.g. 'NavigationBarSlot'\r\n     */\r\n    contentSlotUid: string;\r\n    /**\r\n     * Components types that can be placed within the slot.\r\n     *\r\n     * E.g.\r\n     * ['NavigationBarComponent', 'SimpleBannerComponent', 'BannerComponent', 'CMSParagraphComponent']\r\n     */\r\n    validComponentTypes: string[];\r\n}\r\nexport declare class SlotRestrictionsService extends ISlotRestrictionsService {\r\n    private componentHandlerService;\r\n    private logService;\r\n    private pageContentSlotsComponentsRestService;\r\n    private pageInfoService;\r\n    private restServiceFactory;\r\n    private slotSharedService;\r\n    private typePermissionsRestService;\r\n    private yjQuery;\r\n    private currentPageId;\r\n    private slotRestrictions;\r\n    private slotsRestrictionsRestService;\r\n    private readonly CONTENT_SLOTS_TYPE_RESTRICTION_FETCH_LIMIT;\r\n    constructor(componentHandlerService: ComponentHandlerService, logService: LogService, pageContentSlotsComponentsRestService: IPageContentSlotsComponentsRestService, pageInfoService: IPageInfoService, restServiceFactory: IRestServiceFactory, slotSharedService: SlotSharedService, typePermissionsRestService: TypePermissionsRestService, yjQuery: JQueryStatic, crossFrameEventService: CrossFrameEventService);\r\n    /**\r\n     * @deprecated since 2005\r\n     */\r\n    getAllComponentTypesSupportedOnPage(): Promise<string[] | void>;\r\n    getSlotRestrictions(slotId: string): Promise<string[] | void>;\r\n    /**\r\n     * This methods determines whether a component of the provided type is allowed in the slot.\r\n     *\r\n     * @param slot The slot for which to verify if it allows a component of the provided type.\r\n     * @returns Promise containing COMPONENT_IN_SLOT_STATUS (ALLOWED, DISALLOWED, MAYBEALLOWED) string that determines whether a component of the provided type is allowed in the slot.\r\n     *\r\n     * TODO: The name is misleading. To not introduce breaking change in 2105, consider changing the name in the next release (after 2105).\r\n     * Candidates: \"getComponentStatusInSlot\", \"determineComponentStatusInSlot\"\r\n     */\r\n    isComponentAllowedInSlot(slot: CmsDragAndDropCachedSlot, dragInfo: CmsDragAndDropDragInfo): Promise<COMPONENT_IN_SLOT_STATUS>;\r\n    isSlotEditable(slotId: string): Promise<boolean>;\r\n    private emptyCache;\r\n    private cacheSlotsRestrictions;\r\n    private recursiveFetchSlotsRestrictions;\r\n    private fetchSlotsRestrictions;\r\n    private getPageUID;\r\n    private getEntryId;\r\n    private isExternalSlot;\r\n}\r\n"}}
