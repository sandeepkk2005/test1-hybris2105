{"code":"import { __assign } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nexport var WIZARD_MANAGER = new InjectionToken('WIZARD_MANAGER');\r\nexport var WIZARD_API = new InjectionToken('WIZARD_API');\r\n/**\r\n * The Wizard Manager is a wizard management service that can be injected into your wizard controller.\r\n */\r\nvar WizardService = /** @class */ (function () {\r\n    function WizardService(defaultWizardActionStrategy, stringUtils) {\r\n        this.defaultWizardActionStrategy = defaultWizardActionStrategy;\r\n        this.stringUtils = stringUtils;\r\n        // the overridable callbacks\r\n        this.onLoadStep = function (index, nextStep) {\r\n            return;\r\n        };\r\n        this.onClose = function (result) {\r\n            return;\r\n        };\r\n        this.onCancel = function () {\r\n            return;\r\n        };\r\n        this.onStepsUpdated = function (steps) {\r\n            return;\r\n        };\r\n    }\r\n    /* @internal */\r\n    WizardService.prototype.initialize = function (conf) {\r\n        this.validateConfig(conf);\r\n        this._actionStrategy = conf.actionStrategy || this.defaultWizardActionStrategy;\r\n        this._actionStrategy.applyStrategy(this, conf);\r\n        this._currentIndex = 0;\r\n        this._conf = __assign({}, conf);\r\n        this._steps = this._conf.steps;\r\n        this._getResult = conf.resultFn;\r\n        this.validateStepUids(this._steps);\r\n        this.goToStepWithIndex(0);\r\n    };\r\n    /* @internal */\r\n    WizardService.prototype.executeAction = function (action) {\r\n        var _this = this;\r\n        if (action.executeIfCondition) {\r\n            var result = action.executeIfCondition();\r\n            return (result instanceof Promise ? result : Promise.resolve(result)).then(function () {\r\n                return action.execute(_this);\r\n            });\r\n        }\r\n        return Promise.resolve(action.execute(this));\r\n    };\r\n    /**\r\n     * Navigates the wizard to the given step.\r\n     * @param index The 0-based index from the steps array returned by the wizard controllers getWizardConfig() function\r\n     */\r\n    WizardService.prototype.goToStepWithIndex = function (index) {\r\n        var nextStep = this.getStepWithIndex(index);\r\n        if (nextStep) {\r\n            this.onLoadStep(index, nextStep);\r\n            this._currentIndex = index;\r\n        }\r\n    };\r\n    /**\r\n     * Navigates the wizard to the given step.\r\n     * @param id The ID of a step returned by the wizard controllers getWizardConfig() function. Note that if\r\n     * no id was provided for a given step, then one is automatically generated.\r\n     */\r\n    WizardService.prototype.goToStepWithId = function (id) {\r\n        this.goToStepWithIndex(this.getStepIndexFromId(id));\r\n    };\r\n    /**\r\n     * Adds an additional step to the wizard at runtime\r\n     * @param index (OPTIONAL) A 0-based index position in the steps array. Default is 0.\r\n     */\r\n    WizardService.prototype.addStep = function (newStep, index) {\r\n        if (parseInt(newStep.id, 10) !== 0 && !newStep.id) {\r\n            newStep.id = this.stringUtils.generateIdentifier();\r\n        }\r\n        if (!index) {\r\n            index = 0;\r\n        }\r\n        if (this._currentIndex >= index) {\r\n            this._currentIndex++;\r\n        }\r\n        this._steps.splice(index, 0, newStep);\r\n        this.validateStepUids(this._steps);\r\n        this._actionStrategy.applyStrategy(this, this._conf);\r\n        this.onStepsUpdated(this._steps);\r\n    };\r\n    /**\r\n     * Remove a step form the wizard at runtime. If you are removing the currently displayed step, the\r\n     * wizard will return to the first step. Removing all the steps will result in an error.\r\n     */\r\n    WizardService.prototype.removeStepById = function (id) {\r\n        this.removeStepByIndex(this.getStepIndexFromId(id));\r\n    };\r\n    /**\r\n     * Remove a step form the wizard at runtime. If you are removing the currently displayed step, the\r\n     * wizard will return to the first step. Removing all the steps will result in an error.\r\n     * @param index The 0-based index of the step you wish to remove.\r\n     */\r\n    WizardService.prototype.removeStepByIndex = function (index) {\r\n        if (index >= 0 && index < this.getStepsCount()) {\r\n            this._steps.splice(index, 1);\r\n            if (index === this._currentIndex) {\r\n                this.goToStepWithIndex(0);\r\n            }\r\n            this._actionStrategy.applyStrategy(this, this._conf);\r\n            this.onStepsUpdated(this._steps);\r\n        }\r\n    };\r\n    /**\r\n     * Close the wizard. This will return a resolved promise to the creator of the wizard, and if any\r\n     * resultFn was provided in the {@link ModalWizardConfig} the returned\r\n     * value of this function will be passed as the result.\r\n     */\r\n    WizardService.prototype.close = function () {\r\n        var result;\r\n        if (typeof this._getResult === 'function') {\r\n            result = this._getResult();\r\n        }\r\n        this.onClose(result);\r\n    };\r\n    /**\r\n     * Cancel the wizard. This will return a rejected promise to the creator of the wizard.\r\n     */\r\n    WizardService.prototype.cancel = function () {\r\n        this.onCancel();\r\n    };\r\n    WizardService.prototype.getSteps = function () {\r\n        return this._steps;\r\n    };\r\n    WizardService.prototype.getStepIndexFromId = function (id) {\r\n        var index = this._steps.findIndex(function (step) { return step.id === id; });\r\n        return index;\r\n    };\r\n    /**\r\n     * @returns True if the ID exists in one of the steps\r\n     */\r\n    WizardService.prototype.containsStep = function (stepId) {\r\n        return this.getStepIndexFromId(stepId) >= 0;\r\n    };\r\n    WizardService.prototype.getCurrentStepId = function () {\r\n        return this.getCurrentStep().id;\r\n    };\r\n    WizardService.prototype.getCurrentStepIndex = function () {\r\n        return this._currentIndex;\r\n    };\r\n    WizardService.prototype.getCurrentStep = function () {\r\n        return this.getStepWithIndex(this._currentIndex);\r\n    };\r\n    /**\r\n     * @returns The number of steps in the wizard. This should always be equal to the size of the array.\r\n     * returned by [getSteps]{@link WizardManager#getSteps}.\r\n     */\r\n    WizardService.prototype.getStepsCount = function () {\r\n        return this._steps.length;\r\n    };\r\n    WizardService.prototype.getStepWithId = function (id) {\r\n        var index = this.getStepIndexFromId(id);\r\n        if (index >= 0) {\r\n            return this.getStepWithIndex(index);\r\n        }\r\n        return null;\r\n    };\r\n    WizardService.prototype.getStepWithIndex = function (index) {\r\n        if (index >= 0 && index < this.getStepsCount()) {\r\n            return this._steps[index];\r\n        }\r\n        throw new Error('wizardService.getStepForIndex - Index out of bounds: ' + index);\r\n    };\r\n    WizardService.prototype.validateConfig = function (config) {\r\n        if (!config.steps || config.steps.length <= 0) {\r\n            throw new Error('Invalid WizardService configuration - no steps provided');\r\n        }\r\n        config.steps.forEach(function (step) {\r\n            if (!step.templateUrl && !step.component) {\r\n                throw new Error(\"Invalid WizardService configuration - Step missing a templateUrl or component: \" + step);\r\n            }\r\n        });\r\n    };\r\n    WizardService.prototype.validateStepUids = function (steps) {\r\n        var _this = this;\r\n        var stepIds = {};\r\n        steps.forEach(function (step) {\r\n            if (!step.id) {\r\n                step.id = _this.stringUtils.generateIdentifier();\r\n            }\r\n            else if (stepIds[step.id]) {\r\n                throw new Error(\"Invalid (Duplicate) step id: \" + step.id);\r\n            }\r\n            else {\r\n                stepIds[step.id] = step.id;\r\n            }\r\n        });\r\n    };\r\n    return WizardService;\r\n}());\r\nexport { WizardService };\r\n//# sourceMappingURL=WizardService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/wizard/services/DefaultWizardActionStrategy.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/wizard/services/WizardActions.ts"],"map":"{\"version\":3,\"file\":\"WizardService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/wizard/services/WizardService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/wizard/services/WizardService.d.ts","writeByteOrderMark":false,"text":"import { InjectionToken, Type } from '@angular/core';\r\nimport { TypedMap } from '@smart/utils';\r\nimport { StringUtils } from '../../../utils';\r\nimport { IWizardActionStrategy } from './DefaultWizardActionStrategy';\r\nimport { WizardAction } from './WizardActions';\r\n/**\r\n * A plain JSON object, representing the configuration options for a single step in a wizard.\r\n */\r\nexport interface WizardStep {\r\n    /**\r\n     * An optional unique ID for this step in the wizard. If no ID is provided, one is automatically generated.<br />\r\n     * You may choose to provide an ID, making it easier to reference this step explicitly via the wizard service, or\r\n     * be able to identify for which step a callback is being triggered.\r\n     */\r\n    id: string;\r\n    /**\r\n     * **Deprecated since 2005, use [component]{@link WizardStep#component}.**\r\n     *\r\n     * The url of the html template for this step.\r\n     * @deprecated\r\n     */\r\n    templateUrl?: string;\r\n    component?: Type<any>;\r\n    /**\r\n     * An i18n key representing a meaning (short) name for this step.\r\n     * This name will be displayed in the wizard navigation menu.\r\n     */\r\n    name: string;\r\n    /**\r\n     * An i18n key, representing the title that will be displayed at the top of the wizard for this step.\r\n     */\r\n    title: string;\r\n    actions?: WizardAction[];\r\n}\r\n/**\r\n * A plain JSON object, representing the configuration options for a modal wizard\r\n */\r\nexport interface WizardConfig {\r\n    /**\r\n     * An ordered array of Wizard Steps.\r\n     */\r\n    steps: WizardStep[];\r\n    actionStrategy?: IWizardActionStrategy;\r\n    /**\r\n     * An optional callback function that has no parameters. This callback is triggered after the done\r\n     * action is fired, and the wizard is about to be closed. If this function is defined and returns a value, this\r\n     * value will be returned in the resolved promise returned by the [open]{@link ModalWizard#open}.\r\n     * This is an easy way to pass a result from the wizard to the caller.\r\n     */\r\n    resultFn?: () => void;\r\n    /**\r\n     * An optional callback function that receives a single parameter, the current step ID. This callback\r\n     * is used to enable/disable the next action and the done action.\r\n     * The callback should return a boolean to enabled the action. Null, or if this callback is not defined defaults to\r\n     * true (enabled)\r\n     */\r\n    isFormValid?: (stepId: string) => boolean;\r\n    /**\r\n     * An optional callback function that receives a single parameter, the current step ID.\r\n     * This callback is triggered after the next action is fired. You have the opportunity to halt the Next action by\r\n     * returning promise and rejecting it, otherwise the wizard will continue and load the next step.\r\n     */\r\n    onNext?: (stepId: string) => boolean | Promise<any>;\r\n    /**\r\n     * An optional callback function that receives a single parameter, the current step ID.\r\n     * This callback is triggered after the cancel action is fired. You have the opportunity to halt the cancel action\r\n     * (thereby stopping the wizard from being closed), by returning a promise and rejecting it, otherwise the wizard will\r\n     * continue the cancel action.\r\n     */\r\n    onCancel?: (stepId: string) => boolean | Promise<any>;\r\n    /**\r\n     * An optional callback function that has no parameters. This callback is triggered after the done\r\n     * action is fired. You have the opportunity to halt the done action (thereby stopping the wizard from being closed),\r\n     * by returning a promise and rejecting it, otherwise the wizard will continue and close the wizard.\r\n     */\r\n    onDone?: (stepId: string) => boolean | Promise<any>;\r\n    /**\r\n     * An optional i18n key to override the default label for the Done button\r\n     */\r\n    doneLabel?: string;\r\n    /**\r\n     * An optional i18n key to override the default label for the Next button\r\n     */\r\n    nextLabel?: string;\r\n    /**\r\n     * An optional i18n key to override the default label for the Back button\r\n     */\r\n    backLabel?: string;\r\n    /**\r\n     * An optional i18n key to override the default label for the Cancel button\r\n     */\r\n    cancelLabel?: string;\r\n    templateOverride?: string;\r\n    cancelAction?: WizardAction;\r\n}\r\nexport declare const WIZARD_MANAGER: InjectionToken<WizardService>;\r\nexport declare const WIZARD_API: InjectionToken<unknown>;\r\n/**\r\n * The Wizard Manager is a wizard management service that can be injected into your wizard controller.\r\n */\r\nexport declare class WizardService {\r\n    private defaultWizardActionStrategy;\r\n    private stringUtils;\r\n    onLoadStep: (index: number, nextStep: WizardStep) => void;\r\n    onClose: (result: any) => void;\r\n    onCancel: () => void;\r\n    onStepsUpdated: (steps: WizardStep[]) => void;\r\n    properties: TypedMap<any>;\r\n    private _actionStrategy;\r\n    private _currentIndex;\r\n    private _conf;\r\n    private _steps;\r\n    private _getResult;\r\n    constructor(defaultWizardActionStrategy: IWizardActionStrategy, stringUtils: StringUtils);\r\n    initialize(conf: WizardConfig): void;\r\n    executeAction(action: WizardAction): Promise<void>;\r\n    /**\r\n     * Navigates the wizard to the given step.\r\n     * @param index The 0-based index from the steps array returned by the wizard controllers getWizardConfig() function\r\n     */\r\n    goToStepWithIndex(index: number): void;\r\n    /**\r\n     * Navigates the wizard to the given step.\r\n     * @param id The ID of a step returned by the wizard controllers getWizardConfig() function. Note that if\r\n     * no id was provided for a given step, then one is automatically generated.\r\n     */\r\n    goToStepWithId(id: string): void;\r\n    /**\r\n     * Adds an additional step to the wizard at runtime\r\n     * @param index (OPTIONAL) A 0-based index position in the steps array. Default is 0.\r\n     */\r\n    addStep(newStep: WizardStep, index: number): void;\r\n    /**\r\n     * Remove a step form the wizard at runtime. If you are removing the currently displayed step, the\r\n     * wizard will return to the first step. Removing all the steps will result in an error.\r\n     */\r\n    removeStepById(id: string): void;\r\n    /**\r\n     * Remove a step form the wizard at runtime. If you are removing the currently displayed step, the\r\n     * wizard will return to the first step. Removing all the steps will result in an error.\r\n     * @param index The 0-based index of the step you wish to remove.\r\n     */\r\n    removeStepByIndex(index: number): void;\r\n    /**\r\n     * Close the wizard. This will return a resolved promise to the creator of the wizard, and if any\r\n     * resultFn was provided in the {@link ModalWizardConfig} the returned\r\n     * value of this function will be passed as the result.\r\n     */\r\n    close(): void;\r\n    /**\r\n     * Cancel the wizard. This will return a rejected promise to the creator of the wizard.\r\n     */\r\n    cancel(): void;\r\n    getSteps(): WizardStep[];\r\n    getStepIndexFromId(id: string): number;\r\n    /**\r\n     * @returns True if the ID exists in one of the steps\r\n     */\r\n    containsStep(stepId: string): boolean;\r\n    getCurrentStepId(): string;\r\n    getCurrentStepIndex(): number;\r\n    getCurrentStep(): WizardStep;\r\n    /**\r\n     * @returns The number of steps in the wizard. This should always be equal to the size of the array.\r\n     * returned by [getSteps]{@link WizardManager#getSteps}.\r\n     */\r\n    getStepsCount(): number;\r\n    getStepWithId(id: string): WizardStep;\r\n    getStepWithIndex(index: number): WizardStep;\r\n    private validateConfig;\r\n    private validateStepUids;\r\n}\r\n"}}
