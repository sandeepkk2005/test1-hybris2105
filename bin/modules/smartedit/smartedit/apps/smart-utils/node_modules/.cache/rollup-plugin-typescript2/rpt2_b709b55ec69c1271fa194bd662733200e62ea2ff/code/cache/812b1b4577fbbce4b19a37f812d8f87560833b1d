{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { LogService } from '../../../services/log.service';\r\nimport { HttpUtils } from '../../../utils';\r\n/*\r\n * interceptor that will inject flaw into outbound and inbound http calls.\r\n * It is mainly used to validate reliability and consitency of test frameworks\r\n */\r\n/** @internal */\r\nvar FlawInjectionInterceptor = /** @class */ (function () {\r\n    function FlawInjectionInterceptor(httpUtils, logService) {\r\n        this.httpUtils = httpUtils;\r\n        this.logService = logService;\r\n        this.flawWindow = window;\r\n        this.flawWindow.allRequests = 0;\r\n        this.flawWindow.flawedRequests = 0;\r\n        this.flawWindow.allResponses = 0;\r\n        this.flawWindow.flawedResponses = 0;\r\n    }\r\n    FlawInjectionInterceptor_1 = FlawInjectionInterceptor;\r\n    FlawInjectionInterceptor.registerRequestFlaw = function (mutation) {\r\n        this.requestMutations.push(mutation);\r\n    };\r\n    FlawInjectionInterceptor.registerResponseFlaw = function (mutation) {\r\n        this.responseMutations.push(mutation);\r\n    };\r\n    FlawInjectionInterceptor.prototype.intercept = function (request, next) {\r\n        var _this = this;\r\n        var result;\r\n        if (FlawInjectionInterceptor_1.PROBABILITY !== 0 &&\r\n            this.httpUtils.isCRUDRequest(request) &&\r\n            !this._isGET(request)) {\r\n            this.flawWindow.allRequests++;\r\n            if (this._activateWithProbability(FlawInjectionInterceptor_1.PROBABILITY)) {\r\n                this.flawWindow.flawedRequests++;\r\n                var requestMutation = FlawInjectionInterceptor_1.requestMutations.find(function (mutation) {\r\n                    return mutation.test(request);\r\n                });\r\n                if (requestMutation) {\r\n                    this.logService.error(\"FLAWED REQUEST-\\\"\" + request.url);\r\n                    result = next.handle(requestMutation.mutate(request));\r\n                }\r\n            }\r\n            result = next.handle(request);\r\n            return result.pipe(map(function (event) {\r\n                if (event instanceof HttpResponse &&\r\n                    _this._activateWithProbability(FlawInjectionInterceptor_1.PROBABILITY)) {\r\n                    _this.flawWindow.flawedResponses++;\r\n                    var responseMutation = FlawInjectionInterceptor_1.responseMutations.find(function (mutation) { return mutation.test(request); });\r\n                    if (responseMutation && event instanceof HttpResponse) {\r\n                        _this.logService.error(\"FLAWED RESPONSE-\\\"\" + request.url);\r\n                        return responseMutation.mutate(event);\r\n                    }\r\n                }\r\n                return event;\r\n            }));\r\n        }\r\n        else {\r\n            return next.handle(request);\r\n        }\r\n    };\r\n    FlawInjectionInterceptor.prototype._isGET = function (config) {\r\n        return config.method === 'GET';\r\n    };\r\n    FlawInjectionInterceptor.prototype._activateWithProbability = function (probabilityTrue) {\r\n        return Math.random() >= 1.0 - probabilityTrue;\r\n    };\r\n    var FlawInjectionInterceptor_1;\r\n    FlawInjectionInterceptor.requestMutations = [];\r\n    FlawInjectionInterceptor.responseMutations = [];\r\n    /*\r\n     * probability of flaw occurrence ranging from 0 to 1\r\n     */\r\n    FlawInjectionInterceptor.PROBABILITY = 0;\r\n    FlawInjectionInterceptor = FlawInjectionInterceptor_1 = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [HttpUtils, LogService])\r\n    ], FlawInjectionInterceptor);\r\n    return FlawInjectionInterceptor;\r\n}());\r\nexport { FlawInjectionInterceptor };\r\n//# sourceMappingURL=flaw-injection.interceptor.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/common@8.2.14_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@angular/common/http.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/log.service.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/utils/index.ts"],"map":"{\"version\":3,\"file\":\"flaw-injection.interceptor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/interceptors/flaws/flaw-injection.interceptor.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/interceptors/flaws/flaw-injection.interceptor.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { LogService } from '../../../services/log.service';\r\nimport { HttpUtils } from '../../../utils';\r\nexport declare type Predicate = (request: HttpRequest<any>) => boolean;\r\nexport declare type RequestHandler = (request: HttpRequest<any>) => HttpRequest<any>;\r\nexport declare type ResponseHandler = (event: HttpResponse<any>) => HttpResponse<any>;\r\n/** @internal */\r\nexport declare class FlawInjectionInterceptor implements HttpInterceptor {\r\n    private httpUtils;\r\n    private logService;\r\n    private static requestMutations;\r\n    private static responseMutations;\r\n    private static PROBABILITY;\r\n    private flawWindow;\r\n    static registerRequestFlaw(mutation: {\r\n        test: Predicate;\r\n        mutate: RequestHandler;\r\n    }): void;\r\n    static registerResponseFlaw(mutation: {\r\n        test: Predicate;\r\n        mutate: ResponseHandler;\r\n    }): void;\r\n    constructor(httpUtils: HttpUtils, logService: LogService);\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\r\n    private _isGET;\r\n    private _activateWithProbability;\r\n}\r\n"}}
