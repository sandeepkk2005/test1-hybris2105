{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { PAGES_CONTENT_SLOT_RESOURCE_URI } from 'cmscommons';\r\nimport { uniq, first } from 'lodash';\r\nimport { CrossFrameEventService, EVENTS, IPageInfoService, IRestServiceFactory, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * PageContentSlotsServiceModule provides methods to load and act on the contentSlots for the page loaded in the storefront.\r\n */\r\nvar /* @ngInject */ PageContentSlotsService = /** @class */ (function () {\r\n    function /* @ngInject */ PageContentSlotsService(restServiceFactory, crossFrameEventService, pageInfoService) {\r\n        var _this = this;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.resource = restServiceFactory.get(PAGES_CONTENT_SLOT_RESOURCE_URI);\r\n        this.crossFrameEventService.subscribe(EVENTS.PAGE_CHANGE, function () {\r\n            return _this.reloadPageContentSlots();\r\n        });\r\n    }\r\n    /**\r\n     * This function fetches all the slots of the loaded page.\r\n     *\r\n     * @returns promise that resolves to a collection of content slots information for the loaded page.\r\n     */\r\n    /* @ngInject */ PageContentSlotsService.prototype.getPageContentSlots = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!!this.pageContentSlots) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.reloadPageContentSlots()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2: return [2 /*return*/, this.pageContentSlots];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves the slot status of the proved slotId. It can be one of TEMPLATE, PAGE and OVERRIDE.\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to the status of the slot.\r\n     */\r\n    /* @ngInject */ PageContentSlotsService.prototype.getSlotStatus = function (slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var matchedSlotData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getPageContentSlots()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        matchedSlotData = first(this.pageContentSlots.filter(function (pageContentSlot) { return pageContentSlot.slotId === slotId; }));\r\n                        return [2 /*return*/, matchedSlotData ? matchedSlotData.slotStatus : null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    /* @ngInject */ PageContentSlotsService.prototype.isSlotShared = function (slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var matchedSlotData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getPageContentSlots()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        matchedSlotData = first(this.pageContentSlots.filter(function (pageContentSlot) { return pageContentSlot.slotId === slotId; }));\r\n                        return [2 /*return*/, matchedSlotData && matchedSlotData.slotShared];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetches content slot list from API\r\n     */\r\n    /* @ngInject */ PageContentSlotsService.prototype.reloadPageContentSlots = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageId, pageContent;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUID()];\r\n                    case 1:\r\n                        pageId = _a.sent();\r\n                        return [4 /*yield*/, this.resource.get({ pageId: pageId })];\r\n                    case 2:\r\n                        pageContent = _a.sent();\r\n                        this.pageContentSlots = uniq(pageContent.pageContentSlotList || []);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ PageContentSlotsService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n            CrossFrameEventService,\r\n            IPageInfoService])\r\n    ], /* @ngInject */ PageContentSlotsService);\r\n    return /* @ngInject */ PageContentSlotsService;\r\n}());\r\nexport { /* @ngInject */ PageContentSlotsService };\r\n//# sourceMappingURL=PageContentSlotsService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PageContentSlotsService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/PageContentSlotsService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,+BAA+B,EAAE,MAAM,YAAY,CAAC;AAC7D,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,EACH,sBAAsB,EACtB,MAAM,EACN,gBAAgB,EAEhB,mBAAmB,EACnB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAc1B;;GAEG;AAEH;IAII,iDACI,kBAAuC,EAC/B,sBAA8C,EAC9C,eAAiC;QAH7C,iBAUC;QARW,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,oBAAe,GAAf,eAAe,CAAkB;QAEzC,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAExE,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE;YACtD,OAAA,KAAI,CAAC,sBAAsB,EAAE;QAA7B,CAA6B,CAChC,CAAC;IACN,CAAC;IAED;;;;OAIG;IACU,qEAAmB,GAAhC;;;;;6BACQ,CAAC,IAAI,CAAC,gBAAgB,EAAtB,wBAAsB;wBACtB,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;;wBAAnC,SAAmC,CAAC;;4BAExC,sBAAO,IAAI,CAAC,gBAAgB,EAAC;;;;KAChC;IAED;;;;;;OAMG;IACU,+DAAa,GAA1B,UAA2B,MAAc;;;;;4BACrC,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;wBAE3B,eAAe,GAAG,KAAK,CACzB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAC,eAAe,IAAK,OAAA,eAAe,CAAC,MAAM,KAAK,MAAM,EAAjC,CAAiC,CAAC,CACvF,CAAC;wBACF,sBAAO,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAC;;;;KAC9D;IAED;;;;;;;OAOG;IACU,8DAAY,GAAzB,UAA0B,MAAc;;;;;4BACpC,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;wBAE3B,eAAe,GAAG,KAAK,CACzB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAC,eAAe,IAAK,OAAA,eAAe,CAAC,MAAM,KAAK,MAAM,EAAjC,CAAiC,CAAC,CACvF,CAAC;wBACF,sBAAO,eAAe,IAAI,eAAe,CAAC,UAAU,EAAC;;;;KACxD;IAED;;OAEG;IACW,wEAAsB,GAApC;;;;;4BACmB,qBAAM,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,EAAA;;wBAAhD,MAAM,GAAG,SAAuC;wBAClC,qBAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,QAAA,EAAE,CAAC,EAAA;;wBAAjD,WAAW,GAAG,SAAmC;wBACvD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;;;;;KACvE;IApEL;QADC,kBAAkB,EAAE;yCAMO,mBAAmB;YACP,sBAAsB;YAC7B,gBAAgB;+CA8DhD;IAAD,8CAAC;CAAA,AArED,IAqEC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/PageContentSlotsService.d.ts","writeByteOrderMark":false,"text":"import { CrossFrameEventService, IPageInfoService, IRestServiceFactory } from 'smarteditcommons';\r\nexport interface IPageContentSlot {\r\n    pageId: string;\r\n    position: string;\r\n    slotId: string;\r\n    slotShared?: boolean;\r\n    slotStatus?: string;\r\n}\r\nexport interface IPageContentSlotsResponse {\r\n    pageContentSlotList: IPageContentSlot[];\r\n}\r\n/**\r\n * PageContentSlotsServiceModule provides methods to load and act on the contentSlots for the page loaded in the storefront.\r\n */\r\nexport declare class PageContentSlotsService {\r\n    private crossFrameEventService;\r\n    private pageInfoService;\r\n    private readonly resource;\r\n    private pageContentSlots;\r\n    constructor(restServiceFactory: IRestServiceFactory, crossFrameEventService: CrossFrameEventService, pageInfoService: IPageInfoService);\r\n    /**\r\n     * This function fetches all the slots of the loaded page.\r\n     *\r\n     * @returns promise that resolves to a collection of content slots information for the loaded page.\r\n     */\r\n    getPageContentSlots(): Promise<IPageContentSlot[]>;\r\n    /**\r\n     * Retrieves the slot status of the proved slotId. It can be one of TEMPLATE, PAGE and OVERRIDE.\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to the status of the slot.\r\n     */\r\n    getSlotStatus(slotId: string): Promise<string | null>;\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    isSlotShared(slotId: string): Promise<boolean>;\r\n    /**\r\n     * Fetches content slot list from API\r\n     */\r\n    private reloadPageContentSlots;\r\n}\r\n"}}
