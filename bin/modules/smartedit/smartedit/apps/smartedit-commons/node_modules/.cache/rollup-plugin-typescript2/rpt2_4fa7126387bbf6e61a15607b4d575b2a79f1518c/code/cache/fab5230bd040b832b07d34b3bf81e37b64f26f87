{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\n/**\r\n * Represents the event triggered when dragging and dropping nodes in the {@link TreeComponent}.\r\n */\r\nvar TreeDragAndDropEvent = /** @class */ (function () {\r\n    /**\r\n     * @param sourceNode `ITreeNodeItem` that is being dragged.\r\n     * @param destinationNodes The set of the destination's parent's children `ITreeNodeItem`.\r\n     * @param sourceParentNode Parent `ITreeNodeItem` of the dragged node.\r\n     * @param destinationParentNode Parent `ITreeNodeItem` of the destination node.\r\n     * @param position Index at which the `ITreeNodeItem` was dropped.\r\n     */\r\n    function TreeDragAndDropEvent(sourceNode, destinationNodes, sourceParentNode, destinationParentNode, position) {\r\n        this.sourceNode = sourceNode;\r\n        this.destinationNodes = destinationNodes;\r\n        this.sourceParentNode = sourceParentNode;\r\n        this.destinationParentNode = destinationParentNode;\r\n        this.position = position;\r\n    }\r\n    return TreeDragAndDropEvent;\r\n}());\r\nexport { TreeDragAndDropEvent };\r\nexport var TREE_NODE = new InjectionToken('TREE_NODE');\r\n//# sourceMappingURL=types.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/tree/index.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/treeModule/types.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAwJ/C;;GAEG;AACH;IACI;;;;;;OAMG;IACH,8BACW,UAAa,EACb,gBAAqB,EACrB,gBAAmB,EACnB,qBAAwB,EACxB,QAAgB;QAJhB,eAAU,GAAV,UAAU,CAAG;QACb,qBAAgB,GAAhB,gBAAgB,CAAK;QACrB,qBAAgB,GAAhB,gBAAgB,CAAG;QACnB,0BAAqB,GAArB,qBAAqB,CAAG;QACxB,aAAQ,GAAR,QAAQ,CAAQ;IACxB,CAAC;IACR,2BAAC;AAAD,CAAC,AAfD,IAeC;;AAED,MAAM,CAAC,IAAM,SAAS,GAAG,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/treeModule/types.d.ts","writeByteOrderMark":false,"text":"import { InjectionToken } from '@angular/core';\r\nimport { TypedMap } from '@smart/utils';\r\nimport { IDropdownMenuItem } from '../../components';\r\nimport { NavigationNodeEntry } from '../tree';\r\nexport interface TreeNodeItemDTO {\r\n    hasChildren?: boolean;\r\n    name?: string;\r\n    parentUid?: string;\r\n    position?: number;\r\n    itemType?: string;\r\n    uid?: string;\r\n    uuid?: string;\r\n    title?: TypedMap<string>;\r\n    level?: number;\r\n}\r\nexport interface NavigationNodeItemDTO extends TreeNodeItemDTO {\r\n    id: string;\r\n    entries?: NavigationNodeEntry[];\r\n}\r\n/**\r\n * An object representing tree nodes consumed by the {@link TreeComponent}.\r\n */\r\nexport interface ITreeNodeItem<T> {\r\n    hasChildren: boolean;\r\n    name: string;\r\n    parent: ITreeNodeItem<T>;\r\n    /**\r\n     * Carries information about parent string uid.\r\n     */\r\n    parentUid: string;\r\n    /**\r\n     * Holds number value of node position in the tree.\r\n     */\r\n    position: number;\r\n    /**\r\n     * Type of the node, based on that value different node class may be used from {@link TreeModule.service:TreeNodeItemFactory TreeNodeItemFactory}.\r\n     * You can override the default factory to use your custom classes.\r\n     */\r\n    itemType: string;\r\n    /**\r\n     * Uid of the node.\r\n     */\r\n    uid: string;\r\n    /**\r\n     * Uuid of the nodes.\r\n     */\r\n    uuid: string;\r\n    /**\r\n     * Array of node descendants.\r\n     */\r\n    nodes?: ITreeNodeItem<T>[];\r\n    initiated?: boolean;\r\n    /**\r\n     * Flags whether the UI instance of the node is being mouse hovered.\r\n     */\r\n    mouseHovered?: boolean;\r\n    isExpanded?: boolean;\r\n    /**\r\n     * Map of localized titles.\r\n     */\r\n    title?: TypedMap<string>;\r\n    /**\r\n     * A nesting level indicator in which node resides.\r\n     */\r\n    level?: number;\r\n    /**\r\n     * Sets node initiated property.\r\n     */\r\n    setInitiated(isInitiated: boolean): ITreeNodeItem<T>;\r\n    addNode(node: ITreeNodeItem<T>): ITreeNodeItem<T>;\r\n    addNodes(nodes: ITreeNodeItem<T>[]): ITreeNodeItem<T>;\r\n    removeAllNodes(): ITreeNodeItem<T>;\r\n    removeNode(node: ITreeNodeItem<T>): ITreeNodeItem<T>;\r\n    /**\r\n     * Sets the immediate parent of the node element.\r\n     */\r\n    setParent(node: ITreeNodeItem<T>): ITreeNodeItem<T>;\r\n    /**\r\n     * Toggles the node to expand/collapse children.\r\n     */\r\n    toggle(): ITreeNodeItem<T>;\r\n    /**\r\n     * Collapses the tree hiding children.\r\n     */\r\n    collapse(): ITreeNodeItem<T>;\r\n    /**\r\n     * Expands the tree revealing all children.\r\n     */\r\n    expand(): ITreeNodeItem<T>;\r\n    /**\r\n     * Sets mouseHovered flag.\r\n     */\r\n    setMouseHovered(isHovered: boolean): ITreeNodeItem<T>;\r\n    /**\r\n     * Collapses all descendant children.\r\n     */\r\n    collapseAll(): void;\r\n    /**\r\n     * Expands all descendant children.\r\n     */\r\n    expandAll(): void;\r\n}\r\n/**\r\n * Represents an object holding callbacks related to nodes drag and drop functionality in the {@link TreeComponent}.\r\n * Each callback exposes the {@link TreeDragAndDropEvent}.\r\n */\r\nexport interface TreeDragAndDropOptions<T> {\r\n    /**\r\n     * Callback function executed after the node is dropped.\r\n     */\r\n    onDropCallback: (event: TreeDragAndDropEvent<T>) => void;\r\n    /**\r\n     * Callback function executed before drop. Return true allows drop, false rejects, and an object {confirmDropI18nKey: 'key'} opens a confirmation modal.\r\n     */\r\n    beforeDropCallback: (event: TreeDragAndDropEvent<T>) => Promise<any>;\r\n    /**\r\n     * Callback function executed when hovering over droppable slots, return true to allow, return false to block.\r\n     */\r\n    acceptDropCallback?: (event: TreeDragAndDropEvent<T>) => boolean;\r\n    allowDropCallback: (event: TreeDragAndDropEvent<T>) => boolean;\r\n}\r\n/**\r\n * Represents the event triggered when dragging and dropping nodes in the {@link TreeComponent}.\r\n */\r\nexport declare class TreeDragAndDropEvent<T> {\r\n    sourceNode: T;\r\n    destinationNodes: T[];\r\n    sourceParentNode: T;\r\n    destinationParentNode: T;\r\n    position: number;\r\n    /**\r\n     * @param sourceNode `ITreeNodeItem` that is being dragged.\r\n     * @param destinationNodes The set of the destination's parent's children `ITreeNodeItem`.\r\n     * @param sourceParentNode Parent `ITreeNodeItem` of the dragged node.\r\n     * @param destinationParentNode Parent `ITreeNodeItem` of the destination node.\r\n     * @param position Index at which the `ITreeNodeItem` was dropped.\r\n     */\r\n    constructor(sourceNode: T, destinationNodes: T[], sourceParentNode: T, destinationParentNode: T, position: number);\r\n}\r\nexport declare const TREE_NODE: InjectionToken<unknown>;\r\nexport interface TreeNodeActions<T> {\r\n    getDropdownItems?(...args: any[]): IDropdownMenuItem[];\r\n    fetchData?(...args: any[]): Promise<T>;\r\n    removeItem?(...args: any[]): void;\r\n    moveUp?(...args: any[]): void;\r\n    moveDown?(...args: any[]): void;\r\n    isMoveUpAllowed?(...args: any[]): boolean;\r\n    isMoveDownAllowed?(...args: any[]): boolean;\r\n    performUpdate?(...args: any[]): void;\r\n    refreshList?(...args: any[]): void;\r\n}\r\n"}}
