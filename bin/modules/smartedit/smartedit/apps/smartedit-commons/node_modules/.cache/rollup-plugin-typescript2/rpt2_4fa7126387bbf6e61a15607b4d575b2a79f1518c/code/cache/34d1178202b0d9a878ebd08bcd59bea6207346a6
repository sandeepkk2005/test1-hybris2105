{"code":"//# sourceMappingURL=ISeComponent.js.map","references":[],"map":"{\"version\":3,\"file\":\"ISeComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/di/ISeComponent.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/di/ISeComponent.d.ts","writeByteOrderMark":false,"text":"export interface IChangesObject<T> {\r\n    currentValue: T;\r\n    previousValue: T;\r\n    isFirstChange(): boolean;\r\n}\r\nexport interface IOnChangesObject {\r\n    [property: string]: IChangesObject<any>;\r\n}\r\nexport interface ISeComponent {\r\n    /**\r\n     * Called on each controller after all the controllers on an element have been constructed and had their bindings\r\n     * initialized (and before the pre & post linking functions for the directives on this element). This is a good\r\n     * place to put initialization code for your controller.\r\n     */\r\n    $onInit?(): void;\r\n    /**\r\n     * Called on each turn of the digest cycle. Provides an opportunity to detect and act on changes.\r\n     * Any actions that you wish to take in response to the changes that you detect must be invoked from this hook;\r\n     * implementing this has no effect on when `$onChanges` is called. For example, this hook could be useful if you wish\r\n     * to perform a deep equality check, or to check a `Date object, changes to which would not be detected by Angular's\r\n     * change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments; if detecting changes,\r\n     * you must store the previous value(s) for comparison to the current values.\r\n     */\r\n    $doCheck?(): void;\r\n    /**\r\n     * Called whenever one-way bindings are updated. The onChangesObj is a hash whose keys are the names of the bound\r\n     * properties that have changed, and the values are an {@link IChangesObject} object  of the form\r\n     * { currentValue, previousValue, isFirstChange() }. Use this hook to trigger updates within a component such as\r\n     * cloning the bound value to prevent accidental mutation of the outer value.\r\n     */\r\n    $onChanges?(onChangesObj: IOnChangesObject): void;\r\n    /**\r\n     * Called on a controller when its containing scope is destroyed. Use this hook for releasing external resources,\r\n     * watches and event handlers.\r\n     */\r\n    $onDestroy?(): void;\r\n    /**\r\n     * Called after this controller's element and its children have been linked. Similar to the post-link function this\r\n     * hook can be used to set up DOM event handlers and do direct DOM manipulation. Note that child elements that contain\r\n     * templateUrl directives will not have been compiled and linked since they are waiting for their template to load\r\n     * asynchronously and their own compilation and linking has been suspended until that occurs.\r\n     */\r\n    $postLink?(): void;\r\n    [index: string]: any;\r\n}\r\n"}}
