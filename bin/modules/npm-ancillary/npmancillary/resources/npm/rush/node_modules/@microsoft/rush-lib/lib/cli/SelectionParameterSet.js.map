{"version":3,"file":"SelectionParameterSet.js","sourceRoot":"","sources":["../../src/cli/SelectionParameterSet.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors/safe';\r\n\r\nimport {\r\n  PackageName,\r\n  AlreadyReportedError,\r\n  PackageJsonLookup,\r\n  IPackageJson\r\n} from '@rushstack/node-core-library';\r\nimport { CommandLineParameterProvider, CommandLineStringListParameter } from '@rushstack/ts-command-line';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { Selection } from '../logic/Selection';\r\n\r\n/**\r\n * This class is provides the set of command line parameters used to select projects\r\n * based on dependencies.\r\n *\r\n * It is a separate component such that unrelated actions can share the same parameters.\r\n */\r\nexport class SelectionParameterSet {\r\n  private readonly _rushConfiguration: RushConfiguration;\r\n\r\n  private readonly _fromProject: CommandLineStringListParameter;\r\n  private readonly _impactedByProject: CommandLineStringListParameter;\r\n  private readonly _impactedByExceptProject: CommandLineStringListParameter;\r\n  private readonly _onlyProject: CommandLineStringListParameter;\r\n  private readonly _toProject: CommandLineStringListParameter;\r\n  private readonly _toExceptProject: CommandLineStringListParameter;\r\n\r\n  private readonly _fromVersionPolicy: CommandLineStringListParameter;\r\n  private readonly _toVersionPolicy: CommandLineStringListParameter;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration, action: CommandLineParameterProvider) {\r\n    this._rushConfiguration = rushConfiguration;\r\n\r\n    const getProjectNames: () => Promise<string[]> = this._getProjectNames.bind(this);\r\n\r\n    this._toProject = action.defineStringListParameter({\r\n      parameterLongName: '--to',\r\n      parameterShortName: '-t',\r\n      argumentName: 'PROJECT',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' Each \"--to\" parameter expands this selection to include PROJECT and all its dependencies.' +\r\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\r\n      completions: getProjectNames\r\n    });\r\n    this._toExceptProject = action.defineStringListParameter({\r\n      parameterLongName: '--to-except',\r\n      parameterShortName: '-T',\r\n      argumentName: 'PROJECT',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' Each \"--to-except\" parameter expands this selection to include all dependencies of PROJECT,' +\r\n        ' but not PROJECT itself.' +\r\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\r\n      completions: getProjectNames\r\n    });\r\n\r\n    this._fromProject = action.defineStringListParameter({\r\n      parameterLongName: '--from',\r\n      parameterShortName: '-f',\r\n      argumentName: 'PROJECT',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' Each \"--from\" parameter expands this selection to include PROJECT and all projects that depend on it,' +\r\n        ' plus all dependencies of this set.' +\r\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\r\n      completions: getProjectNames\r\n    });\r\n    this._onlyProject = action.defineStringListParameter({\r\n      parameterLongName: '--only',\r\n      parameterShortName: '-o',\r\n      argumentName: 'PROJECT',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' Each \"--only\" parameter expands this selection to include PROJECT; its dependencies are not added.' +\r\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\r\n        ' Note that this parameter is \"unsafe\" as it may produce a selection that excludes some dependencies.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\r\n      completions: getProjectNames\r\n    });\r\n\r\n    this._impactedByProject = action.defineStringListParameter({\r\n      parameterLongName: '--impacted-by',\r\n      parameterShortName: '-i',\r\n      argumentName: 'PROJECT',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' Each \"--impacted-by\" parameter expands this selection to include PROJECT and any projects that' +\r\n        ' depend on PROJECT (and thus might be broken by changes to PROJECT).' +\r\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\r\n        ' Note that this parameter is \"unsafe\" as it may produce a selection that excludes some dependencies.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\r\n      completions: getProjectNames\r\n    });\r\n\r\n    this._impactedByExceptProject = action.defineStringListParameter({\r\n      parameterLongName: '--impacted-by-except',\r\n      parameterShortName: '-I',\r\n      argumentName: 'PROJECT',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' Each \"--impacted-by-except\" parameter works the same as \"--impacted-by\" except that PROJECT itself' +\r\n        ' is not added to the selection.' +\r\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\r\n        ' Note that this parameter is \"unsafe\" as it may produce a selection that excludes some dependencies.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\r\n      completions: getProjectNames\r\n    });\r\n\r\n    this._toVersionPolicy = action.defineStringListParameter({\r\n      parameterLongName: '--to-version-policy',\r\n      argumentName: 'VERSION_POLICY_NAME',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' The \"--to-version-policy\" parameter is equivalent to specifying \"--to\" for each of the projects' +\r\n        ' belonging to VERSION_POLICY_NAME.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".'\r\n    });\r\n    this._fromVersionPolicy = action.defineStringListParameter({\r\n      parameterLongName: '--from-version-policy',\r\n      argumentName: 'VERSION_POLICY_NAME',\r\n      description:\r\n        'Normally all projects in the monorepo will be processed;' +\r\n        ' adding this parameter will instead select a subset of projects.' +\r\n        ' The \"--from-version-policy\" parameter is equivalent to specifying \"--from\" for each of the projects' +\r\n        ' belonging to VERSION_POLICY_NAME.' +\r\n        ' For details, refer to the website article \"Selecting subsets of projects\".'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Computes the set of selected projects based on all parameter values.\r\n   *\r\n   * If no parameters are specified, returns all projects in the Rush config file.\r\n   */\r\n  public getSelectedProjects(): Set<RushConfigurationProject> {\r\n    // Include exactly these projects (--only)\r\n    const onlyProjects: Iterable<RushConfigurationProject> = this._evaluateProjectParameter(\r\n      this._onlyProject\r\n    );\r\n\r\n    // Include all projects that depend on these projects, and all dependencies thereof\r\n    const fromProjects: Set<RushConfigurationProject> = Selection.union(\r\n      // --from\r\n      this._evaluateProjectParameter(this._fromProject),\r\n      // --from-version-policy\r\n      this._evaluateVersionPolicyProjects(this._fromVersionPolicy)\r\n    );\r\n\r\n    // Include dependencies of these projects\r\n    const toProjects: Set<RushConfigurationProject> = Selection.union(\r\n      // --to\r\n      this._evaluateProjectParameter(this._toProject),\r\n      // --to-version-policy\r\n      this._evaluateVersionPolicyProjects(this._toVersionPolicy),\r\n      // --to-except\r\n      Selection.directDependenciesOf(this._evaluateProjectParameter(this._toExceptProject)),\r\n      // --from / --from-version-policy\r\n      Selection.expandAllConsumers(fromProjects)\r\n    );\r\n\r\n    // These projects will not have their dependencies included\r\n    const impactedByProjects: Set<RushConfigurationProject> = Selection.union(\r\n      // --impacted-by\r\n      this._evaluateProjectParameter(this._impactedByProject),\r\n      // --impacted-by-except\r\n      Selection.directConsumersOf(this._evaluateProjectParameter(this._impactedByExceptProject))\r\n    );\r\n\r\n    const selection: Set<RushConfigurationProject> = Selection.union(\r\n      onlyProjects,\r\n      Selection.expandAllDependencies(toProjects),\r\n      // Only dependents of these projects, not dependencies\r\n      Selection.expandAllConsumers(impactedByProjects)\r\n    );\r\n\r\n    // If no projects selected, select everything.\r\n    if (selection.size === 0) {\r\n      for (const project of this._rushConfiguration.projects) {\r\n        selection.add(project);\r\n      }\r\n    }\r\n\r\n    return selection;\r\n  }\r\n\r\n  /**\r\n   * Represents the selection as `--filter` parameters to pnpm.\r\n   *\r\n   * @remarks\r\n   * This is a separate from the selection to allow the filters to be represented more concisely.\r\n   *\r\n   * @see https://pnpm.js.org/en/filtering\r\n   */\r\n  public getPnpmFilterArguments(): string[] {\r\n    const args: string[] = [];\r\n\r\n    // Include exactly these projects (--only)\r\n    for (const project of this._evaluateProjectParameter(this._onlyProject)) {\r\n      args.push('--filter', project.packageName);\r\n    }\r\n\r\n    // Include all projects that depend on these projects, and all dependencies thereof\r\n    const fromProjects: Set<RushConfigurationProject> = Selection.union(\r\n      // --from\r\n      this._evaluateProjectParameter(this._fromProject),\r\n      // --from-version-policy\r\n      this._evaluateVersionPolicyProjects(this._fromVersionPolicy)\r\n    );\r\n\r\n    // All specified projects and all projects that they depend on\r\n    for (const project of Selection.union(\r\n      // --to\r\n      this._evaluateProjectParameter(this._toProject),\r\n      // --to-version-policy\r\n      this._evaluateVersionPolicyProjects(this._toVersionPolicy),\r\n      // --from / --from-version-policy\r\n      Selection.expandAllConsumers(fromProjects)\r\n    )) {\r\n      args.push('--filter', `${project.packageName}...`);\r\n    }\r\n\r\n    // --to-except\r\n    // All projects that the project directly or indirectly declares as a dependency\r\n    for (const project of this._evaluateProjectParameter(this._toExceptProject)) {\r\n      args.push('--filter', `${project.packageName}^...`);\r\n    }\r\n\r\n    // --impacted-by\r\n    // The project and all projects directly or indirectly declare it as a dependency\r\n    for (const project of this._evaluateProjectParameter(this._impactedByProject)) {\r\n      args.push('--filter', `...${project.packageName}`);\r\n    }\r\n\r\n    // --impacted-by-except\r\n    // All projects that directly or indirectly declare the specified project as a dependency\r\n    for (const project of this._evaluateProjectParameter(this._impactedByExceptProject)) {\r\n      args.push('--filter', `...^${project.packageName}`);\r\n    }\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Usage telemetry for selection parameters. Only saved locally, and if requested in the config.\r\n   */\r\n  public getTelemetry(): { [key: string]: string } {\r\n    return {\r\n      command_from: `${this._fromProject.values.length > 0}`,\r\n      command_impactedBy: `${this._impactedByProject.values.length > 0}`,\r\n      command_impactedByExcept: `${this._impactedByExceptProject.values.length > 0}`,\r\n      command_only: `${this._onlyProject.values.length > 0}`,\r\n      command_to: `${this._toProject.values.length > 0}`,\r\n      command_toExcept: `${this._toExceptProject.values.length > 0}`,\r\n\r\n      command_fromVersionPolicy: `${this._fromVersionPolicy.values.length > 0}`,\r\n      command_toVersionPolicy: `${this._toVersionPolicy.values.length > 0}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Computes the referents of parameters that accept a project identifier.\r\n   * Handles '.', unscoped names, and scoped names.\r\n   */\r\n  private *_evaluateProjectParameter(\r\n    projectsParameters: CommandLineStringListParameter\r\n  ): Iterable<RushConfigurationProject> {\r\n    const packageJsonLookup: PackageJsonLookup = PackageJsonLookup.instance;\r\n\r\n    for (const projectParameter of projectsParameters.values) {\r\n      if (projectParameter === '.') {\r\n        const packageJson: IPackageJson | undefined = packageJsonLookup.tryLoadPackageJsonFor(process.cwd());\r\n        if (packageJson) {\r\n          const project: RushConfigurationProject | undefined = this._rushConfiguration.getProjectByName(\r\n            packageJson.name\r\n          );\r\n\r\n          if (project) {\r\n            yield project;\r\n          } else {\r\n            console.log(\r\n              colors.red(\r\n                'Rush is not currently running in a project directory specified in rush.json. ' +\r\n                  `The \".\" value for the ${projectsParameters.longName} parameter is not allowed.`\r\n              )\r\n            );\r\n            throw new AlreadyReportedError();\r\n          }\r\n        } else {\r\n          console.log(\r\n            colors.red(\r\n              'Rush is not currently running in a project directory. ' +\r\n                `The \".\" value for the ${projectsParameters.longName} parameter is not allowed.`\r\n            )\r\n          );\r\n          throw new AlreadyReportedError();\r\n        }\r\n      } else {\r\n        const project:\r\n          | RushConfigurationProject\r\n          | undefined = this._rushConfiguration.findProjectByShorthandName(projectParameter);\r\n        if (!project) {\r\n          console.log(colors.red(`The project '${projectParameter}' does not exist in rush.json.`));\r\n          throw new AlreadyReportedError();\r\n        }\r\n\r\n        yield project;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the set of available project names, for use by tab completion.\r\n   */\r\n  private async _getProjectNames(): Promise<string[]> {\r\n    const unscopedNamesMap: Map<string, number> = new Map<string, number>();\r\n\r\n    const scopedNames: Set<string> = new Set();\r\n\r\n    for (const project of this._rushConfiguration.rushConfigurationJson.projects) {\r\n      scopedNames.add(project.packageName);\r\n      const unscopedName: string = PackageName.getUnscopedName(project.packageName);\r\n      const count: number = unscopedNamesMap.get(unscopedName) || 0;\r\n      unscopedNamesMap.set(unscopedName, count + 1);\r\n    }\r\n\r\n    const unscopedNames: string[] = [];\r\n\r\n    for (const [unscopedName, unscopedNameCount] of unscopedNamesMap) {\r\n      // don't suggest ambiguous unscoped names\r\n      if (unscopedNameCount === 1 && !scopedNames.has(unscopedName)) {\r\n        unscopedNames.push(unscopedName);\r\n      }\r\n    }\r\n\r\n    return unscopedNames.sort().concat([...scopedNames].sort());\r\n  }\r\n\r\n  /**\r\n   * Computes the set of projects that have the specified version policy\r\n   */\r\n  private *_evaluateVersionPolicyProjects(\r\n    versionPoliciesParameters: CommandLineStringListParameter\r\n  ): Iterable<RushConfigurationProject> {\r\n    if (versionPoliciesParameters.values && versionPoliciesParameters.values.length > 0) {\r\n      const policyNames: Set<string> = new Set(versionPoliciesParameters.values);\r\n\r\n      for (const policyName of policyNames) {\r\n        if (!this._rushConfiguration.versionPolicyConfiguration.versionPolicies.has(policyName)) {\r\n          console.log(\r\n            colors.red(`The version policy '${policyName}' does not exist in version-policies.json.`)\r\n          );\r\n          throw new AlreadyReportedError();\r\n        }\r\n      }\r\n\r\n      for (const project of this._rushConfiguration.projects) {\r\n        const matches: boolean = !!project.versionPolicyName && policyNames.has(project.versionPolicyName);\r\n        if (matches) {\r\n          yield project;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}