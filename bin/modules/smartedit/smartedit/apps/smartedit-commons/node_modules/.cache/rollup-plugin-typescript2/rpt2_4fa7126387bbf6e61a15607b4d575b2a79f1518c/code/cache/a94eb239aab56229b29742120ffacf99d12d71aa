{"code":"//# sourceMappingURL=types.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/forms@8.2.14_e9fbe5720e9434eb9ae0f6720f1ca3f4/node_modules/@angular/forms/forms.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/models/index.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/genericEditor/types.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/genericEditor/types.d.ts","writeByteOrderMark":false,"text":"import { Type } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Payload, TypedMap } from '@smart/utils';\r\nimport { ILanguage, IUriContext } from '../../services';\r\nimport { GenericEditorState } from './models';\r\nexport interface GenericEditorOnSubmitResponse {\r\n    payload: Payload;\r\n    response: Payload;\r\n}\r\nexport interface GenericEditorAttribute {\r\n    cmsStructureType: string;\r\n    cmsStructureEnumType?: string;\r\n    qualifier: string;\r\n    i18nKey?: string;\r\n    localized?: boolean;\r\n    editable?: boolean;\r\n    required?: boolean;\r\n    collection?: boolean;\r\n    postfixText?: string;\r\n}\r\n/**\r\n * **Deprecated since 2105. It will be removed in next release.**\r\n *\r\n * custom sanitization function\r\n * first argument is a property value (not the full model) that may be comple or scalar\r\n *\r\n * @deprecated\r\n */\r\nexport declare type GenericEditorCustomSanitize<T = any> = (payload: T, sanitize: (input: string) => string) => T;\r\n/** Describes the field being edited as defined by the structure API described in {@link GenericEditorFactoryService}. */\r\nexport interface GenericEditorField extends GenericEditorAttribute {\r\n    editorStackId?: string;\r\n    hasErrors?: boolean;\r\n    hasWarnings?: boolean;\r\n    smarteditComponentType?: string;\r\n    messages?: GenericEditorFieldMessage[];\r\n    /**\r\n     * A boolean to determine if we are in paged mode as opposed to retrieving all items at once.\r\n     */\r\n    paged?: boolean;\r\n    template?: string;\r\n    component?: Type<any>;\r\n    initiated?: string[];\r\n    /** The original array of options (used by {@link OptionsDropdownPopulator}). */\r\n    options?: TypedMap<string[]> | GenericEditorOption;\r\n    hidePrefixLabel?: boolean;\r\n    /**\r\n     * **Deprecated since 2105. It will be removed in next release.**\r\n     *\r\n     * @deprecated\r\n     */\r\n    customSanitize?: GenericEditorCustomSanitize;\r\n    requiresUserCheck?: TypedMap<boolean>;\r\n    isUserChecked?: boolean;\r\n    defaultValue?: string;\r\n    params?: TypedMap<string>;\r\n    /**\r\n     * A comma separated list of attributes to include from the model when building the request params.\r\n     * The qualifier of the parent dropdown that this dropdown depends on.\r\n     */\r\n    dependsOn?: string;\r\n    /**\r\n     * The uri used to make a rest call to fetch data (used by {@link UriDropdownPopulator})\r\n     */\r\n    uri?: string;\r\n    /**\r\n     * If a propertyType is defined, the `GenericEditorDropdownComponent` will use the populator associated to it with the following recipe name: `propertyType + \"DropdownPopulator\"`.\r\n     *\r\n     * For AngularJS `SeDropdownComponent`.\r\n     */\r\n    propertyType?: string;\r\n    /**\r\n     * The name of the attribute to use when setting the id attribute.\r\n     */\r\n    idAttribute?: string;\r\n    /**\r\n     * A list of attributes to use when setting the label attribute.\r\n     */\r\n    labelAttributes?: string[];\r\n    errors?: GenericEditorFieldMessage[];\r\n    control?: FormControl;\r\n    validators?: GenericEditorFieldValidatorMap;\r\n    /**\r\n     * This map is only used for localized fields. Each entry contains a boolean\r\n     * that specifies whether the field should be enabled for a language or not.\r\n     */\r\n    isLanguageEnabledMap?: {\r\n        [languageId: string]: boolean;\r\n    };\r\n    tooltip?: string;\r\n    labelText?: string;\r\n    placeholder?: string;\r\n    containedTypes?: string[];\r\n}\r\nexport interface GenericEditorTab {\r\n    id: string;\r\n    title: string;\r\n    templateUrl?: string;\r\n    component?: Type<any>;\r\n    hasErrors?: boolean;\r\n    active?: boolean;\r\n}\r\nexport declare type GenericEditorFieldsMap = TypedMap<GenericEditorField[]>;\r\n/**\r\n * Descriptor schema necessary to build a GenericEditorState.\r\n */\r\nexport interface GenericEditorSchema {\r\n    id: string;\r\n    languages: ILanguage[];\r\n    structure: GenericEditorStructure;\r\n    uriContext: IUriContext;\r\n    smarteditComponentType: string;\r\n    targetedQualifier?: string;\r\n}\r\nexport interface GenericEditorFieldMessage {\r\n    fromSubmit?: boolean;\r\n    isNonPristine?: boolean;\r\n    message: string;\r\n    subject?: string;\r\n    type?: string;\r\n    uniqId?: string;\r\n    marker?: string;\r\n    format?: string;\r\n    language?: string;\r\n    [index: string]: any;\r\n}\r\nexport interface GenericEditorTabConfiguration {\r\n    priority: number;\r\n}\r\nexport interface GenericEditorStructure {\r\n    attributes: GenericEditorAttribute[];\r\n    category?: string;\r\n    type?: string;\r\n}\r\nexport interface IGenericEditorFactoryOptions {\r\n    content?: Payload;\r\n    contentApi?: string;\r\n    customOnSubmit?: (newContent: Payload) => Promise<GenericEditorOnSubmitResponse>;\r\n    editorStackId?: string;\r\n    id?: string;\r\n    smarteditComponentId?: string;\r\n    smarteditComponentType?: string;\r\n    structure?: GenericEditorStructure;\r\n    structureApi?: string;\r\n    updateCallback?: (pristine: Payload, results: Payload) => void;\r\n    uriContext?: Promise<IUriContext>;\r\n    element: HTMLElement;\r\n}\r\nexport declare type GenericEditorPredicate = (structure: GenericEditorStructure) => boolean | string;\r\nexport interface GenericEditorInfo {\r\n    editorStackId?: string;\r\n    editorId: string;\r\n    component: Payload;\r\n    componentType: string;\r\n}\r\nexport interface GenericEditorMapping {\r\n    structureTypeMatcher: string | ((...args: any[]) => boolean);\r\n    componentTypeMatcher: string | ((...args: any[]) => boolean);\r\n    discriminatorMatcher: string | ((...args: any[]) => boolean);\r\n    value: any;\r\n}\r\nexport declare type GenericEditorFieldValidatorPredicate = (id: string, structure: GenericEditorField, required: boolean, component: Payload) => boolean;\r\nexport declare type GenericEditorFieldValidatorMap = TypedMap<GenericEditorFieldValidatorPredicate>;\r\nexport interface GenericEditorMappingConfiguration {\r\n    template?: string;\r\n    component?: Type<any>;\r\n    /**\r\n     * **Deprecated since 2105. It will be removed in next release.**\r\n     *\r\n     * @deprecated\r\n     */\r\n    customSanitize?: GenericEditorCustomSanitize;\r\n    precision?: string;\r\n    i18nKey?: string;\r\n    hidePrefixLabel?: boolean;\r\n    validators?: GenericEditorFieldValidatorMap;\r\n}\r\nexport interface BackendValidationErrors {\r\n    errors: GenericEditorFieldMessage[];\r\n}\r\nexport interface BackendErrorResponse<T> {\r\n    error: T;\r\n}\r\nexport interface GenericEditorAPI {\r\n    setSubmitButtonText: (_submitButtonText: string) => void;\r\n    setCancelButtonText: (_cancelButtonText: string) => void;\r\n    setAlwaysShowSubmit: (_alwaysShowSubmit: boolean) => void;\r\n    setAlwaysShowReset: (_alwaysShowReset: boolean) => void;\r\n    setOnReset: (_onReset: () => void) => void;\r\n    setPreparePayload: (_preparePayload: (payload: Payload) => Promise<Payload>) => void;\r\n    setUpdateCallback: (_updateCallback: (pristine: Payload, results: Payload) => void) => void;\r\n    updateContent: (component: Payload) => void;\r\n    getContent: () => Payload;\r\n    onContentChange: () => void;\r\n    addContentChangeEvent: (event: () => void) => () => void;\r\n    triggerContentChangeEvents: () => void;\r\n    clearMessages: () => void;\r\n    switchToTabContainingQualifier: (qualifier: string) => void;\r\n    considerFormDirty: () => void;\r\n    setInProgress: (isInProgress: boolean) => void;\r\n    isSubmitDisabled: () => boolean;\r\n    getLanguages: () => Promise<ILanguage[]>;\r\n    setAlwaysEnableSubmit: (alwaysEnableSubmit: boolean) => void;\r\n}\r\nexport interface IGenericEditor {\r\n    readonly id: string;\r\n    readonly form: GenericEditorState;\r\n    readonly api: GenericEditorAPI;\r\n    /**\r\n     * Handler for \"Cancel\" button click event.\r\n     *\r\n     * If false, `reset` method will not be called.\r\n     * There is no need to call `reset` method for modal components when that component is closed.\r\n     */\r\n    readonly onReset: () => boolean | void;\r\n    readonly alwaysShowSubmit: boolean;\r\n    readonly alwaysShowReset: boolean;\r\n    readonly editorStackId: string;\r\n    readonly hasFrontEndValidationErrors: boolean;\r\n    readonly submitButtonText: string;\r\n    readonly cancelButtonText: string;\r\n    readonly parameters: IUriContext;\r\n    readonly inProgress: boolean;\r\n    readonly smarteditComponentType: string;\r\n    readonly smarteditComponentId: string;\r\n    readonly updateCallback: (pristine: Payload, results: Payload) => void;\r\n    readonly structure: GenericEditorStructure;\r\n    readonly uriContext: Promise<IUriContext>;\r\n    readonly editorStructureService: any;\r\n    readonly editorCRUDService: any;\r\n    readonly initialContent: Payload;\r\n    readonly pristine: Payload;\r\n    readonly initialDirty: boolean;\r\n    readonly targetedQualifier: string;\r\n    _finalize(): void;\r\n    init(): Promise<void>;\r\n    isDirty(): boolean;\r\n    reset(pristine?: Payload): Promise<any>;\r\n    submit(newContent: Payload): Promise<any>;\r\n    getComponent(): Payload;\r\n    isValid(comesFromSubmit?: boolean): boolean;\r\n    isSubmitDisabled(): boolean;\r\n    watchFormErrors(form: HTMLFormElement): void;\r\n    fetch(): Promise<any>;\r\n    load(): Promise<any>;\r\n    popEditorFromStack(): void;\r\n    refreshOptions(field: GenericEditorField, qualifier: string, search: string): Promise<void>;\r\n}\r\nexport declare type IGenericEditorConstructor = new (conf: IGenericEditorFactoryOptions) => IGenericEditor;\r\nexport interface GenericEditorOption {\r\n    id?: string;\r\n    label?: string | TypedMap<string>;\r\n    [key: string]: any;\r\n}\r\nexport interface GenericEditorWidgetData<T> {\r\n    id: string;\r\n    field: GenericEditorField;\r\n    qualifier: string;\r\n    model: T;\r\n    editor?: IGenericEditor;\r\n    isFieldDisabled: () => boolean;\r\n}\r\n"}}
