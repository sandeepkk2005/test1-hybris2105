{"code":"import { objectUtils } from '../../utils';\r\nexport var createApi = function (editor) {\r\n    /**\r\n     * The generic editor's api object exposing public functionality\r\n     */\r\n    return ({\r\n        /**\r\n         * Overrides the i18n key used bfor the submit button.\r\n         */\r\n        setSubmitButtonText: function (_submitButtonText) {\r\n            editor.submitButtonText = _submitButtonText;\r\n        },\r\n        /**\r\n         * Overrides the i18n key used bfor the submit button.\r\n         */\r\n        setCancelButtonText: function (_cancelButtonText) {\r\n            editor.cancelButtonText = _cancelButtonText;\r\n        },\r\n        /**\r\n         * If set to true, will always show the submit button.\r\n         */\r\n        setAlwaysShowSubmit: function (_alwaysShowSubmit) {\r\n            editor.alwaysShowSubmit = _alwaysShowSubmit;\r\n        },\r\n        /**\r\n         * If set to true, will always show the reset button.\r\n         */\r\n        setAlwaysShowReset: function (_alwaysShowReset) {\r\n            editor.alwaysShowReset = _alwaysShowReset;\r\n        },\r\n        /**\r\n         * To be executed after reset.\r\n         */\r\n        setOnReset: function (_onReset) {\r\n            editor.onReset = _onReset;\r\n        },\r\n        /**\r\n         * Function that passes a preparePayload function to the editor in order to transform the payload prior to submitting (see `GenericEditorFactoryService#preparePayload`)\r\n         * @param preparePayload The function that takes the original payload as argument\r\n         */\r\n        setPreparePayload: function (_preparePayload) {\r\n            editor.preparePayload = _preparePayload;\r\n        },\r\n        /**\r\n         * Function that passes an updateCallback function to the editor in order to perform an action upon successful submit. It is invoked with two arguments: the pristine object and the response from the server.\r\n         * @param updateCallback the callback invoked upon successful submit.\r\n         */\r\n        setUpdateCallback: function (_updateCallback) {\r\n            editor.updateCallback = _updateCallback;\r\n        },\r\n        /**\r\n         * Function that updates the content of the generic editor without having to reinitialize\r\n         *\r\n         * @param component The component to replace the current model for the generic editor\r\n         */\r\n        updateContent: function (component) {\r\n            editor.form && editor.form.patchComponent(component);\r\n        },\r\n        /**\r\n         * Copies of the current model\r\n         * @returns a copy\r\n         */\r\n        getContent: function () {\r\n            return editor.form ? objectUtils.copy(editor.form.component) : undefined;\r\n        },\r\n        /**\r\n         * **Deprecated since 1905 - use {@link addContentChangeEvent} instead.**\r\n         *\r\n         * Function triggered everytime the current model changes\r\n         *\r\n         * @deprecated\r\n         */\r\n        onContentChange: function () {\r\n            return;\r\n        },\r\n        /**\r\n         * Method adds a new function to the list of functions triggered everytime the current model changes\r\n         *\r\n         * @param {Function} The function triggered everytime the current model changes\r\n         *\r\n         * @returns The function to unregister the event;\r\n         */\r\n        addContentChangeEvent: function (event) {\r\n            editor.onChangeEvents.push(event);\r\n            return function () {\r\n                var index = editor.onChangeEvents.findIndex(function (e) { return e === event; });\r\n                if (index > -1) {\r\n                    editor.onChangeEvents.splice(index, 1);\r\n                }\r\n            };\r\n        },\r\n        /**\r\n         * Triggers all functions that were added with addContentChangeEvent api method. It provides current content as parameter to every function call.\r\n         */\r\n        triggerContentChangeEvents: function () {\r\n            editor.onChangeEvents.forEach(function (event) {\r\n                event(objectUtils.copy(editor.form.component));\r\n            });\r\n        },\r\n        /**\r\n         * Function that clears all validation messages in the editor\r\n         */\r\n        clearMessages: function () {\r\n            editor.form.removeValidationMessages();\r\n        },\r\n        /**\r\n         * Causes the genericEditor to switch to the tab containing a qualifier of the given name.\r\n         * @param qualifier the qualifier contained in the tab we want to switch to.\r\n         */\r\n        switchToTabContainingQualifier: function (qualifier) {\r\n            editor.targetedQualifier = qualifier;\r\n        },\r\n        /** Currently used by clone components to open editor in dirty mode. */\r\n        considerFormDirty: function () {\r\n            editor.initialDirty = true;\r\n        },\r\n        setInProgress: function (isInProgress) {\r\n            editor.inProgress = isInProgress;\r\n        },\r\n        /**\r\n         * Returns true to inform that the submit button delegated to the invoker should be disabled.\r\n         * @returns true if submit is disabled\r\n         */\r\n        isSubmitDisabled: function () { return editor.isSubmitDisabled(); },\r\n        /**\r\n         * Function that returns a promise resolving to language descriptors. If defined, will be resolved\r\n         * when the generic editor is initialized to override what languages are used for localized elements\r\n         * within the editor.\r\n         * @returns a promise resolving to language descriptors. Each descriptor provides the following\r\n         * language properties: isocode, nativeName, name, active, and required.\r\n         */\r\n        getLanguages: function () { return null; },\r\n        /**\r\n         * If set to true, will always enable the submit button.\r\n         */\r\n        setAlwaysEnableSubmit: function (alwaysEnableSubmit) {\r\n            editor.alwaysEnableSubmit = alwaysEnableSubmit;\r\n        }\r\n    });\r\n};\r\n//# sourceMappingURL=GenericEditorAPI.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/types.ts"],"map":"{\"version\":3,\"file\":\"GenericEditorAPI.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/genericEditor/GenericEditorAPI.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/genericEditor/GenericEditorAPI.d.ts","writeByteOrderMark":false,"text":"import { GenericEditorAPI } from './types';\r\nexport declare const createApi: (editor: any) => GenericEditorAPI;\r\n"}}
