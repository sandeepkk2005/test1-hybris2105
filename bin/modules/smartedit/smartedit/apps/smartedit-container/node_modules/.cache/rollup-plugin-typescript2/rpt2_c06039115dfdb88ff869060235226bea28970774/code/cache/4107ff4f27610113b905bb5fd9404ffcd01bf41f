{"code":"import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lo from 'lodash';\r\nimport { setupL10nFilter, CrossFrameEventService, DropdownPopulatorInterface, ICatalogService, LanguageService, SeDowngradeService, ISharedDataService, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\n/**\r\n * Implementation of DropdownPopulatorInterface for catalog dropdown in\r\n * experience selector to populate the list of catalogs by making a REST call to retrieve the sites and then the catalogs based on the site.\r\n */\r\nvar /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator, _super);\r\n    function /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator(catalogService, sharedDataService, languageService, crossFrameEventService) {\r\n        var _this = _super.call(this, lo, languageService) || this;\r\n        _this.catalogService = catalogService;\r\n        _this.sharedDataService = sharedDataService;\r\n        _this.l10nFn = setupL10nFilter(languageService, crossFrameEventService);\r\n        return _this;\r\n    }\r\n    /**\r\n     *  Returns a promise resolving to a list of site - catalogs to be displayed in the experience selector.\r\n     *\r\n     */\r\n    /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator.prototype.fetchAll = function (payload) {\r\n        return this.initCatalogVersionDropdownChoices(payload.search);\r\n    };\r\n    /** @internal */\r\n    /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator.prototype.initCatalogVersionDropdownChoices = function (search) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var experience, siteDescriptor, dropdownChoices, ascDropdownChoices, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 3, , 4]);\r\n                        return [4 /*yield*/, this.sharedDataService.get(EXPERIENCE_STORAGE_KEY)];\r\n                    case 1:\r\n                        experience = (_a.sent());\r\n                        siteDescriptor = experience.siteDescriptor;\r\n                        return [4 /*yield*/, this.getDropdownChoices(siteDescriptor, search)];\r\n                    case 2:\r\n                        dropdownChoices = _a.sent();\r\n                        ascDropdownChoices = lo\r\n                            .flatten(dropdownChoices)\r\n                            .sort(function (e1, e2) {\r\n                            return e1.label.localeCompare(e2.label);\r\n                        });\r\n                        return [2 /*return*/, ascDropdownChoices];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        throw new Error(e_1);\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /** @internal */\r\n    /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator.prototype.getDropdownChoices = function (siteDescriptor, search) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var catalogs, optionsByCatalog;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.catalogService.getContentCatalogsForSite(siteDescriptor.uid)];\r\n                    case 1:\r\n                        catalogs = _a.sent();\r\n                        optionsByCatalog = lo.flatten(catalogs).map(function (catalog) {\r\n                            return catalog.versions.map(function (catalogVersion) { return ({\r\n                                id: siteDescriptor.uid + \"|\" + catalog.catalogId + \"|\" + catalogVersion.version,\r\n                                label: _this.l10nFn(catalog.name) + \" - \" + catalogVersion.version\r\n                            }); });\r\n                        });\r\n                        return [2 /*return*/, lo\r\n                                .flatten(optionsByCatalog)\r\n                                .filter(function (option) {\r\n                                return search ? option.label.toUpperCase().includes(search.toUpperCase()) : true;\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [ICatalogService,\r\n            ISharedDataService,\r\n            LanguageService,\r\n            CrossFrameEventService])\r\n    ], /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator);\r\n    return /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator;\r\n}(DropdownPopulatorInterface));\r\nexport { /* @ngInject */ PreviewDatapreviewCatalogDropdownPopulator };\r\n//# sourceMappingURL=PreviewDatapreviewCatalogDropdownPopulator.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PreviewDatapreviewCatalogDropdownPopulator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/PreviewDatapreviewCatalogDropdownPopulator.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EACH,eAAe,EACf,sBAAsB,EACtB,0BAA0B,EAK1B,eAAe,EAEf,eAAe,EACf,kBAAkB,EAGlB,kBAAkB,EAClB,sBAAsB,EACzB,MAAM,kBAAkB,CAAC;AAE1B;;;GAGG;AAEH;IAAgE,8EAA0B;IAGtF,oEACY,cAA+B,EAC/B,iBAAqC,EAC7C,eAAgC,EAChC,sBAA8C;QAJlD,YAMI,kBAAM,EAAE,EAAE,eAAe,CAAC,SAE7B;QAPW,oBAAc,GAAd,cAAc,CAAiB;QAC/B,uBAAiB,GAAjB,iBAAiB,CAAoB;QAK7C,KAAI,CAAC,MAAM,GAAG,eAAe,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;;IAC3E,CAAC;IAED;;;OAGG;IACI,6EAAQ,GAAf,UAAgB,OAAiC;QAC7C,OAAO,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC;IAED,gBAAgB;IACF,sGAAiC,GAA/C,UACI,MAAc;;;;;;;wBAGuB,qBAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAC7D,sBAAsB,CACzB,EAAA;;wBAFK,UAAU,GAAgB,CAAC,SAEhC,CAAgB;wBACX,cAAc,GAAU,UAAU,CAAC,cAAc,CAAC;wBAChC,qBAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,MAAM,CAAC,EAAA;;wBAAvE,eAAe,GAAG,SAAqD;wBAEvE,kBAAkB,GAAG,EAAE;6BACxB,OAAO,CAAC,eAAe,CAAC;6BACxB,IAAI,CAAC,UAAC,EAAuB,EAAE,EAAuB;4BACnD,OAAC,EAAE,CAAC,KAAgB,CAAC,aAAa,CAAC,EAAE,CAAC,KAAe,CAAC;wBAAtD,CAAsD,CACzD,CAAC;wBACN,sBAAO,kBAAkB,EAAC;;;wBAE1B,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,CAAC;;;;;KAE1B;IAED,gBAAgB;IACF,uFAAkB,GAAhC,UACI,cAAqB,EACrB,MAAc;;;;;;4BAEmB,qBAAM,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAChF,cAAc,CAAC,GAAG,CACrB,EAAA;;wBAFK,QAAQ,GAAmB,SAEhC;wBAEK,gBAAgB,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAC,OAAO;4BACtD,OAAA,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,cAAmC,IAAK,OAAA,CAAC;gCAC3D,EAAE,EAAK,cAAc,CAAC,GAAG,SAAI,OAAO,CAAC,SAAS,SAAI,cAAc,CAAC,OAAS;gCAC1E,KAAK,EAAK,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,WAAM,cAAc,CAAC,OAAS;6BACpE,CAAC,EAH4D,CAG5D,CAAC;wBAHH,CAGG,CACN,CAAC;wBAEF,sBAAO,EAAE;iCACJ,OAAO,CAAC,gBAAgB,CAAC;iCACzB,MAAM,CAAC,UAAC,MAAM;gCACX,OAAA,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI;4BAAzE,CAAyE,CAC5E,EAAC;;;;KACT;IAhEL;QADC,kBAAkB,EAAE;yCAKW,eAAe;YACZ,kBAAkB;YAC5B,eAAe;YACR,sBAAsB;kEA0DrD;IAAD,iEAAC;CAAA,AAjED,CAAgE,0BAA0B,GAiEzF\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/PreviewDatapreviewCatalogDropdownPopulator.d.ts","writeByteOrderMark":false,"text":"import { CrossFrameEventService, DropdownPopulatorInterface, DropdownPopulatorPayload, GenericEditorOption, ICatalogService, LanguageService, ISharedDataService } from 'smarteditcommons';\r\n/**\r\n * Implementation of DropdownPopulatorInterface for catalog dropdown in\r\n * experience selector to populate the list of catalogs by making a REST call to retrieve the sites and then the catalogs based on the site.\r\n */\r\nexport declare class PreviewDatapreviewCatalogDropdownPopulator extends DropdownPopulatorInterface {\r\n    private catalogService;\r\n    private sharedDataService;\r\n    private l10nFn;\r\n    constructor(catalogService: ICatalogService, sharedDataService: ISharedDataService, languageService: LanguageService, crossFrameEventService: CrossFrameEventService);\r\n    /**\r\n     *  Returns a promise resolving to a list of site - catalogs to be displayed in the experience selector.\r\n     *\r\n     */\r\n    fetchAll(payload: DropdownPopulatorPayload): Promise<GenericEditorOption[]>;\r\n    /** @internal */\r\n    private initCatalogVersionDropdownChoices;\r\n    /** @internal */\r\n    private getDropdownChoices;\r\n}\r\n"}}
