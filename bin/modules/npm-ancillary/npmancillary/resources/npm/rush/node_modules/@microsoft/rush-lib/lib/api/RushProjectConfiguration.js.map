{"version":3,"file":"RushProjectConfiguration.js","sourceRoot":"","sources":["../../src/api/RushProjectConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Terminal } from '@rushstack/node-core-library';\r\nimport { ConfigurationFile, InheritanceType } from '@rushstack/heft-config-file';\r\nimport { RigConfig } from '@rushstack/rig-package';\r\n\r\nimport { RushConfigurationProject } from './RushConfigurationProject';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { CommandLineConfiguration } from './CommandLineConfiguration';\r\n\r\n/**\r\n * Describes the file structure for the \"<project root>/config/rush-project.json\" config file.\r\n */\r\ninterface IRushProjectJson {\r\n  /**\r\n   * A list of folder names under the project root that should be cached.\r\n   *\r\n   * These folders should not be tracked by git.\r\n   */\r\n  projectOutputFolderNames?: string[];\r\n\r\n  buildCacheOptions?: IBuildCacheOptionsJson;\r\n}\r\n\r\ninterface IBuildCacheOptionsJson extends IBuildCacheOptionsBase {\r\n  /**\r\n   * Allows for fine-grained control of cache for individual commands.\r\n   */\r\n  optionsForCommands?: ICacheOptionsForCommand[];\r\n}\r\n\r\nexport interface IBuildCacheOptionsBase {\r\n  /**\r\n   * Disable caching for this project. The project will never be restored from cache.\r\n   * This may be useful if this project affects state outside of its folder.\r\n   *\r\n   * This option is only used when the cloud build cache is enabled for the repo. You can set\r\n   * disableBuildCache=true to disable caching for a specific project. This is a useful workaround\r\n   * if that project's build scripts violate the assumptions of the cache, for example by writing\r\n   * files outside the project folder. Where possible, a better solution is to improve the build scripts\r\n   * to be compatible with caching.\r\n   */\r\n  disableBuildCache?: boolean;\r\n}\r\n\r\nexport interface IBuildCacheOptions extends IBuildCacheOptionsBase {\r\n  /**\r\n   * Allows for fine-grained control of cache for individual commands.\r\n   */\r\n  optionsForCommandsByName: Map<string, ICacheOptionsForCommand>;\r\n}\r\n\r\nexport interface ICacheOptionsForCommand {\r\n  /**\r\n   * The command name.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Disable caching for this command.\r\n   * This may be useful if this command for this project affects state outside of this project folder.\r\n   *\r\n   * This option is only used when the cloud build cache is enabled for the repo. You can set\r\n   * disableBuildCache=true to disable caching for a command in a specific project. This is a useful workaround\r\n   * if that project's build scripts violate the assumptions of the cache, for example by writing\r\n   * files outside the project folder. Where possible, a better solution is to improve the build scripts\r\n   * to be compatible with caching.\r\n   */\r\n  disableBuildCache?: boolean;\r\n}\r\n\r\n/**\r\n * Use this class to load the \"config/rush-project.json\" config file.\r\n *\r\n * This file provides project-specific configuration options.\r\n * @public\r\n */\r\nexport class RushProjectConfiguration {\r\n  private static _projectBuildCacheConfigurationFile: ConfigurationFile<IRushProjectJson> = new ConfigurationFile<IRushProjectJson>(\r\n    {\r\n      projectRelativeFilePath: `config/${RushConstants.rushProjectConfigFilename}`,\r\n      jsonSchemaPath: path.resolve(__dirname, '..', 'schemas', 'rush-project.schema.json'),\r\n      propertyInheritance: {\r\n        projectOutputFolderNames: {\r\n          inheritanceType: InheritanceType.append\r\n        },\r\n        buildCacheOptions: {\r\n          inheritanceType: InheritanceType.custom,\r\n          inheritanceFunction: (\r\n            current: IBuildCacheOptionsJson | undefined,\r\n            parent: IBuildCacheOptionsJson | undefined\r\n          ): IBuildCacheOptionsJson | undefined => {\r\n            if (!current) {\r\n              return parent;\r\n            } else if (!parent) {\r\n              return current;\r\n            } else {\r\n              return {\r\n                ...parent,\r\n                ...current,\r\n                optionsForCommands: [\r\n                  ...(parent.optionsForCommands || []),\r\n                  ...(current.optionsForCommands || [])\r\n                ]\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  );\r\n\r\n  public readonly project: RushConfigurationProject;\r\n\r\n  /**\r\n   * A list of folder names under the project root that should be cached.\r\n   *\r\n   * These folders should not be tracked by git.\r\n   */\r\n  public readonly projectOutputFolderNames?: string[];\r\n\r\n  /**\r\n   * Project-specific cache options.\r\n   */\r\n  public readonly cacheOptions: IBuildCacheOptions;\r\n\r\n  private constructor(project: RushConfigurationProject, rushProjectJson: IRushProjectJson) {\r\n    this.project = project;\r\n\r\n    this.projectOutputFolderNames = rushProjectJson.projectOutputFolderNames;\r\n\r\n    const optionsForCommandsByName: Map<string, ICacheOptionsForCommand> = new Map<\r\n      string,\r\n      ICacheOptionsForCommand\r\n    >();\r\n    if (rushProjectJson.buildCacheOptions?.optionsForCommands) {\r\n      for (const cacheOptionsForCommand of rushProjectJson.buildCacheOptions.optionsForCommands) {\r\n        optionsForCommandsByName.set(cacheOptionsForCommand.name, cacheOptionsForCommand);\r\n      }\r\n    }\r\n    this.cacheOptions = {\r\n      disableBuildCache: rushProjectJson.buildCacheOptions?.disableBuildCache,\r\n      optionsForCommandsByName\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Loads the rush-project.json data for the specified project.\r\n   */\r\n  public static async tryLoadForProjectAsync(\r\n    project: RushConfigurationProject,\r\n    repoCommandLineConfiguration: CommandLineConfiguration | undefined,\r\n    terminal: Terminal\r\n  ): Promise<RushProjectConfiguration | undefined> {\r\n    const rigConfig: RigConfig = await RigConfig.loadForProjectFolderAsync({\r\n      projectFolderPath: project.projectFolder\r\n    });\r\n\r\n    const rushProjectJson:\r\n      | IRushProjectJson\r\n      | undefined = await this._projectBuildCacheConfigurationFile.tryLoadConfigurationFileForProjectAsync(\r\n      terminal,\r\n      project.projectFolder,\r\n      rigConfig\r\n    );\r\n\r\n    if (rushProjectJson) {\r\n      RushProjectConfiguration._validateConfiguration(\r\n        project,\r\n        rushProjectJson,\r\n        repoCommandLineConfiguration,\r\n        terminal\r\n      );\r\n      return new RushProjectConfiguration(project, rushProjectJson);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private static _validateConfiguration(\r\n    project: RushConfigurationProject,\r\n    rushProjectJson: IRushProjectJson,\r\n    repoCommandLineConfiguration: CommandLineConfiguration | undefined,\r\n    terminal: Terminal\r\n  ): void {\r\n    const invalidFolderNames: string[] = [];\r\n    for (const projectOutputFolder of rushProjectJson.projectOutputFolderNames || []) {\r\n      if (projectOutputFolder.match(/[\\/\\\\]/)) {\r\n        invalidFolderNames.push(projectOutputFolder);\r\n      }\r\n    }\r\n\r\n    if (invalidFolderNames.length > 0) {\r\n      terminal.writeErrorLine(\r\n        `Invalid project configuration for project \"${project.packageName}\". Entries in ` +\r\n          '\"projectOutputFolderNames\" must not contain slashes and the following entries do: ' +\r\n          invalidFolderNames.join(', ')\r\n      );\r\n    }\r\n\r\n    const duplicateCommandNames: Set<string> = new Set<string>();\r\n    const invalidCommandNames: string[] = [];\r\n    if (rushProjectJson.buildCacheOptions?.optionsForCommands) {\r\n      const commandNames: Set<string> = new Set<string>([\r\n        RushConstants.buildCommandName,\r\n        RushConstants.rebuildCommandName\r\n      ]);\r\n      if (repoCommandLineConfiguration) {\r\n        for (const command of repoCommandLineConfiguration.commands) {\r\n          if (command.commandKind === RushConstants.bulkCommandKind) {\r\n            commandNames.add(command.name);\r\n          }\r\n        }\r\n      }\r\n\r\n      const alreadyEncounteredCommandNames: Set<string> = new Set<string>();\r\n      for (const cacheOptionsForCommand of rushProjectJson.buildCacheOptions.optionsForCommands) {\r\n        const commandName: string = cacheOptionsForCommand.name;\r\n        if (!commandNames.has(commandName)) {\r\n          invalidCommandNames.push(commandName);\r\n        } else if (alreadyEncounteredCommandNames.has(commandName)) {\r\n          duplicateCommandNames.add(commandName);\r\n        } else {\r\n          alreadyEncounteredCommandNames.add(commandName);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (invalidCommandNames.length > 0) {\r\n      terminal.writeErrorLine(\r\n        `Invalid project configuration fpr project \"${project.packageName}\". The following ` +\r\n          'command names in cacheOptions.optionsForCommands are not specified in this repo: ' +\r\n          invalidCommandNames.join(', ')\r\n      );\r\n    }\r\n\r\n    if (duplicateCommandNames.size > 0) {\r\n      terminal.writeErrorLine(\r\n        `Invalid project configuration fpr project \"${project.packageName}\". The following ` +\r\n          'command names in cacheOptions.optionsForCommands are specified more than once: ' +\r\n          Array.from(duplicateCommandNames).join(', ')\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}