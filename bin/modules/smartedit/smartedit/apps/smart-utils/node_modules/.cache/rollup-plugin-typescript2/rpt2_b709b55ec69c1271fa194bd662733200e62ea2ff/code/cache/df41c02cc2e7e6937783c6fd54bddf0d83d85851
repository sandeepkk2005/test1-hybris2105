{"code":"//# sourceMappingURL=i-rest-service.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/rest/i-reflectable.ts"],"map":"{\"version\":3,\"file\":\"i-rest-service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/rest/i-rest-service.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/rest/i-rest-service.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { Page, Pageable, Payload, Primitive, TypedMap } from '../../dtos';\r\nimport { IReflectable } from './i-reflectable';\r\nexport interface IRestOptions {\r\n    headers?: TypedMap<string>;\r\n}\r\nexport interface SearchParams {\r\n    [param: string]: Primitive | Primitive[];\r\n}\r\nexport interface BodyWithHeaders {\r\n    headers?: TypedMap<string>;\r\n}\r\n/**\r\n * @ngdoc interface\r\n * @name @smartutils.interfaces:IRestService\r\n *\r\n * @description\r\n * Common interface of smartedit REST services generated by calls to {@link @smartutils.interfaces:restServiceFactory restServiceFactory#get<T>}\r\n * IRestService<T> has strongly typed methods in both signature and return type\r\n * When used in the smartedit application (as opposed to smarteditContainer) calls are proxied to the smarteditContainer\r\n * in order to prevent cross-origin issues in the case where smartEdit and the embedded storefront are in different domains.\r\n */\r\nexport interface IRestService<T> extends IReflectable<T> {\r\n    readonly url?: string;\r\n    activateMetadata?(): void;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#getById\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     *\r\n     * @description\r\n     * Loads a component based on its identifier.\r\n     *\r\n     * @param {String} identifier The value of the object identifier.\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     * @returns {Object} A Promise of T\r\n     */\r\n    getById<S extends T = T>(identifier: string, options?: IRestOptions): Promise<S | null>;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#get\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     *\r\n     * @description\r\n     * Loads a unique component based on its identifier that must match the specified get parameters.\r\n     * <br/>The REST Service Factory evaluates placeholders in the URI, if any are provided, to verify if they\r\n     * match the search parameters.\r\n     *\r\n     * @param {object} searchParams The object that contains the query parameters, which are then mapped to the\r\n     * query string\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     *\r\n     * @returns {object} A Promise of T\r\n     */\r\n    get<S extends T = T>(searchParams?: SearchParams, options?: IRestOptions): Promise<S | null>;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#query\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     *\r\n     * @description\r\n     * Loads a list of components that match the specified search parameters.\r\n     * <br/>The REST service evaluates the placeholders in the URI, if any are provided, to verify if\r\n     * they match the search parameters.\r\n     *\r\n     * @param {object} searchParams The object that contains the query parameters, which are then mapped to the\r\n     * query string\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     *\r\n     * @returns {object} A Promise of T[]\r\n     */\r\n    query<S extends T = T>(searchParams?: SearchParams, options?: IRestOptions): Promise<S[]>;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#page\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     * @description\r\n     * To be called instead of {@link @smartutils.interfaces:IRestService#query query} when the list is wrapped by server in an object (ex: Page).\r\n     * <br/>The service will evaluate any placeholder in the URI with matching search params.\r\n     * @param {object} searchParams The object that contains the query parameters, which are then mapped to the\r\n     * query string\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     *\r\n     * @returns {object} a Promise of <Page<T>>\r\n     */\r\n    page<S extends Page<T>>(searchParams: Pageable, options?: IRestOptions): Promise<S>;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#update\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     *\r\n     * @description\r\n     * Updates a component.  It appends the value of the identifier to the URI.\r\n     *\r\n     * @param {object} payload The object to be updated. <br/>The promise will be rejected if the payload does not contain the identifier.\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     *\r\n     * @returns {object} A Promise of T\r\n     */\r\n    update<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<S>;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#patch\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     *\r\n     * @description\r\n     * Updates a component. It appends the value of the identifier to the URI.\r\n     *\r\n     * @param {object} payload The object to be updated. <br/>The promise will be rejected if the payload does not contain the identifier.\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     *\r\n     * @returns {object} Promise<T>\r\n     */\r\n    patch<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<S>;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#save\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     *\r\n     * @description\r\n     * Saves a component. It appends the value of the identifier to the URI.\r\n     *\r\n     * @param {object} payload The object to be saved.\r\n     * <br/>The promise will be rejected if the payload does not contain the identifier.\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     *\r\n     * @returns {object} A Promise of T\r\n     * to what the server returns.\r\n     */\r\n    save<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<S>;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.interfaces:IRestService#remove\r\n     * @methodOf @smartutils.interfaces:IRestService\r\n     *\r\n     * @description\r\n     * Deletes a component. It appends the value of the identifier to the URI.\r\n     *\r\n     * @param {object} payload The object to be updated.\r\n     * <br/>The promise will be rejected if the payload does not contain the identifier.\r\n     * @param {IRestOptions} options Options allowing to customize request\r\n     * @param {Object} options.headers Custom http headers.\r\n     *\r\n     * @returns {object} A Promise of void\r\n     */\r\n    remove<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<void>;\r\n    /**\r\n     * @description\r\n     * Query permissionswebservices APIs must use httpclient POST method, now it only used to query permissionswebservices\r\n     * <br/>The REST Service Factory evaluates placeholders in the URI, if any are provided, to verify if they\r\n     * match the search parameters.\r\n     */\r\n    queryByPost<S extends T = T>(payload: Payload, searchParams?: SearchParams, options?: IRestOptions): Promise<S | null>;\r\n}\r\n"}}
