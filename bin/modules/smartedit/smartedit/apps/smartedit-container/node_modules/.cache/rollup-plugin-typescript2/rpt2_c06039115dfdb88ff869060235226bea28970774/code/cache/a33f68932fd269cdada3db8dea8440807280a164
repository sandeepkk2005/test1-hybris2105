{"code":"import { __assign, __decorate, __metadata, __spreadArrays } from \"tslib\";\r\nimport * as lo from 'lodash';\r\nimport { objectUtils, stringUtils, CONFIGURATION_URI, Errors, LogService, RestServiceFactory, SeDowngradeService } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from './bootstrap/LoadConfigManagerService';\r\n/** @internal */\r\nvar /* @ngInject */ ConfigurationService = /** @class */ (function () {\r\n    function /* @ngInject */ ConfigurationService(logService, loadConfigManagerService, restServiceFactory) {\r\n        this.logService = logService;\r\n        this.loadConfigManagerService = loadConfigManagerService;\r\n        this.restServiceFactory = restServiceFactory;\r\n        // Constants\r\n        this.ABSOLUTE_URI_NOT_APPROVED = 'URI_EXCEPTION';\r\n        this.ABSOLUTE_URI_REGEX = /(\\\"[A-Za-z]+:\\/|\\/\\/)/;\r\n        this.configuration = [];\r\n        this.editorCRUDService = this.restServiceFactory.get(CONFIGURATION_URI, 'key');\r\n    }\r\n    /*\r\n     * The Add Entry method adds an entry to the list of configurations.\r\n     *\r\n     */\r\n    /* @ngInject */ ConfigurationService.prototype.addEntry = function () {\r\n        var item = { key: '', value: '', isNew: true, uuid: lo.uniqueId() };\r\n        this.configuration = __spreadArrays([item], (this.configuration || []));\r\n    };\r\n    /*\r\n     * The Remove Entry method deletes the specified entry from the list of configurations. The method does not delete the actual configuration, but just removes it from the array of configurations.\r\n     * The entry will be deleted when a user clicks the Submit button but if the entry is new we can are removing it from the configuration\r\n     *\r\n     * @param {Object} entry The object to be deleted\r\n     * @param {Object} configurationForm The form object which is an instance of {@link https://docs.angularjs.org/api/ng/type/form.FormController FormController}\r\n     * that provides methods to monitor and control the state of the form.\r\n     */\r\n    /* @ngInject */ ConfigurationService.prototype.removeEntry = function (entry, configurationForm) {\r\n        if (entry.isNew) {\r\n            this.configuration = this.configuration.filter(function (confEntry) { return !confEntry.isNew || confEntry.key !== entry.key; });\r\n        }\r\n        else {\r\n            configurationForm.form.markAsDirty();\r\n            entry.toDelete = true;\r\n        }\r\n    };\r\n    /*\r\n     * Method that returns a list of configurations by filtering out only those configurations whose 'toDelete' parameter is set to false.\r\n     *\r\n     * @returns {Object} A list of filtered configurations.\r\n     */\r\n    /* @ngInject */ ConfigurationService.prototype.filterConfiguration = function () {\r\n        return (this.configuration || []).filter(function (instance) { return !instance.toDelete; });\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.validateUserInput = function (entry) {\r\n        if (!entry.value) {\r\n            return;\r\n        }\r\n        entry.requiresUserCheck = !!entry.value.match(this.ABSOLUTE_URI_REGEX);\r\n    };\r\n    /*\r\n     * The Submit method saves the list of available configurations by making a REST call to a web service.\r\n     * The method is called when a user clicks the Submit button in the configuration editor.\r\n     *\r\n     * @param {Object} configurationForm The form object that is an instance of {@link https://docs.angularjs.org/api/ng/type/form.FormController FormController}.\r\n     * It provides methods to monitor and control the state of the form.\r\n     */\r\n    /* @ngInject */ ConfigurationService.prototype.submit = function (configurationForm) {\r\n        var _this = this;\r\n        if (!configurationForm.dirty || !this.isValid(configurationForm)) {\r\n            return Promise.reject([]);\r\n        }\r\n        configurationForm.form.markAsPristine();\r\n        return Promise.all(this.configuration.map(function (entry, i) {\r\n            try {\r\n                var payload = objectUtils.copy(entry);\r\n                delete payload.toDelete;\r\n                delete payload.errors;\r\n                delete payload.uuid;\r\n                var method = entry.toDelete === true\r\n                    ? 'remove'\r\n                    : payload.isNew === true\r\n                        ? 'save'\r\n                        : 'update';\r\n                payload.secured = false; // needed for yaas configuration service\r\n                delete payload.isNew;\r\n                switch (method) {\r\n                    case 'save':\r\n                        payload.value = _this.validate(payload);\r\n                        break;\r\n                    case 'update':\r\n                        payload.value = _this.validate(payload);\r\n                        break;\r\n                    case 'remove':\r\n                        break;\r\n                }\r\n                entry.hasErrors = false;\r\n                return _this.editorCRUDService[method](payload).then(function (entity, index, meth) {\r\n                    switch (meth) {\r\n                        case 'save':\r\n                            delete entity.isNew;\r\n                            break;\r\n                        case 'remove':\r\n                            this.configuration.splice(index, 1);\r\n                            break;\r\n                    }\r\n                }.bind(_this, entry, i, method), function () {\r\n                    _this.addValueError(entry, 'configurationform.save.error');\r\n                    return Promise.reject({});\r\n                });\r\n            }\r\n            catch (error) {\r\n                entry.hasErrors = true;\r\n                if (error instanceof Errors.ParseError) {\r\n                    _this.addValueError(entry, 'se.configurationform.json.parse.error');\r\n                    return Promise.reject({});\r\n                }\r\n            }\r\n        }));\r\n    };\r\n    /*\r\n     * The init method initializes the configuration editor and loads all the configurations so they can be edited.\r\n     *\r\n     * @param {Function} loadCallback The callback to be executed after loading the configurations.\r\n     */\r\n    /* @ngInject */ ConfigurationService.prototype.init = function (_loadCallback) {\r\n        this.loadCallback = _loadCallback || lo.noop;\r\n        return this.loadAndPresent();\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.reset = function (configurationForm) {\r\n        this.configuration = objectUtils.copy(this.pristine);\r\n        if (configurationForm) {\r\n            configurationForm.form.markAsPristine();\r\n        }\r\n        if (this.loadCallback) {\r\n            this.loadCallback();\r\n        }\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.addError = function (entry, type, message) {\r\n        entry.errors = entry.errors || {};\r\n        entry.errors[type] = entry.errors[type] || [];\r\n        entry.errors[type].push({\r\n            message: message\r\n        });\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.addKeyError = function (entry, message) {\r\n        this.addError(entry, 'keys', message);\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.addValueError = function (entry, message) {\r\n        this.addError(entry, 'values', message);\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.prettify = function (array) {\r\n        var _this = this;\r\n        var configuration = objectUtils.copy(array);\r\n        configuration.forEach(function (entry) {\r\n            try {\r\n                entry.value = JSON.stringify(JSON.parse(entry.value), null, 2);\r\n            }\r\n            catch (parseError) {\r\n                _this.addValueError(entry, 'se.configurationform.json.parse.error');\r\n            }\r\n        });\r\n        return configuration;\r\n    };\r\n    /**\r\n     * for editing purposes\r\n     */\r\n    /* @ngInject */ ConfigurationService.prototype.loadAndPresent = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            return _this.loadConfigManagerService.loadAsArray().then(function (response) {\r\n                _this.pristine = _this.prettify(response.map(function (item) { return (__assign(__assign({}, item), { uuid: lo.uniqueId() })); }));\r\n                _this.reset();\r\n                resolve();\r\n            }, function () {\r\n                _this.logService.log('load failed');\r\n                reject();\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.isValid = function (configurationForm) {\r\n        var _this = this;\r\n        this.configuration.forEach(function (entry) {\r\n            delete entry.errors;\r\n        });\r\n        if (configurationForm.invalid) {\r\n            this.configuration.forEach(function (entry) {\r\n                if (stringUtils.isBlank(entry.key)) {\r\n                    _this.addKeyError(entry, 'se.configurationform.required.entry.error');\r\n                    entry.hasErrors = true;\r\n                }\r\n                if (stringUtils.isBlank(entry.value)) {\r\n                    _this.addValueError(entry, 'se.configurationform.required.entry.error');\r\n                    entry.hasErrors = true;\r\n                }\r\n            });\r\n        }\r\n        return (configurationForm.valid &&\r\n            !this.configuration.reduce(function (confHolder, nextConfiguration) {\r\n                if (confHolder.keys.indexOf(nextConfiguration.key) > -1) {\r\n                    _this.addKeyError(nextConfiguration, 'se.configurationform.duplicate.entry.error');\r\n                    confHolder.errors = true;\r\n                }\r\n                else {\r\n                    confHolder.keys.push(nextConfiguration.key);\r\n                }\r\n                return confHolder;\r\n            }, {\r\n                keys: [],\r\n                errors: false\r\n            }).errors);\r\n    };\r\n    /* @ngInject */ ConfigurationService.prototype.validate = function (entry) {\r\n        try {\r\n            if (entry.requiresUserCheck && !entry.isCheckedByUser) {\r\n                throw new Error(this.ABSOLUTE_URI_NOT_APPROVED);\r\n            }\r\n            return JSON.stringify(JSON.parse(entry.value));\r\n        }\r\n        catch (parseError) {\r\n            throw new Errors.ParseError(entry.value);\r\n        }\r\n    };\r\n    /* @ngInject */ ConfigurationService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            LoadConfigManagerService,\r\n            RestServiceFactory])\r\n    ], /* @ngInject */ ConfigurationService);\r\n    return /* @ngInject */ ConfigurationService;\r\n}());\r\nexport { /* @ngInject */ ConfigurationService };\r\n//# sourceMappingURL=ConfigurationService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/forms@8.2.14_e9fbe5720e9434eb9ae0f6720f1ca3f4/node_modules/@angular/forms/forms.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/bootstrap/Configuration.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/bootstrap/LoadConfigManagerService.ts"],"map":"{\"version\":3,\"file\":\"ConfigurationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ConfigurationService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/ConfigurationService.d.ts","writeByteOrderMark":false,"text":"import { NgForm } from '@angular/forms';\r\nimport { LogService, RestServiceFactory } from 'smarteditcommons';\r\nimport { ConfigurationItem } from 'smarteditcontainer/services/bootstrap/Configuration';\r\nimport { LoadConfigManagerService } from './bootstrap/LoadConfigManagerService';\r\n/** @internal */\r\nexport declare class ConfigurationService {\r\n    private logService;\r\n    private loadConfigManagerService;\r\n    private restServiceFactory;\r\n    private readonly ABSOLUTE_URI_NOT_APPROVED;\r\n    private readonly ABSOLUTE_URI_REGEX;\r\n    private editorCRUDService;\r\n    private configuration;\r\n    private pristine;\r\n    private loadCallback;\r\n    constructor(logService: LogService, loadConfigManagerService: LoadConfigManagerService, restServiceFactory: RestServiceFactory);\r\n    addEntry(): void;\r\n    removeEntry(entry: ConfigurationItem, configurationForm: NgForm): void;\r\n    filterConfiguration(): ConfigurationItem[];\r\n    validateUserInput(entry: ConfigurationItem): void;\r\n    submit(configurationForm: NgForm): Promise<any[]>;\r\n    init(_loadCallback?: () => void): Promise<any>;\r\n    private reset;\r\n    private addError;\r\n    private addKeyError;\r\n    private addValueError;\r\n    private prettify;\r\n    /**\r\n     * for editing purposes\r\n     */\r\n    private loadAndPresent;\r\n    private isValid;\r\n    private validate;\r\n}\r\n"}}
