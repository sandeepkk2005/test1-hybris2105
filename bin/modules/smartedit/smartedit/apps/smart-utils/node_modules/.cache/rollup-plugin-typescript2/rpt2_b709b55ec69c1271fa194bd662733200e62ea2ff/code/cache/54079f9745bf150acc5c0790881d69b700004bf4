{"code":"/**\r\n * @ngdoc service\r\n * @name @smartutils.services:StringUtils\r\n *\r\n * @description\r\n * utility service around Strings.\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n        var _this = this;\r\n        /**\r\n         * @ngdoc service\r\n         * @name @smartutils.services:StringUtils#sanitize\r\n         * @methodOf @smartutils.services:StringUtils\r\n         *\r\n         * @description\r\n         * <b>escapes any harmful scripting from a string, leaves innocuous HTML untouched/b>\r\n         * @param {String} a string that needs to be sanitized.\r\n         *\r\n         * @returns {String} the sanitized string.\r\n         *\r\n         */\r\n        this.sanitize = function (str) {\r\n            /* The correct solution for this is to use Negative Lookbehind Regex expression which is available as part of ES2018. // str.replace(/(?:(?<!\\\\)([()]))/g, '\\\\$1')\r\n            But in order to support cross browser compatibility, the string is reversed and negative lookahead is used instead. */\r\n            return !_this.isBlank(str)\r\n                ? str\r\n                    .split('')\r\n                    .reverse()\r\n                    .join('')\r\n                    .replace(/(?:(([()])(?!\\\\)))/g, '$1\\\\')\r\n                    .split('')\r\n                    .reverse()\r\n                    .join('')\r\n                : str;\r\n        };\r\n        /**\r\n         * @ngdoc service\r\n         * @name @smartutils.services:StringUtils#encode\r\n         * @methodOf @smartutils.services:StringUtils\r\n         *\r\n         * @description\r\n         * will return a encoded value for any JSON object passed as argument\r\n         * @param {object} JSON object to be encoded\r\n         */\r\n        this.encode = function (object) {\r\n            /* first we use encodeURIComponent to get percent-encoded UTF-8,\r\n             * then we convert the percent encodings into raw bytes which\r\n             * can be fed into btoa.\r\n             * from https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\r\n             */\r\n            return btoa(encodeURIComponent(JSON.stringify(object)).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {\r\n                return String.fromCharCode(parseInt(p1, 16));\r\n            }));\r\n        };\r\n        /**\r\n         * @ngdoc service\r\n         * @name @smartutils.services:StringUtils#replaceAll\r\n         * @methodOf @smartutils.services:StringUtils\r\n         *\r\n         * @description\r\n         * will return a string where all matches for the string regexps keys passed in the substitutionMap will have been substituted by correspoing values in the substitutionMap\r\n         * @param {string} string the string to substitute keys in object to be encoded\r\n         * @param {TypedMap<string>} substitutionMap the map of string regexp to string substitution values\r\n         * @returns {string} the substituted string\r\n         */\r\n        this.replaceAll = function (str, substitutionMap) {\r\n            var regex = new RegExp(Object.keys(substitutionMap).join('|'), 'g');\r\n            return str.replace(regex, function (matched) {\r\n                return substitutionMap[matched];\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.services:StringUtils#isBlank\r\n     * @methodOf @smartutils.services:StringUtils\r\n     *\r\n     * @description\r\n     * <b>isBlank</b> will check if a given string is undefined or null or empty.\r\n     * - returns TRUE for undefined / null/ empty string\r\n     * - returns FALSE otherwise\r\n     *\r\n     * @param {String} inputString any input string.\r\n     *\r\n     * @returns {boolean} true if the string is null else false\r\n     */\r\n    StringUtils.prototype.isBlank = function (value) {\r\n        return (typeof value === 'undefined' ||\r\n            value === null ||\r\n            value === 'null' ||\r\n            value.toString().trim().length === 0);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:StringUtils#regExpFactory\r\n     * @methodOf @smartutils.services:StringUtils\r\n     *\r\n     * @description\r\n     * <b>regExpFactory</b> will convert a given pattern into a regular expression.\r\n     * This method will prepend and append a string with ^ and $ respectively replaces\r\n     * and wildcards (*) by proper regex wildcards.\r\n     *\r\n     * @param {String} pattern any string that needs to be converted to a regular expression.\r\n     *\r\n     * @returns {RegExp} a regular expression generated from the given string.\r\n     *\r\n     */\r\n    StringUtils.prototype.regExpFactory = function (pattern) {\r\n        var onlyAlphanumericsRegex = new RegExp(/^[a-zA-Z\\d]+$/i);\r\n        var antRegex = new RegExp(/^[a-zA-Z\\d\\*]+$/i);\r\n        var regexpKey;\r\n        if (onlyAlphanumericsRegex.test(pattern)) {\r\n            regexpKey = ['^', '$'].join(pattern);\r\n        }\r\n        else if (antRegex.test(pattern)) {\r\n            regexpKey = ['^', '$'].join(pattern.replace(/\\*/g, '.*'));\r\n        }\r\n        else {\r\n            regexpKey = pattern;\r\n        }\r\n        return new RegExp(regexpKey, 'g');\r\n    };\r\n    /*\r\n     * formats HTML outputs typically from Node.outerHTML to easy string comparison by:\r\n     * - remove empty lines\r\n     * - remove spaces between tags\r\n     * - normalize remainign spaces to a single one\r\n     *\r\n     */\r\n    StringUtils.prototype.formatHTML = function (rawHTML) {\r\n        return rawHTML\r\n            .replace(/^\\s*\\n/gm, '')\r\n            .replace(/\\>[\\t\\s]+\\</g, '><')\r\n            .replace(/[\\r\\n\\t\\s]+/g, ' ');\r\n    };\r\n    return StringUtils;\r\n}());\r\nexport { StringUtils };\r\nexport var stringUtils = new StringUtils();\r\n//# sourceMappingURL=string-utils.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"string-utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/string-utils.ts\"],\"names\":[],\"mappings\":\"AAQA;;;;;;GAMG;AACH;IAAA;QAAA,iBAyIC;QAnEG;;;;;;;;;;;WAWG;QACH,aAAQ,GAAG,UAAC,GAAW;YACnB;kIACsH;YACtH,OAAA,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC;gBACd,CAAC,CAAC,GAAG;qBACE,KAAK,CAAC,EAAE,CAAC;qBACT,OAAO,EAAE;qBACT,IAAI,CAAC,EAAE,CAAC;qBACR,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;qBACtC,KAAK,CAAC,EAAE,CAAC;qBACT,OAAO,EAAE;qBACT,IAAI,CAAC,EAAE,CAAC;gBACf,CAAC,CAAC,GAAG;QATT,CASS,CAAC;QAEd;;;;;;;;WAQG;QACH,WAAM,GAAG,UAAC,MAAW;YACjB;;;;eAIG;YACH,OAAA,IAAI,CACA,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAC9C,iBAAiB,EACjB,SAAS,YAAY,CAAC,KAAU,EAAE,EAAU;gBACxC,OAAO,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YACjD,CAAC,CACJ,CACJ;QAPD,CAOC,CAAC;QAEN;;;;;;;;;;WAUG;QACH,eAAU,GAAG,UAAC,GAAW,EAAE,eAAiC;YACxD,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;YACtE,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,OAAO;gBACvC,OAAO,eAAe,CAAC,OAAO,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IACN,CAAC;IAxIG;;;;;;;;;;;;;OAaG;IACH,6BAAO,GAAP,UAAQ,KAAU;QACd,OAAO,CACH,OAAO,KAAK,KAAK,WAAW;YAC5B,KAAK,KAAK,IAAI;YACd,KAAK,KAAK,MAAM;YAChB,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CACvC,CAAC;IACN,CAAC;IAED;;;;;;;;;;;;;;OAcG;IAEH,mCAAa,GAAb,UAAc,OAAe;QACzB,IAAM,sBAAsB,GAAG,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAC5D,IAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAEhD,IAAI,SAAS,CAAC;QACd,IAAI,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACtC,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxC;aAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC/B,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;SAC7D;aAAM;YACH,SAAS,GAAG,OAAO,CAAC;SACvB;QAED,OAAO,IAAI,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACH,gCAAU,GAAV,UAAW,OAAe;QACtB,OAAO,OAAO;aACT,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;aAC7B,OAAO,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;IACtC,CAAC;IAqEL,kBAAC;AAAD,CAAC,AAzID,IAyIC;;AAED,MAAM,CAAC,IAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/utils/string-utils.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { TypedMap } from '../dtos';\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:StringUtils\r\n *\r\n * @description\r\n * utility service around Strings.\r\n */\r\nexport declare class StringUtils {\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.services:StringUtils#isBlank\r\n     * @methodOf @smartutils.services:StringUtils\r\n     *\r\n     * @description\r\n     * <b>isBlank</b> will check if a given string is undefined or null or empty.\r\n     * - returns TRUE for undefined / null/ empty string\r\n     * - returns FALSE otherwise\r\n     *\r\n     * @param {String} inputString any input string.\r\n     *\r\n     * @returns {boolean} true if the string is null else false\r\n     */\r\n    isBlank(value: any): boolean;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:StringUtils#regExpFactory\r\n     * @methodOf @smartutils.services:StringUtils\r\n     *\r\n     * @description\r\n     * <b>regExpFactory</b> will convert a given pattern into a regular expression.\r\n     * This method will prepend and append a string with ^ and $ respectively replaces\r\n     * and wildcards (*) by proper regex wildcards.\r\n     *\r\n     * @param {String} pattern any string that needs to be converted to a regular expression.\r\n     *\r\n     * @returns {RegExp} a regular expression generated from the given string.\r\n     *\r\n     */\r\n    regExpFactory(pattern: string): RegExp;\r\n    formatHTML(rawHTML: string): string;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.services:StringUtils#sanitize\r\n     * @methodOf @smartutils.services:StringUtils\r\n     *\r\n     * @description\r\n     * <b>escapes any harmful scripting from a string, leaves innocuous HTML untouched/b>\r\n     * @param {String} a string that needs to be sanitized.\r\n     *\r\n     * @returns {String} the sanitized string.\r\n     *\r\n     */\r\n    sanitize: (str: string) => string;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.services:StringUtils#encode\r\n     * @methodOf @smartutils.services:StringUtils\r\n     *\r\n     * @description\r\n     * will return a encoded value for any JSON object passed as argument\r\n     * @param {object} JSON object to be encoded\r\n     */\r\n    encode: (object: any) => any;\r\n    /**\r\n     * @ngdoc service\r\n     * @name @smartutils.services:StringUtils#replaceAll\r\n     * @methodOf @smartutils.services:StringUtils\r\n     *\r\n     * @description\r\n     * will return a string where all matches for the string regexps keys passed in the substitutionMap will have been substituted by correspoing values in the substitutionMap\r\n     * @param {string} string the string to substitute keys in object to be encoded\r\n     * @param {TypedMap<string>} substitutionMap the map of string regexp to string substitution values\r\n     * @returns {string} the substituted string\r\n     */\r\n    replaceAll: (str: string, substitutionMap: TypedMap<string>) => string;\r\n}\r\nexport declare const stringUtils: StringUtils;\r\n"}}
