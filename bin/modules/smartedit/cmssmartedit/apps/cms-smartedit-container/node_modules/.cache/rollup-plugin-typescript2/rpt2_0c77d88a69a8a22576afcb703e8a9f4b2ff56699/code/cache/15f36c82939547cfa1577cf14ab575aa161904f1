{"code":"import { __awaiter, __decorate, __generator, __metadata, __spreadArrays } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { ICatalogService, IExperienceService, IStorageService, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * Provides functionality for Component Menu displayed from toolbar on Storefront.\r\n * For example it allows to determine Content Catalog Version based on which component within the menu are fetched.\r\n */\r\nvar /* @ngInject */ ComponentMenuService = /** @class */ (function () {\r\n    function /* @ngInject */ ComponentMenuService(catalogService, experienceService, storageService) {\r\n        this.catalogService = catalogService;\r\n        this.experienceService = experienceService;\r\n        this.storageService = storageService;\r\n        this.SELECTED_CATALOG_VERSION_COOKIE_NAME = 'se_catalogmenu_catalogversion_cookie';\r\n    }\r\n    /* @ngInject */ ComponentMenuService.prototype.hasMultipleContentCatalogs = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageContext, contentCatalogs, contentCatalog;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getPageContext()];\r\n                    case 1:\r\n                        pageContext = _a.sent();\r\n                        return [4 /*yield*/, this.getContentCatalogs()];\r\n                    case 2:\r\n                        contentCatalogs = _a.sent();\r\n                        contentCatalog = contentCatalogs.find(function (catalog) { return catalog.catalogId === pageContext.catalogId; });\r\n                        return [2 /*return*/, !!contentCatalog.parents && contentCatalog.parents.length > 0];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method is used to retrieve the content catalogs of the site in the page context.\r\n     */\r\n    /* @ngInject */ ComponentMenuService.prototype.getContentCatalogs = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageContext;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getPageContext()];\r\n                    case 1:\r\n                        pageContext = _a.sent();\r\n                        return [2 /*return*/, pageContext ? this.catalogService.getContentCatalogsForSite(pageContext.siteId) : []];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    /* @ngInject */ ComponentMenuService.prototype.getValidContentCatalogVersions = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageContext, contentCatalogs, catalogVersions, contentCatalog, parentCatalogVersions;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getPageContext()];\r\n                    case 1:\r\n                        pageContext = _a.sent();\r\n                        return [4 /*yield*/, this.getContentCatalogs()];\r\n                    case 2:\r\n                        contentCatalogs = _a.sent();\r\n                        catalogVersions = [];\r\n                        contentCatalog = contentCatalogs.find(function (catalog) { return catalog.catalogId === pageContext.catalogId; });\r\n                        catalogVersions.push(this.getActiveOrCurrentVersionForCatalog(pageContext, contentCatalog));\r\n                        parentCatalogVersions = contentCatalog.parents.map(function (catalog) {\r\n                            return _this.getActiveOrCurrentVersionForCatalog(pageContext, catalog);\r\n                        });\r\n                        catalogVersions = __spreadArrays(parentCatalogVersions, catalogVersions);\r\n                        return [2 /*return*/, catalogVersions];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // --------------------------------------------------------------------------------------------------\r\n    // Cookie Management Methods\r\n    // --------------------------------------------------------------------------------------------------\r\n    /* @ngInject */ ComponentMenuService.prototype.getInitialCatalogVersion = function (catalogVersions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var rawValue, selectedCatalogVersionId, selectedCatalogVersion;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.storageService.getValueFromLocalStorage(this.SELECTED_CATALOG_VERSION_COOKIE_NAME, false)];\r\n                    case 1:\r\n                        rawValue = _a.sent();\r\n                        selectedCatalogVersionId = typeof rawValue === 'string' ? rawValue : null;\r\n                        selectedCatalogVersion = catalogVersions.find(function (catalogVersion) { return catalogVersion.id === selectedCatalogVersionId; });\r\n                        return [2 /*return*/, selectedCatalogVersion\r\n                                ? selectedCatalogVersion\r\n                                : catalogVersions[catalogVersions.length - 1]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentMenuService.prototype.persistCatalogVersion = function (catalogVersionId) {\r\n        return this.storageService.setValueInLocalStorage(this.SELECTED_CATALOG_VERSION_COOKIE_NAME, catalogVersionId, false);\r\n    };\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    /* @ngInject */ ComponentMenuService.prototype.getActiveOrCurrentVersionForCatalog = function (pageContext, catalog) {\r\n        var catalogVersion = catalog.versions.find(function (version) {\r\n            if (pageContext.catalogId === catalog.catalogId) {\r\n                return pageContext.catalogVersion === version.version;\r\n            }\r\n            return version.active;\r\n        });\r\n        return {\r\n            isCurrentCatalog: pageContext.catalogVersion === catalogVersion.version,\r\n            catalogName: catalog.name ? catalog.name : catalog.catalogName,\r\n            catalogId: catalog.catalogId,\r\n            catalogVersionId: catalogVersion.version,\r\n            id: catalogVersion.uuid\r\n        };\r\n    };\r\n    /* @ngInject */ ComponentMenuService.prototype.getPageContext = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var experience;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];\r\n                    case 1:\r\n                        experience = _a.sent();\r\n                        return [2 /*return*/, experience.pageContext];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentMenuService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [ICatalogService,\r\n            IExperienceService,\r\n            IStorageService])\r\n    ], /* @ngInject */ ComponentMenuService);\r\n    return /* @ngInject */ ComponentMenuService;\r\n}());\r\nexport { /* @ngInject */ ComponentMenuService };\r\n//# sourceMappingURL=ComponentMenuService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ComponentMenuService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/cmsComponents/componentMenu/services/ComponentMenuService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/cmsComponents/componentMenu/services/ComponentMenuService.d.ts","writeByteOrderMark":false,"text":"import { IBaseCatalog, ICatalogService, IExperienceService, IStorageService, TypedMap } from 'smarteditcommons';\r\nexport interface CatalogVersion {\r\n    isCurrentCatalog: boolean;\r\n    catalogName: TypedMap<string>;\r\n    catalogId: string;\r\n    catalogVersionId: string;\r\n    id: string;\r\n}\r\n/**\r\n * Provides functionality for Component Menu displayed from toolbar on Storefront.\r\n * For example it allows to determine Content Catalog Version based on which component within the menu are fetched.\r\n */\r\nexport declare class ComponentMenuService {\r\n    private catalogService;\r\n    private experienceService;\r\n    private storageService;\r\n    private readonly SELECTED_CATALOG_VERSION_COOKIE_NAME;\r\n    constructor(catalogService: ICatalogService, experienceService: IExperienceService, storageService: IStorageService);\r\n    hasMultipleContentCatalogs(): Promise<boolean>;\r\n    /**\r\n     * This method is used to retrieve the content catalogs of the site in the page context.\r\n     */\r\n    getContentCatalogs(): Promise<IBaseCatalog[]>;\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    getValidContentCatalogVersions(): Promise<CatalogVersion[]>;\r\n    getInitialCatalogVersion(catalogVersions: CatalogVersion[]): Promise<CatalogVersion>;\r\n    persistCatalogVersion(catalogVersionId: string): Promise<void>;\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    private getActiveOrCurrentVersionForCatalog;\r\n    private getPageContext;\r\n}\r\n"}}
