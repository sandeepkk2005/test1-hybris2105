{"code":"//# sourceMappingURL=interfaces.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"interfaces.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/select/interfaces.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/select/interfaces.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\nimport { Page } from '@smart/utils';\r\nimport { TypedMap } from '../../dtos';\r\n/** Either `label` or `name` must be provided */\r\nexport interface SelectItem {\r\n    id: string;\r\n    uid?: string;\r\n    label?: TypedMap<string> | string;\r\n    name?: TypedMap<string> | string;\r\n}\r\nexport declare type FetchPageStrategy<T> = (search?: string, pageSize?: number, currentPage?: number) => angular.IPromise<Page<T>> | Promise<Page<T>>;\r\nexport declare type FetchAllStrategy<T> = (mask?: string) => angular.IPromise<T[]> | Promise<T[]>;\r\nexport interface FetchStrategy<T = SelectItem> {\r\n    fetchAll?: FetchAllStrategy<T>;\r\n    fetchPage?: FetchPageStrategy<T>;\r\n    fetchEntity?: (id: string) => angular.IPromise<T> | Promise<T>;\r\n    fetchEntities?: (ids?: string[]) => angular.IPromise<T[]> | Promise<T[]>;\r\n}\r\nexport declare type SelectDisableChoice<T> = (item: T) => boolean;\r\nexport declare type SelectReset = (forceReset?: boolean) => void;\r\nexport declare type SelectKeyup = (event: Event, search: string) => void;\r\nexport declare type SelectOnChange = () => void;\r\nexport declare type SelectOnRemove<T> = (item: T, model: string) => void;\r\nexport declare type SelectOnSelect<T> = (item: T, model: string) => void;\r\n/**\r\n * The Select Component api object exposing public functionality\r\n */\r\nexport interface SelectApi {\r\n    /**\r\n     * A method that sets the validation state of the selector\r\n     *\r\n     * @param state A validation state message type constant. See `smarteditconstants.VALIDATION_MESSAGE_TYPES` for more information.\r\n     */\r\n    setValidationState(state: string): void;\r\n    /** A method that resets the validation state to default */\r\n    resetValidationState(): void;\r\n}\r\n"}}
