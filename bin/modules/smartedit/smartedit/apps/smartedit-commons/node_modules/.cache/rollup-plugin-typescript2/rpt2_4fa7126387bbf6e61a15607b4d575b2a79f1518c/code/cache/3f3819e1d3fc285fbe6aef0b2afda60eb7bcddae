{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/* forbiddenNameSpaces angular.module:false */\r\nimport * as angular from 'angular';\r\nimport * as lodash from 'lodash';\r\nimport '../sliderPanel.scss';\r\nimport { SeComponent } from '../../../di';\r\nimport { SliderPanelServiceFactory } from '../SliderPanelServiceFactory';\r\n/**\r\n * This object defines injectable Angular constants that store the CSS class names used in the controller to define the\r\n * rendering and animation of the slider panel.\r\n */\r\nexport var CSS_CLASSNAMES = {\r\n    /**\r\n     * The class name applied to the slide panel container to trigger the sliding action in the CSS animation.\r\n     */\r\n    SLIDERPANEL_ANIMATED: 'sliderpanel--animated',\r\n    /**\r\n     * A common prefix for the class names that defines how the content of the slider panel is to be rendered.\r\n     */\r\n    SLIDERPANEL_SLIDEPREFIX: 'sliderpanel--slidefrom'\r\n};\r\n/**\r\n * # Module\r\n *\r\n * **Deprecated since 2005, use {@link SliderPanelModule}.**\r\n *\r\n * This module defines the slider panel AngularJS component and its associated constants and controller.\r\n *\r\n * ## Basic Implementation\r\n *\r\n * To define a new slider panel, you must make some basic modifications to your AngularJS module and controller, as well\r\n * as to your HTML template.\r\n *\r\n * ### AngularJS Module\r\n *\r\n * You must add the sliderPanelModule as a dependency to your AngularJS module.\r\n *\r\n *      angular.module('yourApp', ['sliderPanelModule']) { ... }\r\n *\r\n *\r\n * ### AngularJS Controller\r\n *\r\n * Within the AngularJS controller, you must add a function to be instantiated so that the controller will trigger the\r\n * display of the slider panel.\r\n *\r\n *\r\n *      angular.module('yourApp', ['sliderPanelModule'])\r\n *          .controller('yourController', function() {\r\n *              ...\r\n *              this.showSliderPanel = function() {};\r\n *              ...\r\n *          });\r\n *\r\n * ### HTML template\r\n *\r\n * To include HTML content in the slider panel, you must embed the HTML content in a `<y-slider-panel> </y-slider-panel>` tag.<br />\r\n * For more information, see the definition of the component.\r\n *\r\n *\r\n *      <y-slider-panel data-slider-panel-show=\"$ctrl.sliderPanelShow\">\r\n *          <content>\r\n *              any HTML content\r\n *          </content>\r\n *      </y-slider-panel>\r\n *\r\n * You can then make the slider panel visible by calling the \"Show Slider Panel\" function defined in the associated controller; for example:\r\n *\r\n *\r\n *      <button class=\"btn btn-default\" ng-click=\"$ctrl.sliderPanelShow();\">\r\n *          Show Slider Panel\r\n *      </button>\r\n *\r\n * ## Advanced Configurations\r\n *\r\n * A default set of configurations is applied to all slider panels. You can overwrite and update the default configuration.\r\n *\r\n * To update the configuration of a specific slider panel, you must instantiate a JSON object that contains the expected\r\n * configuration in the AngularJS controller and provide it to the slider panel controller using the HTML template, for example:\r\n *\r\n *\r\n *      <y-slider-panel ... data-slider-panel-configuration=\"$ctrl.sliderPanelConfiguration\">\r\n *\r\n * If you define this type of configuration set, SmartEdit will automatically merge it with the slider panel's default configuration.\r\n * For information about the available settings, see the SliderPanelService.getNewServiceInstance method.\r\n *\r\n * # Component\r\n *\r\n * **Deprecated since 2005, use {@link SliderPanelComponent}.**\r\n *\r\n * ### Parameters\r\n *\r\n *\r\n * `dataSliderPanelConfiguration` - (optional) A JSON object containing the configuration to be applied on slider panel.\r\n *\r\n * `dataSliderPanelHide` - (optional) A function shared in a two ways binding by the main controller and the slider panel and used to trigger the hiding of the slider panel.\r\n *\r\n * `dataSliderPanelShow` - A function shared in a two ways binding by the main controller and the slider panel and used to trigger the display of the slider panel.\r\n *\r\n * The ySliderPanel AngularJS component allows for the dynamic display of any HTML content on a sliding panel.\r\n *\r\n * @deprecated\r\n */\r\nvar /* @ngInject */ YSliderPanelComponent = /** @class */ (function () {\r\n    function /* @ngInject */ YSliderPanelComponent($animate, $element, $timeout, $window, yjQuery, sliderPanelServiceFactory) {\r\n        this.$animate = $animate;\r\n        this.$element = $element;\r\n        this.$timeout = $timeout;\r\n        this.$window = $window;\r\n        this.yjQuery = yjQuery;\r\n        this.sliderPanelServiceFactory = sliderPanelServiceFactory;\r\n        this.inlineStyling = { container: {}, content: {} };\r\n    }\r\n    /* @ngInject */ YSliderPanelComponent.prototype.$onInit = function () {\r\n        var _this = this;\r\n        this.isShown = false;\r\n        this.uniqueId = lodash.uniqueId();\r\n        // setting new instance of slider panel service\r\n        this.sliderPanelService = this.sliderPanelServiceFactory.getNewServiceInstance(this.$element, this.$window, this.sliderPanelConfiguration);\r\n        // variables made available on the html template\r\n        this.sliderPanelConfiguration = this.sliderPanelService.sliderPanelConfiguration;\r\n        this.slideClassName =\r\n            CSS_CLASSNAMES.SLIDERPANEL_SLIDEPREFIX + this.sliderPanelConfiguration.slideFrom;\r\n        this.inlineStyling = {\r\n            container: this.sliderPanelService.inlineStyling.container,\r\n            content: this.sliderPanelService.inlineStyling.content\r\n        };\r\n        this.sliderPanelShow = function () { return _this.showSlider(); };\r\n        this.sliderPanelHide = function () { return _this.hideSlider(); };\r\n        this.sliderPanelDismissAction =\r\n            this.sliderPanelConfiguration.modal &&\r\n                this.sliderPanelConfiguration.modal.dismiss &&\r\n                this.sliderPanelConfiguration.modal.dismiss.onClick\r\n                ? this.sliderPanelConfiguration.modal.dismiss.onClick\r\n                : this.hideSlider;\r\n        // applying event handler for screen resize\r\n        this.addScreenResizeEventHandler();\r\n        if (this.sliderPanelConfiguration.displayedByDefault) {\r\n            this.showSlider();\r\n        }\r\n    };\r\n    /* @ngInject */ YSliderPanelComponent.prototype.$onDestroy = function () {\r\n        this.yjQuery(window).off('resize.doResize');\r\n    };\r\n    /* @ngInject */ YSliderPanelComponent.prototype.hideSlider = function () {\r\n        var _this = this;\r\n        return this.$animate\r\n            .removeClass(this.$element, CSS_CLASSNAMES.SLIDERPANEL_ANIMATED)\r\n            .then(function () {\r\n            _this.isShown = false;\r\n        });\r\n    };\r\n    /* @ngInject */ YSliderPanelComponent.prototype.showSlider = function () {\r\n        var _this = this;\r\n        // container inline styling\r\n        this.sliderPanelService.updateContainerInlineStyling(false);\r\n        this.inlineStyling.container = this.sliderPanelService.inlineStyling.container;\r\n        // container greyed out overlay\r\n        var isSecondarySliderPanel = false;\r\n        angular.forEach(angular.element('y-slider-panel.sliderpanel--animated .se-slider-panel-container'), function (sliderPanelContainer) {\r\n            var container = angular.element(sliderPanelContainer);\r\n            if (!isSecondarySliderPanel) {\r\n                if (container.css('height') === _this.inlineStyling.container.height &&\r\n                    container.css('width') === _this.inlineStyling.container.width &&\r\n                    container.css('left') === _this.inlineStyling.container.left &&\r\n                    container.css('top') === _this.inlineStyling.container.top) {\r\n                    isSecondarySliderPanel = true;\r\n                }\r\n            }\r\n        });\r\n        // if no related configuration has been set, the no greyed out overlay is set to true for all secondary slider panels.\r\n        this.sliderPanelConfiguration.noGreyedOutOverlay =\r\n            typeof this.sliderPanelConfiguration.noGreyedOutOverlay === 'boolean'\r\n                ? this.sliderPanelConfiguration.noGreyedOutOverlay\r\n                : isSecondarySliderPanel;\r\n        // triggering slider panel display\r\n        this.isShown = true;\r\n        return this.$animate.addClass(this.$element, CSS_CLASSNAMES.SLIDERPANEL_ANIMATED);\r\n    };\r\n    /* @ngInject */ YSliderPanelComponent.prototype.isSaveDisabled = function () {\r\n        if (this.sliderPanelConfiguration.modal &&\r\n            this.sliderPanelConfiguration.modal.save &&\r\n            this.sliderPanelConfiguration.modal.save.isDisabledFn) {\r\n            return this.sliderPanelConfiguration.modal.save.isDisabledFn();\r\n        }\r\n        return false;\r\n    };\r\n    /* @ngInject */ YSliderPanelComponent.prototype.addScreenResizeEventHandler = function () {\r\n        var _this = this;\r\n        this.yjQuery(window).on('resize.sliderPanelRedraw_' + this.uniqueId, function () {\r\n            if (_this.isShown) {\r\n                _this.$timeout(function () {\r\n                    _this.sliderPanelService.updateContainerInlineStyling(true);\r\n                    _this.inlineStyling.container = _this.sliderPanelService.inlineStyling.container;\r\n                });\r\n            }\r\n        });\r\n    };\r\n    /* @ngInject */ YSliderPanelComponent = __decorate([\r\n        SeComponent({\r\n            selector: 'y-slider-panel',\r\n            templateUrl: 'sliderPanelTemplate.html',\r\n            transclude: true,\r\n            inputs: ['sliderPanelConfiguration', 'sliderPanelHide:=', 'sliderPanelShow:=']\r\n        }),\r\n        __metadata(\"design:paramtypes\", [Object, Object, Function, Object, Function, SliderPanelServiceFactory])\r\n    ], /* @ngInject */ YSliderPanelComponent);\r\n    return /* @ngInject */ YSliderPanelComponent;\r\n}());\r\nexport { /* @ngInject */ YSliderPanelComponent };\r\n//# sourceMappingURL=sliderPanel.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/sliderPanel/interfaces.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/sliderPanel/SliderPanelService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/sliderPanel/SliderPanelServiceFactory.ts"],"map":"{\"version\":3,\"file\":\"sliderPanel.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/sliderPanel/legacy/sliderPanel.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/sliderPanel/legacy/sliderPanel.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular-animate\" />\r\n/// <reference types=\"angular-mocks\" />\r\n/// <reference types=\"jquery\" />\r\n/// <reference types=\"eonasdan-bootstrap-datetimepicker\" />\r\nimport * as angular from 'angular';\r\nimport '../sliderPanel.scss';\r\nimport { SliderPanelConfiguration } from '../interfaces';\r\nimport { SliderPanelServiceFactory } from '../SliderPanelServiceFactory';\r\n/**\r\n * This object defines injectable Angular constants that store the CSS class names used in the controller to define the\r\n * rendering and animation of the slider panel.\r\n */\r\nexport declare const CSS_CLASSNAMES: {\r\n    /**\r\n     * The class name applied to the slide panel container to trigger the sliding action in the CSS animation.\r\n     */\r\n    SLIDERPANEL_ANIMATED: string;\r\n    /**\r\n     * A common prefix for the class names that defines how the content of the slider panel is to be rendered.\r\n     */\r\n    SLIDERPANEL_SLIDEPREFIX: string;\r\n};\r\n/**\r\n * # Module\r\n *\r\n * **Deprecated since 2005, use {@link SliderPanelModule}.**\r\n *\r\n * This module defines the slider panel AngularJS component and its associated constants and controller.\r\n *\r\n * ## Basic Implementation\r\n *\r\n * To define a new slider panel, you must make some basic modifications to your AngularJS module and controller, as well\r\n * as to your HTML template.\r\n *\r\n * ### AngularJS Module\r\n *\r\n * You must add the sliderPanelModule as a dependency to your AngularJS module.\r\n *\r\n *      angular.module('yourApp', ['sliderPanelModule']) { ... }\r\n *\r\n *\r\n * ### AngularJS Controller\r\n *\r\n * Within the AngularJS controller, you must add a function to be instantiated so that the controller will trigger the\r\n * display of the slider panel.\r\n *\r\n *\r\n *      angular.module('yourApp', ['sliderPanelModule'])\r\n *          .controller('yourController', function() {\r\n *              ...\r\n *              this.showSliderPanel = function() {};\r\n *              ...\r\n *          });\r\n *\r\n * ### HTML template\r\n *\r\n * To include HTML content in the slider panel, you must embed the HTML content in a `<y-slider-panel> </y-slider-panel>` tag.<br />\r\n * For more information, see the definition of the component.\r\n *\r\n *\r\n *      <y-slider-panel data-slider-panel-show=\"$ctrl.sliderPanelShow\">\r\n *          <content>\r\n *              any HTML content\r\n *          </content>\r\n *      </y-slider-panel>\r\n *\r\n * You can then make the slider panel visible by calling the \"Show Slider Panel\" function defined in the associated controller; for example:\r\n *\r\n *\r\n *      <button class=\"btn btn-default\" ng-click=\"$ctrl.sliderPanelShow();\">\r\n *          Show Slider Panel\r\n *      </button>\r\n *\r\n * ## Advanced Configurations\r\n *\r\n * A default set of configurations is applied to all slider panels. You can overwrite and update the default configuration.\r\n *\r\n * To update the configuration of a specific slider panel, you must instantiate a JSON object that contains the expected\r\n * configuration in the AngularJS controller and provide it to the slider panel controller using the HTML template, for example:\r\n *\r\n *\r\n *      <y-slider-panel ... data-slider-panel-configuration=\"$ctrl.sliderPanelConfiguration\">\r\n *\r\n * If you define this type of configuration set, SmartEdit will automatically merge it with the slider panel's default configuration.\r\n * For information about the available settings, see the SliderPanelService.getNewServiceInstance method.\r\n *\r\n * # Component\r\n *\r\n * **Deprecated since 2005, use {@link SliderPanelComponent}.**\r\n *\r\n * ### Parameters\r\n *\r\n *\r\n * `dataSliderPanelConfiguration` - (optional) A JSON object containing the configuration to be applied on slider panel.\r\n *\r\n * `dataSliderPanelHide` - (optional) A function shared in a two ways binding by the main controller and the slider panel and used to trigger the hiding of the slider panel.\r\n *\r\n * `dataSliderPanelShow` - A function shared in a two ways binding by the main controller and the slider panel and used to trigger the display of the slider panel.\r\n *\r\n * The ySliderPanel AngularJS component allows for the dynamic display of any HTML content on a sliding panel.\r\n *\r\n * @deprecated\r\n */\r\nexport declare class YSliderPanelComponent {\r\n    private $animate;\r\n    private $element;\r\n    private $timeout;\r\n    private $window;\r\n    private yjQuery;\r\n    private sliderPanelServiceFactory;\r\n    sliderPanelConfiguration: SliderPanelConfiguration;\r\n    sliderPanelHide: () => angular.IPromise<any>;\r\n    sliderPanelShow: () => angular.IPromise<any>;\r\n    isShown: boolean;\r\n    sliderPanelDismissAction: () => void;\r\n    slideClassName: string;\r\n    private sliderPanelService;\r\n    private uniqueId;\r\n    private inlineStyling;\r\n    constructor($animate: angular.animate.IAnimateService, $element: JQuery, $timeout: angular.ITimeoutService, $window: angular.IWindowService, yjQuery: JQueryStatic, sliderPanelServiceFactory: SliderPanelServiceFactory);\r\n    $onInit(): void;\r\n    $onDestroy(): void;\r\n    hideSlider(): angular.IPromise<any>;\r\n    showSlider(): angular.IPromise<any>;\r\n    isSaveDisabled(): boolean;\r\n    private addScreenResizeEventHandler;\r\n}\r\n"}}
