{"code":"//# sourceMappingURL=abstract-form.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/forms@8.2.14_e9fbe5720e9434eb9ae0f6720f1ca3f4/node_modules/@angular/forms/forms.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/models/input-properties.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/models/interfaces.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/models/validator-parameters.ts"],"map":"{\"version\":3,\"file\":\"abstract-form.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modules/form-builder/models/abstract-form.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/modules/form-builder/models/abstract-form.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { InputProperties, InputPropertyChange } from './input-properties';\r\nimport { ComponentType } from './interfaces';\r\nimport { ValidatorParameters } from './validator-parameters';\r\nexport interface AbstractForm extends AbstractControl {\r\n    /**\r\n     * Defines the component used to render the form\r\n     */\r\n    readonly component: ComponentType;\r\n    /**\r\n     * Inputs to be set onto the the dynamic form components.\r\n     */\r\n    readonly inputs: InputProperties;\r\n    /**\r\n     * Listen onto any property changes triggered by 'setInput' method.\r\n     *\r\n     * @type {Observable<InputPropertyChange>}\r\n     */\r\n    readonly inputChanges: Observable<InputPropertyChange>;\r\n    /**\r\n     * validatorParams` holds data to the synch and\r\n     * asynch validators configuration for any\r\n     * FormField, FormGroup and FormList.\r\n     */\r\n    readonly validatorParams: ValidatorParameters;\r\n    /**\r\n     * Used to determine if current form property is permanent. If\r\n     * property does not persist then it will not be part of the\r\n     * generated object model.\r\n     */\r\n    readonly persist: boolean;\r\n    /**\r\n     * Get mapped values of fields to be persisted.\r\n     */\r\n    getPersistedValue(): any;\r\n    /**\r\n     * Sets property and marks components for changes if property is decorated\r\n     * with FormProperty.\r\n     *\r\n     * @param {keyof T} key\r\n     * @param {T[keyof T]} value\r\n     */\r\n    setInput<T>(key: keyof T, value: T[keyof T]): void;\r\n    /**\r\n     * Retrieves a property.\r\n     *\r\n     * @param {keyof T} key\r\n     * @returns {T[keyof T] | undefined}\r\n     */\r\n    getInput<T>(key: keyof T): T[keyof T] | undefined;\r\n}\r\n"}}
