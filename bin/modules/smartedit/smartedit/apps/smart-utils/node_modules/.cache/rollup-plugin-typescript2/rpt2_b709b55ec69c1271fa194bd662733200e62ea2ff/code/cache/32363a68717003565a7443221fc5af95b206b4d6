{"code":"/**\r\n * @ngdoc object\r\n * @name @smartutils.object:SIMPLE_RETRY_DEFAULT_SETTING\r\n *\r\n * @description\r\n * The setting object to be used as default values for retry.\r\n */\r\nexport var SIMPLE_RETRY_DEFAULT_SETTING = {\r\n    MAX_ATTEMPT: 5,\r\n    MIN_BACKOFF: 0,\r\n    RETRY_INTERVAL: 500\r\n};\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:simpleRetry\r\n * @description\r\n * When used by a retry strategy, this service could provide a simple fixed delay time to be used by the strategy before the next request is sent. The service also provides functionality to check if it is possible to perform a next retry.\r\n */\r\nvar SimpleRetry = /** @class */ (function () {\r\n    function SimpleRetry() {\r\n    }\r\n    SimpleRetry.prototype.calculateNextDelay = function (retryInterval, minBackoff) {\r\n        minBackoff = minBackoff || SIMPLE_RETRY_DEFAULT_SETTING.MIN_BACKOFF;\r\n        retryInterval = retryInterval || SIMPLE_RETRY_DEFAULT_SETTING.RETRY_INTERVAL;\r\n        var waveShield = minBackoff + Math.random();\r\n        return retryInterval + waveShield;\r\n    };\r\n    SimpleRetry.prototype.canRetry = function (attemptCount, _maxAttempt) {\r\n        var maxAttempt = _maxAttempt || SIMPLE_RETRY_DEFAULT_SETTING.MAX_ATTEMPT;\r\n        return attemptCount <= maxAttempt;\r\n    };\r\n    return SimpleRetry;\r\n}());\r\nexport { SimpleRetry };\r\n//# sourceMappingURL=simple-retry.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/interceptors/errors/retries/retryPolicies/i-retry.ts"],"map":"{\"version\":3,\"file\":\"simple-retry.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/services/interceptors/errors/retries/retryPolicies/simple-retry.ts\"],\"names\":[],\"mappings\":\"AAQA;;;;;;GAMG;AACH,MAAM,CAAC,IAAM,4BAA4B,GAAG;IACxC,WAAW,EAAE,CAAC;IACd,WAAW,EAAE,CAAC;IACd,cAAc,EAAE,GAAG;CACtB,CAAC;AAEF;;;;;GAKG;AACH;IAAA;IAaA,CAAC;IAZG,wCAAkB,GAAlB,UAAmB,aAAsB,EAAE,UAAmB;QAC1D,UAAU,GAAG,UAAU,IAAI,4BAA4B,CAAC,WAAW,CAAC;QACpE,aAAa,GAAG,aAAa,IAAI,4BAA4B,CAAC,cAAc,CAAC;QAE7E,IAAM,UAAU,GAAG,UAAU,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC9C,OAAO,aAAa,GAAG,UAAU,CAAC;IACtC,CAAC;IAED,8BAAQ,GAAR,UAAS,YAAoB,EAAE,WAAoB;QAC/C,IAAM,UAAU,GAAG,WAAW,IAAI,4BAA4B,CAAC,WAAW,CAAC;QAC3E,OAAO,YAAY,IAAI,UAAU,CAAC;IACtC,CAAC;IACL,kBAAC;AAAD,CAAC,AAbD,IAaC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/interceptors/errors/retries/retryPolicies/simple-retry.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { IRetry } from './i-retry';\r\n/**\r\n * @ngdoc object\r\n * @name @smartutils.object:SIMPLE_RETRY_DEFAULT_SETTING\r\n *\r\n * @description\r\n * The setting object to be used as default values for retry.\r\n */\r\nexport declare const SIMPLE_RETRY_DEFAULT_SETTING: {\r\n    MAX_ATTEMPT: number;\r\n    MIN_BACKOFF: number;\r\n    RETRY_INTERVAL: number;\r\n};\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:simpleRetry\r\n * @description\r\n * When used by a retry strategy, this service could provide a simple fixed delay time to be used by the strategy before the next request is sent. The service also provides functionality to check if it is possible to perform a next retry.\r\n */\r\nexport declare class SimpleRetry implements IRetry {\r\n    calculateNextDelay(retryInterval?: number, minBackoff?: number): number;\r\n    canRetry(attemptCount: number, _maxAttempt?: number): boolean;\r\n}\r\n"}}
