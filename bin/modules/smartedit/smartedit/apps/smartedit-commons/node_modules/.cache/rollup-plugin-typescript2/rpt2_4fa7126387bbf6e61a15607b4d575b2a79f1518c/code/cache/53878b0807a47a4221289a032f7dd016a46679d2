{"code":"import { __spreadArrays } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/* eslint-disable id-blacklist */\r\n/*\r\n * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lodash from 'lodash';\r\n/**\r\n * Provides a list of useful methods used for object manipulation\r\n */\r\nvar ObjectUtils = /** @class */ (function () {\r\n    function ObjectUtils() {\r\n        var _this = this;\r\n        /**\r\n         * Will check if the object is empty and will return true if each and every property of the object is empty.\r\n         *\r\n         * @param value the value to evaluate\r\n         */\r\n        this.isObjectEmptyDeep = function (value) {\r\n            if (lodash.isObject(value)) {\r\n                for (var key in value) {\r\n                    if (value.hasOwnProperty(key)) {\r\n                        if (!lodash.isEmpty(value[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return lodash.isString(value) ? lodash.isEmpty(value) : lodash.isNil(value);\r\n        };\r\n        /**\r\n         * Resets a given object's properties' values\r\n         *\r\n         * @param targetObject, the object to reset\r\n         * @param modelObject, an object that contains the structure that targetObject should have after a reset\r\n         * @returns The object that has been reset\r\n         */\r\n        this.resetObject = function (targetObject, modelObject) {\r\n            if (!targetObject) {\r\n                targetObject = _this.copy(modelObject);\r\n            }\r\n            else {\r\n                for (var i in targetObject) {\r\n                    if (targetObject.hasOwnProperty(i)) {\r\n                        delete targetObject[i];\r\n                    }\r\n                }\r\n                lodash.extend(targetObject, _this.copy(modelObject));\r\n            }\r\n            return targetObject;\r\n        };\r\n        /**\r\n         * Iterates over object and allows to modify a value using callback function.\r\n         * @param callback Callback function to apply to each object value.\r\n         * @returns The object with modified values.\r\n         */\r\n        this.deepIterateOverObjectWith = function (obj, callback) {\r\n            return lodash.reduce(obj, function (result, value, key) {\r\n                if (lodash.isPlainObject(value)) {\r\n                    result[key] = _this.deepIterateOverObjectWith(value, callback);\r\n                }\r\n                else {\r\n                    result[key] = callback(value);\r\n                }\r\n                return result;\r\n            }, {});\r\n        };\r\n        /**\r\n         * Returns an object that contains list of fields and for each field it has a boolean value\r\n         * which is true when the property was modified, added or removed, false otherwise.\r\n         * @returns The diff object.\r\n         */\r\n        this.deepObjectPropertyDiff = function (firstObject, secondObject) {\r\n            function CHANGED_PROPERTY() { }\r\n            function NON_CHANGED_PROPERTY() { }\r\n            var mergedObj = lodash.mergeWith(lodash.cloneDeep(firstObject), secondObject, function (prValue, cpValue) {\r\n                if (!lodash.isPlainObject(prValue)) {\r\n                    return !lodash.isEqual(prValue, cpValue) ? CHANGED_PROPERTY : NON_CHANGED_PROPERTY;\r\n                }\r\n                // Note: Previous versions of lodash could work with null, but the latest version of lodash requires\r\n                // undefined to be returned.\r\n                return undefined;\r\n            });\r\n            // If the field is not CHANGED_PROPERTY/NON_CHANGED_PROPERTY then it was removed or added.\r\n            var sanitizedObj = _this.deepIterateOverObjectWith(mergedObj, function (value) {\r\n                if (value !== CHANGED_PROPERTY && value !== NON_CHANGED_PROPERTY) {\r\n                    return CHANGED_PROPERTY;\r\n                }\r\n                else {\r\n                    return value;\r\n                }\r\n            });\r\n            // If it's CHANGED_PROPERTY return true otherwise false.\r\n            return _this.deepIterateOverObjectWith(sanitizedObj, function (value) {\r\n                return value === CHANGED_PROPERTY ? true : false;\r\n            });\r\n        };\r\n        this.readObjectStructure = function (json, recursiveCount) {\r\n            if (recursiveCount === void 0) { recursiveCount = 0; }\r\n            if (recursiveCount > 25) {\r\n                return _this.getClassName(json);\r\n            }\r\n            if (json === undefined || json === null || json.then) {\r\n                return json;\r\n            }\r\n            if (typeof json === 'function') {\r\n                return 'FUNCTION';\r\n            }\r\n            else if (typeof json === 'number') {\r\n                return 'NUMBER';\r\n            }\r\n            else if (typeof json === 'string') {\r\n                return 'STRING';\r\n            }\r\n            else if (typeof json === 'boolean') {\r\n                return 'BOOLEAN';\r\n            }\r\n            else if (lodash.isElement(json)) {\r\n                return 'ELEMENT';\r\n            }\r\n            else if (json.hasOwnProperty && json.hasOwnProperty('length')) {\r\n                // jquery or Array\r\n                if (json.forEach) {\r\n                    var arr_1 = [];\r\n                    json.forEach(function (arrayElement) {\r\n                        recursiveCount++;\r\n                        arr_1.push(_this.readObjectStructure(arrayElement, recursiveCount));\r\n                    });\r\n                    return arr_1;\r\n                }\r\n                else {\r\n                    return 'JQUERY';\r\n                }\r\n            }\r\n            else if (json.constructor &&\r\n                json.constructor.name &&\r\n                json.constructor.name !== 'Object') {\r\n                return json.constructor.name;\r\n            }\r\n            else {\r\n                // JSON\r\n                var clone_1 = {};\r\n                Object.keys(json).forEach(function (directKey) {\r\n                    if (!directKey.startsWith('$')) {\r\n                        recursiveCount++;\r\n                        clone_1[directKey] = _this.readObjectStructure(json[directKey], recursiveCount);\r\n                    }\r\n                });\r\n                return clone_1;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Creates a deep copy of the given input object.\r\n     * If an object being stringified has a property named toJSON whose value is a function, then the toJSON() method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON() method when called will be serialized.\r\n     *\r\n     * @param candidate the javaScript value that needs to be deep copied.\r\n     *\r\n     * @returns A deep copy of the input\r\n     */\r\n    ObjectUtils.prototype.copy = function (candidate) {\r\n        return JSON.parse(JSON.stringify(candidate));\r\n    };\r\n    /**\r\n     * Merges the contents of two objects together into the first object.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @returns A new object as a result of merge\r\n     */\r\n    ObjectUtils.prototype.merge = function (target, source) {\r\n        return Object.assign(target, source);\r\n    };\r\n    /**\r\n     * Converts the given object to array.\r\n     * The output array elements are an object that has a key and value,\r\n     * where key is the original key and value is the original object.\r\n     */\r\n    ObjectUtils.prototype.convertToArray = function (object) {\r\n        var configuration = [];\r\n        for (var key in object) {\r\n            if (!key.startsWith('$') && !key.startsWith('toJSON')) {\r\n                configuration.push({\r\n                    key: key,\r\n                    value: object[key]\r\n                });\r\n            }\r\n        }\r\n        return configuration;\r\n    };\r\n    /**\r\n     * Returns the first Array argument supplemented with new entries from the second Array argument.\r\n     *\r\n     * **Note:** This method mutates `array1`.\r\n     */\r\n    ObjectUtils.prototype.uniqueArray = function (array1, array2) {\r\n        var set = new Set(array1);\r\n        array2.forEach(function (instance) {\r\n            if (!set.has(instance)) {\r\n                array1.push(instance);\r\n            }\r\n        });\r\n        return array1;\r\n    };\r\n    /**\r\n     * Checks if `value` is a function.\r\n     */\r\n    ObjectUtils.prototype.isFunction = function (value) {\r\n        return typeof value === 'function';\r\n    };\r\n    /**\r\n     * Checks if the value is the ECMAScript language type of Object\r\n     */\r\n    ObjectUtils.prototype.isObject = function (value) {\r\n        var objectTypes = {\r\n            boolean: false,\r\n            function: true,\r\n            object: true,\r\n            number: false,\r\n            string: false,\r\n            undefined: false\r\n        };\r\n        return !!(value && objectTypes[typeof value]);\r\n    };\r\n    ObjectUtils.prototype.isTypedMap = function (value) {\r\n        return value && this.isObject(value) && value.constructor === Object;\r\n    };\r\n    /**\r\n     * Sorts an array of strings or objects in specified order.\r\n     * String of numbers are treated the same way as numbers.\r\n     * For an array of objects, `prop` argument is required.\r\n     *\r\n     * @param array Array to sort\r\n     * @param prop Property on which comparision is based. Required for an array of objects.\r\n     * @param reverse Specify ascending or descending order\r\n     *\r\n     * @returns The new sorted array\r\n     */\r\n    ObjectUtils.prototype.sortBy = function (array, prop, reverse) {\r\n        var _this = this;\r\n        if (reverse === void 0) { reverse = false; }\r\n        var targetArray = __spreadArrays(array);\r\n        var descending = reverse ? -1 : 1;\r\n        targetArray.sort(function (a, b) {\r\n            var aVal = _this.isTypedMap(a) ? a[prop] : a;\r\n            var bVal = _this.isTypedMap(b) ? b[prop] : b;\r\n            var result = String(aVal).localeCompare(String(bVal), undefined, {\r\n                numeric: true,\r\n                sensitivity: 'base'\r\n            });\r\n            return result * descending;\r\n        });\r\n        return targetArray;\r\n    };\r\n    /** @internal */\r\n    ObjectUtils.prototype.getClassName = function (instance) {\r\n        return instance &&\r\n            instance.constructor &&\r\n            instance.constructor.name &&\r\n            instance.constructor.name !== 'Object'\r\n            ? instance.constructor.name\r\n            : null;\r\n    };\r\n    return ObjectUtils;\r\n}());\r\nvar objectUtils = new ObjectUtils();\r\nexport { objectUtils, ObjectUtils };\r\n//# sourceMappingURL=ObjectUtils.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"ObjectUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/ObjectUtils.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,iCAAiC;AACjC;;GAEG;AACH,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAGjC;;GAEG;AACH;IAAA;QAAA,iBA8QC;QAjQG;;;;WAIG;QACH,sBAAiB,GAAG,UAAC,KAAU;YAC3B,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAQ,EAAE;gBAC/B,KAAK,IAAM,GAAG,IAAI,KAAK,EAAE;oBACrB,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;wBAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;4BAC7B,OAAO,KAAK,CAAC;yBAChB;qBACJ;iBACJ;gBACD,OAAO,IAAI,CAAC;aACf;YACD,OAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAChF,CAAC,CAAC;QAEF;;;;;;WAMG;QACH,gBAAW,GAAG,UAAC,YAAiB,EAAE,WAAgB;YAC9C,IAAI,CAAC,YAAY,EAAE;gBACf,YAAY,GAAG,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACzC;iBAAM;gBACH,KAAK,IAAM,CAAC,IAAI,YAAY,EAAE;oBAC1B,IAAI,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;wBAChC,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;qBAC1B;iBACJ;gBACD,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aACvD;YAED,OAAO,YAAY,CAAC;QACxB,CAAC,CAAC;QAaF;;;;WAIG;QACH,8BAAyB,GAAG,UAAC,GAAQ,EAAE,QAAa;YAChD,OAAA,MAAM,CAAC,MAAM,CACT,GAAG,EACH,UAAC,MAAW,EAAE,KAAU,EAAE,GAAQ;gBAC9B,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;oBAC7B,MAAM,CAAC,GAAG,CAAC,GAAG,KAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;iBACjE;qBAAM;oBACH,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;iBACjC;gBACD,OAAO,MAAM,CAAC;YAClB,CAAC,EACD,EAAE,CACL;QAXD,CAWC,CAAC;QAEN;;;;WAIG;QACH,2BAAsB,GAAG,UAAC,WAAgB,EAAE,YAAiB;YACzD,SAAS,gBAAgB,KAAU,CAAC;YAEpC,SAAS,oBAAoB,KAAU,CAAC;YAExC,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,YAAY,EAAE,UAC5E,OAAY,EACZ,OAAY;gBAEZ,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;oBAChC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,oBAAoB,CAAC;iBACtF;gBAED,oGAAoG;gBACpG,4BAA4B;gBAC5B,OAAO,SAAS,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,0FAA0F;YAC1F,IAAM,YAAY,GAAG,KAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,UAAC,KAAU;gBACtE,IAAI,KAAK,KAAK,gBAAgB,IAAI,KAAK,KAAK,oBAAoB,EAAE;oBAC9D,OAAO,gBAAgB,CAAC;iBAC3B;qBAAM;oBACH,OAAO,KAAK,CAAC;iBAChB;YACL,CAAC,CAAC,CAAC;YAEH,wDAAwD;YACxD,OAAO,KAAI,CAAC,yBAAyB,CAAC,YAAY,EAAE,UAAC,KAAU;gBAC3D,OAAA,KAAK,KAAK,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAAzC,CAAyC,CAC5C,CAAC;QACN,CAAC,CAAC;QA+DF,wBAAmB,GAAG,UAAC,IAAS,EAAE,cAAkB;YAAlB,+BAAA,EAAA,kBAAkB;YAChD,IAAI,cAAc,GAAG,EAAE,EAAE;gBACrB,OAAO,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aAClC;YAED,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;gBAClD,OAAO,IAAI,CAAC;aACf;YAED,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;gBAC5B,OAAO,UAAU,CAAC;aACrB;iBAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBACjC,OAAO,QAAQ,CAAC;aACnB;iBAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBACjC,OAAO,QAAQ,CAAC;aACnB;iBAAM,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;gBAClC,OAAO,SAAS,CAAC;aACpB;iBAAM,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBAC/B,OAAO,SAAS,CAAC;aACpB;iBAAM,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAC7D,kBAAkB;gBAClB,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,IAAM,KAAG,GAAQ,EAAE,CAAC;oBACpB,IAAI,CAAC,OAAO,CAAC,UAAC,YAAiB;wBAC3B,cAAc,EAAE,CAAC;wBACjB,KAAG,CAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,CAAC;oBACrE,CAAC,CAAC,CAAC;oBACH,OAAO,KAAG,CAAC;iBACd;qBAAM;oBACH,OAAO,QAAQ,CAAC;iBACnB;aACJ;iBAAM,IACH,IAAI,CAAC,WAAW;gBAChB,IAAI,CAAC,WAAW,CAAC,IAAI;gBACrB,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ,EACpC;gBACE,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;aAChC;iBAAM;gBACH,OAAO;gBACP,IAAM,OAAK,GAAG,EAAS,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,SAAS;oBAChC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;wBAC5B,cAAc,EAAE,CAAC;wBACjB,OAAK,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,cAAc,CAAC,CAAC;qBAChF;gBACL,CAAC,CAAC,CAAC;gBACH,OAAO,OAAK,CAAC;aAChB;QACL,CAAC,CAAC;IAuCN,CAAC;IA7QG;;;;;;;OAOG;IACH,0BAAI,GAAJ,UAAQ,SAAY;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACjD,CAAC;IA2CD;;;;;;OAMG;IACH,2BAAK,GAAL,UAAwB,MAAe,EAAE,MAAe;QACpD,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IA2DD;;;;OAIG;IACH,oCAAc,GAAd,UAAe,MAAW;QACtB,IAAM,aAAa,GAAG,EAAE,CAAC;QACzB,KAAK,IAAM,GAAG,IAAI,MAAM,EAAE;YACtB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;gBACnD,aAAa,CAAC,IAAI,CAAC;oBACf,GAAG,KAAA;oBACH,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC;iBACrB,CAAC,CAAC;aACN;SACJ;QACD,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,iCAAW,GAAX,UAAY,MAAa,EAAE,MAAa;QACpC,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,UAAC,QAAa;YACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACpB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACzB;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,gCAAU,GAAV,UAAW,KAAU;QACjB,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,8BAAQ,GAAR,UAAS,KAAU;QACf,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,KAAK;YACb,SAAS,EAAE,KAAK;SACZ,CAAC;QAET,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,WAAW,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,gCAAU,GAAV,UAAuB,KAAU;QAC7B,OAAO,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,WAAW,KAAK,MAAM,CAAC;IACzE,CAAC;IAoDD;;;;;;;;;;OAUG;IACH,4BAAM,GAAN,UAAU,KAAU,EAAE,IAAa,EAAE,OAAe;QAApD,iBAeC;QAfoC,wBAAA,EAAA,eAAe;QAChD,IAAM,WAAW,kBAAY,KAAK,CAAC,CAAC;QAEpC,IAAM,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpC,WAAW,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YAClB,IAAM,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAM,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE;gBAC/D,OAAO,EAAE,IAAI;gBACb,WAAW,EAAE,MAAM;aACtB,CAAC,CAAC;YACH,OAAO,MAAM,GAAG,UAAU,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACvB,CAAC;IAED,gBAAgB;IACR,kCAAY,GAApB,UAAqB,QAAa;QAC9B,OAAO,QAAQ;YACX,QAAQ,CAAC,WAAW;YACpB,QAAQ,CAAC,WAAW,CAAC,IAAI;YACzB,QAAQ,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ;YACtC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI;YAC3B,CAAC,CAAC,IAAI,CAAC;IACf,CAAC;IACL,kBAAC;AAAD,CAAC,AA9QD,IA8QC;AAED,IAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;AAEtC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/utils/ObjectUtils.d.ts","writeByteOrderMark":false,"text":"import { TypedMap } from '../dtos';\r\n/**\r\n * Provides a list of useful methods used for object manipulation\r\n */\r\ndeclare class ObjectUtils {\r\n    /**\r\n     * Creates a deep copy of the given input object.\r\n     * If an object being stringified has a property named toJSON whose value is a function, then the toJSON() method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON() method when called will be serialized.\r\n     *\r\n     * @param candidate the javaScript value that needs to be deep copied.\r\n     *\r\n     * @returns A deep copy of the input\r\n     */\r\n    copy<T>(candidate: T): T;\r\n    /**\r\n     * Will check if the object is empty and will return true if each and every property of the object is empty.\r\n     *\r\n     * @param value the value to evaluate\r\n     */\r\n    isObjectEmptyDeep: (value: any) => boolean;\r\n    /**\r\n     * Resets a given object's properties' values\r\n     *\r\n     * @param targetObject, the object to reset\r\n     * @param modelObject, an object that contains the structure that targetObject should have after a reset\r\n     * @returns The object that has been reset\r\n     */\r\n    resetObject: (targetObject: any, modelObject: any) => any;\r\n    /**\r\n     * Merges the contents of two objects together into the first object.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @returns A new object as a result of merge\r\n     */\r\n    merge<TTarget, TSource>(target: TTarget, source: TSource): TTarget & TSource;\r\n    /**\r\n     * Iterates over object and allows to modify a value using callback function.\r\n     * @param callback Callback function to apply to each object value.\r\n     * @returns The object with modified values.\r\n     */\r\n    deepIterateOverObjectWith: (obj: any, callback: any) => any;\r\n    /**\r\n     * Returns an object that contains list of fields and for each field it has a boolean value\r\n     * which is true when the property was modified, added or removed, false otherwise.\r\n     * @returns The diff object.\r\n     */\r\n    deepObjectPropertyDiff: (firstObject: any, secondObject: any) => any;\r\n    /**\r\n     * Converts the given object to array.\r\n     * The output array elements are an object that has a key and value,\r\n     * where key is the original key and value is the original object.\r\n     */\r\n    convertToArray(object: any): any[];\r\n    /**\r\n     * Returns the first Array argument supplemented with new entries from the second Array argument.\r\n     *\r\n     * **Note:** This method mutates `array1`.\r\n     */\r\n    uniqueArray(array1: any[], array2: any[]): any[];\r\n    /**\r\n     * Checks if `value` is a function.\r\n     */\r\n    isFunction(value: any): boolean;\r\n    /**\r\n     * Checks if the value is the ECMAScript language type of Object\r\n     */\r\n    isObject(value: any): boolean;\r\n    isTypedMap<T = string>(value: any): value is TypedMap<T>;\r\n    readObjectStructure: (json: any, recursiveCount?: number) => any;\r\n    /**\r\n     * Sorts an array of strings or objects in specified order.\r\n     * String of numbers are treated the same way as numbers.\r\n     * For an array of objects, `prop` argument is required.\r\n     *\r\n     * @param array Array to sort\r\n     * @param prop Property on which comparision is based. Required for an array of objects.\r\n     * @param reverse Specify ascending or descending order\r\n     *\r\n     * @returns The new sorted array\r\n     */\r\n    sortBy<T>(array: T[], prop?: string, reverse?: boolean): T[];\r\n    /** @internal */\r\n    private getClassName;\r\n}\r\ndeclare const objectUtils: ObjectUtils;\r\nexport { objectUtils, ObjectUtils };\r\n"}}
