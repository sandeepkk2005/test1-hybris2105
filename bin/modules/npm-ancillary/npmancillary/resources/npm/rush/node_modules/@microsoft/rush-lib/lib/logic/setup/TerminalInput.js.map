{"version":3,"file":"TerminalInput.js","sourceRoot":"","sources":["../../../src/logic/setup/TerminalInput.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as readline from 'readline';\r\nimport * as process from 'process';\r\nimport colors from 'colors/safe';\r\nimport { AnsiEscape } from '@rushstack/node-core-library';\r\n\r\nimport { KeyboardLoop } from './KeyboardLoop';\r\n\r\nexport interface IBasePromptOptions {\r\n  message: string;\r\n}\r\n\r\nexport interface IPromptYesNoOptions extends IBasePromptOptions {\r\n  defaultValue?: boolean | undefined;\r\n}\r\n\r\nexport interface IPromptPasswordOptions extends IBasePromptOptions {\r\n  /**\r\n   * The string length must not be longer than 1.  An empty string means to show the input text.\r\n   * @defaultValue `*`\r\n   */\r\n  passwordCharacter?: string;\r\n}\r\n\r\nexport interface IPromptLineOptions extends IBasePromptOptions {}\r\n\r\nclass YesNoKeyboardLoop extends KeyboardLoop {\r\n  public readonly options: IPromptYesNoOptions;\r\n  public result: boolean | undefined = undefined;\r\n\r\n  public constructor(options: IPromptYesNoOptions) {\r\n    super();\r\n    this.options = options;\r\n  }\r\n\r\n  protected onStart(): void {\r\n    this.stderr.write(colors.green('==>') + ' ');\r\n    this.stderr.write(colors.bold(this.options.message));\r\n    let optionSuffix: string = '';\r\n    switch (this.options.defaultValue) {\r\n      case true:\r\n        optionSuffix = '(Y/n)';\r\n        break;\r\n      case false:\r\n        optionSuffix = '(y/N)';\r\n        break;\r\n      default:\r\n        optionSuffix = '(y/n)';\r\n        break;\r\n    }\r\n    this.stderr.write(' ' + colors.bold(optionSuffix) + ' ');\r\n  }\r\n\r\n  protected onKeypress(character: string, key: readline.Key): void {\r\n    if (this.result !== undefined) {\r\n      return;\r\n    }\r\n\r\n    switch (key.name) {\r\n      case 'y':\r\n        this.result = true;\r\n        break;\r\n      case 'n':\r\n        this.result = false;\r\n        break;\r\n      case 'enter':\r\n      case 'return':\r\n        if (this.options.defaultValue !== undefined) {\r\n          this.result = this.options.defaultValue;\r\n        }\r\n        break;\r\n    }\r\n\r\n    if (this.result !== undefined) {\r\n      this.stderr.write(this.result ? 'Yes\\n' : 'No\\n');\r\n      this.resolveAsync();\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nclass PasswordKeyboardLoop extends KeyboardLoop {\r\n  private readonly _options: IPromptPasswordOptions;\r\n  private _passwordCharacter: string;\r\n  private _startX: number = 0;\r\n  private _printedY: number = 0;\r\n  private _lastPrintedLength: number = 0;\r\n\r\n  public result: string = '';\r\n\r\n  public constructor(options: IPromptPasswordOptions) {\r\n    super();\r\n    this._options = options;\r\n\r\n    this._passwordCharacter =\r\n      this._options.passwordCharacter === undefined ? '*' : this._options.passwordCharacter.substr(0, 1);\r\n  }\r\n\r\n  private _getLineWrapWidth(): number {\r\n    return this.stderr.columns ? this.stderr.columns : 80;\r\n  }\r\n\r\n  protected onStart(): void {\r\n    this.result = '';\r\n\r\n    readline.cursorTo(this.stderr, 0);\r\n    readline.clearLine(this.stderr, 1);\r\n    const prefix: string = colors.green('==>') + ' ' + colors.bold(this._options.message) + ' ';\r\n\r\n    this.stderr.write(prefix);\r\n    let lineStartIndex: number = prefix.lastIndexOf('\\n');\r\n    if (lineStartIndex < 0) {\r\n      lineStartIndex = 0;\r\n    }\r\n    const line: string = prefix.substring(lineStartIndex);\r\n    this._startX = AnsiEscape.removeCodes(line).length % this._getLineWrapWidth();\r\n  }\r\n\r\n  protected onKeypress(character: string, key: readline.Key): void {\r\n    switch (key.name) {\r\n      case 'enter':\r\n      case 'return':\r\n        if (this._passwordCharacter !== '') {\r\n          // To avoid disclosing the length of the password, after the user presses ENTER,\r\n          // replace the \"*********\" sequence with exactly three stars (\"***\").\r\n          this._render(this._passwordCharacter.repeat(3));\r\n        }\r\n        this.stderr.write('\\n');\r\n        this.resolveAsync();\r\n        return;\r\n      case 'backspace':\r\n        this.result = this.result.substring(0, this.result.length - 1);\r\n        this._render(this.result);\r\n        break;\r\n      default:\r\n        let printable: boolean = true;\r\n        if (character === '') {\r\n          printable = false;\r\n        } else if (key.name && key.name.length !== 1 && key.name !== 'space') {\r\n          printable = false;\r\n        } else if (!key.name && !key.sequence) {\r\n          printable = false;\r\n        }\r\n\r\n        if (printable) {\r\n          this.result += character;\r\n          this._render(this.result);\r\n        }\r\n    }\r\n  }\r\n\r\n  private _render(text: string): void {\r\n    // Optimize rendering when we don't need to erase anything\r\n    const needsClear: boolean = text.length < this._lastPrintedLength;\r\n    this._lastPrintedLength = text.length;\r\n\r\n    this.hideCursor();\r\n\r\n    // Restore Y\r\n    while (this._printedY > 0) {\r\n      readline.cursorTo(this.stderr, 0);\r\n      if (needsClear) {\r\n        readline.clearLine(this.stderr, 1);\r\n      }\r\n      readline.moveCursor(this.stderr, 0, -1);\r\n      --this._printedY;\r\n    }\r\n\r\n    // Restore X\r\n    readline.cursorTo(this.stderr, this._startX);\r\n\r\n    let i: number = 0;\r\n    let column: number = this._startX;\r\n    this._printedY = 0;\r\n    let buffer: string = '';\r\n\r\n    while (i < text.length) {\r\n      if (this._passwordCharacter === '') {\r\n        buffer += text.substr(i, 1);\r\n      } else {\r\n        buffer += this._passwordCharacter;\r\n      }\r\n\r\n      ++i;\r\n      ++column;\r\n\r\n      // -1 to avoid weird TTY behavior in final column\r\n      if (column >= this._getLineWrapWidth() - 1) {\r\n        column = 0;\r\n        ++this._printedY;\r\n        buffer += '\\n';\r\n      }\r\n    }\r\n    this.stderr.write(buffer);\r\n\r\n    if (needsClear) {\r\n      readline.clearLine(this.stderr, 1);\r\n    }\r\n\r\n    this.unhideCursor();\r\n  }\r\n}\r\n\r\nexport class TerminalInput {\r\n  private static async _readLine(): Promise<string> {\r\n    const readlineInterface: readline.Interface = readline.createInterface({ input: process.stdin });\r\n    try {\r\n      return await new Promise((resolve, reject) => {\r\n        readlineInterface.question('', (answer: string) => {\r\n          resolve(answer);\r\n        });\r\n      });\r\n    } finally {\r\n      readlineInterface.close();\r\n    }\r\n  }\r\n\r\n  public static async promptYesNo(options: IPromptYesNoOptions): Promise<boolean> {\r\n    const keyboardLoop: YesNoKeyboardLoop = new YesNoKeyboardLoop(options);\r\n    await keyboardLoop.startAsync();\r\n    return keyboardLoop.result!;\r\n  }\r\n\r\n  public static async promptLine(options: IPromptLineOptions): Promise<string> {\r\n    const stderr: NodeJS.WriteStream = process.stderr;\r\n    stderr.write(colors.green('==>') + ' ');\r\n    stderr.write(colors.bold(options.message));\r\n    stderr.write(' ');\r\n    return await TerminalInput._readLine();\r\n  }\r\n\r\n  public static async promptPasswordLine(options: IPromptLineOptions): Promise<string> {\r\n    const keyboardLoop: PasswordKeyboardLoop = new PasswordKeyboardLoop(options);\r\n    await keyboardLoop.startAsync();\r\n    return keyboardLoop.result;\r\n  }\r\n}\r\n"]}