{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { toPairs } from 'lodash';\r\nimport { Subject } from 'rxjs';\r\n/* tslint:disable:max-classes-per-file */\r\n/**\r\n * Event payload when a property changes.\r\n */\r\nvar InputPropertyChange = /** @class */ (function () {\r\n    function InputPropertyChange(key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    return InputPropertyChange;\r\n}());\r\nexport { InputPropertyChange };\r\n/**\r\n * Used for storing component input values for the dynamic component. The values\r\n * are set onto the dynamic component's properties that are decorated by the @DynamicInput()\r\n * decorator. Values can be retrieved or set programmatically by the form element's 'input'\r\n * property.\r\n */\r\nvar InputProperties = /** @class */ (function () {\r\n    function InputProperties(object) {\r\n        if (object === void 0) { object = {}; }\r\n        this.changes = new Subject();\r\n        this._map = new Map(toPairs(object));\r\n    }\r\n    /**\r\n     * Get a property.\r\n     *\r\n     * @param {keyof T} key\r\n     * @returns {T[keyof T] | undefined} value\r\n     */\r\n    InputProperties.prototype.get = function (key) {\r\n        return this._map.get(key);\r\n    };\r\n    /**\r\n     * Setting a property.\r\n     *\r\n     * @param {keyof T} key\r\n     * @param {T[keyof T]} value\r\n     * @param {boolean} emit If emit is set to false. It will not emit changes to the\r\n     * the component for those observing for property changes.\r\n     */\r\n    InputProperties.prototype.set = function (key, value, emit) {\r\n        if (emit === void 0) { emit = true; }\r\n        this._map.set(key, value);\r\n        if (emit) {\r\n            this.changes.next(new InputPropertyChange(key, value));\r\n        }\r\n    };\r\n    return InputProperties;\r\n}());\r\nexport { InputProperties };\r\n//# sourceMappingURL=input-properties.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts"],"map":"{\"version\":3,\"file\":\"input-properties.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modules/form-builder/models/input-properties.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH,yCAAyC;AACzC;;;GAGG;AACH;;;GAGG;AACH,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAc,OAAO,EAAE,MAAM,MAAM,CAAC;AAE3C,yCAAyC;AAEzC;;GAEG;AACH;IACI,6BAAmB,GAAW,EAAS,KAAU;QAA9B,QAAG,GAAH,GAAG,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAK;IAAG,CAAC;IACzD,0BAAC;AAAD,CAAC,AAFD,IAEC;;AAED;;;;;GAKG;AACH;IAOI,yBAAY,MAAmC;QAAnC,uBAAA,EAAA,WAAmC;QANtC,YAAO,GAAoC,IAAI,OAAO,EAAuB,CAAC;QAOnF,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACH,6BAAG,GAAH,UAAO,GAAY;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAa,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;OAOG;IACH,6BAAG,GAAH,UAAO,GAAY,EAAE,KAAiB,EAAE,IAAW;QAAX,qBAAA,EAAA,WAAW;QAC/C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAa,EAAE,KAAK,CAAC,CAAC;QACpC,IAAI,IAAI,EAAE;YACL,IAAI,CAAC,OAAwC,CAAC,IAAI,CAC/C,IAAI,mBAAmB,CAAC,GAAa,EAAE,KAAK,CAAC,CAChD,CAAC;SACL;IACL,CAAC;IACL,sBAAC;AAAD,CAAC,AArCD,IAqCC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/modules/form-builder/models/input-properties.d.ts","writeByteOrderMark":false,"text":"import { Observable } from 'rxjs';\r\n/**\r\n * Event payload when a property changes.\r\n */\r\nexport declare class InputPropertyChange {\r\n    key: string;\r\n    value: any;\r\n    constructor(key: string, value: any);\r\n}\r\n/**\r\n * Used for storing component input values for the dynamic component. The values\r\n * are set onto the dynamic component's properties that are decorated by the @DynamicInput()\r\n * decorator. Values can be retrieved or set programmatically by the form element's 'input'\r\n * property.\r\n */\r\nexport declare class InputProperties {\r\n    readonly changes: Observable<InputPropertyChange>;\r\n    /**\r\n     * @internal\r\n     */\r\n    private readonly _map;\r\n    constructor(object?: {\r\n        [key: string]: any;\r\n    });\r\n    /**\r\n     * Get a property.\r\n     *\r\n     * @param {keyof T} key\r\n     * @returns {T[keyof T] | undefined} value\r\n     */\r\n    get<T>(key: keyof T): T[keyof T] | undefined;\r\n    /**\r\n     * Setting a property.\r\n     *\r\n     * @param {keyof T} key\r\n     * @param {T[keyof T]} value\r\n     * @param {boolean} emit If emit is set to false. It will not emit changes to the\r\n     * the component for those observing for property changes.\r\n     */\r\n    set<T>(key: keyof T, value: T[keyof T], emit?: boolean): void;\r\n}\r\n"}}
