"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TarExecutable = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const events = __importStar(require("events"));
class TarExecutable {
    constructor(tarExecutablePath) {
        this._tarExecutablePath = tarExecutablePath;
    }
    static tryInitialize(terminal) {
        terminal.writeVerboseLine('Trying to find "tar" binary');
        const tarExecutablePath = node_core_library_1.Executable.tryResolve('tar');
        if (!tarExecutablePath) {
            terminal.writeVerboseLine('"tar" was not found on the PATH');
            return undefined;
        }
        return new TarExecutable(tarExecutablePath);
    }
    /**
     * @returns
     * The "tar" exit code
     */
    async tryUntarAsync(archivePath, outputFolderPath) {
        const childProcess = node_core_library_1.Executable.spawn(this._tarExecutablePath, ['-x', '-f', archivePath], {
            currentWorkingDirectory: outputFolderPath
        });
        const [tarExitCode] = await events.once(childProcess, 'exit');
        return tarExitCode;
    }
    /**
     * @returns
     * The "tar" exit code
     */
    async tryCreateArchiveFromProjectPathsAsync(archivePath, paths, project) {
        const pathsListFilePath = `${project.projectRushTempFolder}/tarPaths_${Date.now()}`;
        await node_core_library_1.FileSystem.writeFileAsync(pathsListFilePath, paths.join('\n'));
        const projectFolderPath = project.projectFolder;
        const childProcess = node_core_library_1.Executable.spawn(this._tarExecutablePath, ['-c', '-f', archivePath, '-z', '-C', projectFolderPath, '--files-from', pathsListFilePath], {
            currentWorkingDirectory: projectFolderPath
        });
        const [tarExitCode] = await events.once(childProcess, 'exit');
        await node_core_library_1.FileSystem.deleteFileAsync(pathsListFilePath);
        return tarExitCode;
    }
}
exports.TarExecutable = TarExecutable;
//# sourceMappingURL=TarExecutable.js.map