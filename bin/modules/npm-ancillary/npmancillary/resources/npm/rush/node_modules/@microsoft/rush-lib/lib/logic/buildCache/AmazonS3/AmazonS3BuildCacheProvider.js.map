{"version":3,"file":"AmazonS3BuildCacheProvider.js","sourceRoot":"","sources":["../../../../src/logic/buildCache/AmazonS3/AmazonS3BuildCacheProvider.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Terminal } from '@rushstack/node-core-library';\r\n\r\nimport { EnvironmentConfiguration, EnvironmentVariableNames } from '../../../api/EnvironmentConfiguration';\r\nimport { CloudBuildCacheProviderBase } from '../CloudBuildCacheProviderBase';\r\nimport { CredentialCache, ICredentialCacheEntry } from '../../CredentialCache';\r\nimport { RushConstants } from '../../RushConstants';\r\nimport { AmazonS3Client, IAmazonS3Credentials } from './AmazonS3Client';\r\n\r\nexport interface IAmazonS3BuildCacheProviderOptions {\r\n  s3Bucket: string;\r\n  s3Region: string;\r\n  s3Prefix?: string;\r\n  isCacheWriteAllowed: boolean;\r\n}\r\n\r\nexport class AmazonS3BuildCacheProvider extends CloudBuildCacheProviderBase {\r\n  private readonly _options: IAmazonS3BuildCacheProviderOptions;\r\n  private readonly _s3Prefix: string | undefined;\r\n  private readonly _environmentWriteCredential: string | undefined;\r\n  private readonly _isCacheWriteAllowedByConfiguration: boolean;\r\n  private __credentialCacheId: string | undefined;\r\n\r\n  public get isCacheWriteAllowed(): boolean {\r\n    return this._isCacheWriteAllowedByConfiguration || !!this._environmentWriteCredential;\r\n  }\r\n\r\n  private __s3Client: AmazonS3Client | undefined;\r\n\r\n  public constructor(options: IAmazonS3BuildCacheProviderOptions) {\r\n    super();\r\n    this._options = options;\r\n    this._s3Prefix = options.s3Prefix;\r\n    this._environmentWriteCredential = EnvironmentConfiguration.buildCacheWriteCredential;\r\n    this._isCacheWriteAllowedByConfiguration = options.isCacheWriteAllowed;\r\n  }\r\n\r\n  private get _credentialCacheId(): string {\r\n    if (!this.__credentialCacheId) {\r\n      const cacheIdParts: string[] = ['aws-s3', this._options.s3Region, this._options.s3Bucket];\r\n\r\n      if (this._isCacheWriteAllowedByConfiguration) {\r\n        cacheIdParts.push('cacheWriteAllowed');\r\n      }\r\n\r\n      this.__credentialCacheId = cacheIdParts.join('|');\r\n    }\r\n\r\n    return this.__credentialCacheId;\r\n  }\r\n\r\n  private async _getS3ClientAsync(): Promise<AmazonS3Client> {\r\n    if (!this.__s3Client) {\r\n      let credentials: IAmazonS3Credentials | undefined = AmazonS3Client.tryDeserializeCredentials(\r\n        this._environmentWriteCredential\r\n      );\r\n      if (!credentials) {\r\n        let cacheEntry: ICredentialCacheEntry | undefined;\r\n        await CredentialCache.usingAsync(\r\n          {\r\n            supportEditing: false\r\n          },\r\n          (credentialsCache: CredentialCache) => {\r\n            cacheEntry = credentialsCache.tryGetCacheEntry(this._credentialCacheId);\r\n          }\r\n        );\r\n\r\n        if (cacheEntry) {\r\n          const expirationTime: number | undefined = cacheEntry.expires?.getTime();\r\n          if (expirationTime && expirationTime < Date.now()) {\r\n            throw new Error(\r\n              'Cached Amazon S3 credentials have expired. ' +\r\n                `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\".`\r\n            );\r\n          } else {\r\n            credentials = AmazonS3Client.tryDeserializeCredentials(cacheEntry?.credential);\r\n          }\r\n        } else if (this._isCacheWriteAllowedByConfiguration) {\r\n          throw new Error(\r\n            \"An Amazon S3 credential hasn't been provided, or has expired. \" +\r\n              `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\", ` +\r\n              `or provide an <AccessKeyId>:<SecretAccessKey> pair in the ` +\r\n              `${EnvironmentVariableNames.RUSH_BUILD_CACHE_WRITE_CREDENTIAL} environment variable`\r\n          );\r\n        }\r\n      }\r\n\r\n      this.__s3Client = new AmazonS3Client(credentials, this._options);\r\n    }\r\n\r\n    return this.__s3Client;\r\n  }\r\n\r\n  public async tryGetCacheEntryBufferByIdAsync(\r\n    terminal: Terminal,\r\n    cacheId: string\r\n  ): Promise<Buffer | undefined> {\r\n    try {\r\n      const client: AmazonS3Client = await this._getS3ClientAsync();\r\n      return await client.getObjectAsync(this._s3Prefix ? `${this._s3Prefix}/${cacheId}` : cacheId);\r\n    } catch (e) {\r\n      terminal.writeWarningLine(`Error getting cache entry from S3: ${e}`);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public async trySetCacheEntryBufferAsync(\r\n    terminal: Terminal,\r\n    cacheId: string,\r\n    objectBuffer: Buffer\r\n  ): Promise<boolean> {\r\n    if (!this.isCacheWriteAllowed) {\r\n      terminal.writeErrorLine('Writing to S3 cache is not allowed in the current configuration.');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const client: AmazonS3Client = await this._getS3ClientAsync();\r\n      await client.uploadObjectAsync(this._s3Prefix ? `${this._s3Prefix}/${cacheId}` : cacheId, objectBuffer);\r\n      return true;\r\n    } catch (e) {\r\n      terminal.writeWarningLine(`Error uploading cache entry to S3: ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public async updateCachedCredentialAsync(terminal: Terminal, credential: string): Promise<void> {\r\n    await CredentialCache.usingAsync(\r\n      {\r\n        supportEditing: true\r\n      },\r\n      async (credentialsCache: CredentialCache) => {\r\n        credentialsCache.setCacheEntry(this._credentialCacheId, credential);\r\n        await credentialsCache.saveIfModifiedAsync();\r\n      }\r\n    );\r\n  }\r\n\r\n  public async updateCachedCredentialInteractiveAsync(terminal: Terminal): Promise<void> {\r\n    throw new Error(\r\n      'The interactive cloud credentials flow is not supported for Amazon S3.\\n' +\r\n        'Install and authenticate with aws-cli, or provide your credentials to rush using the --credential flag instead.'\r\n    );\r\n  }\r\n\r\n  public async deleteCachedCredentialsAsync(terminal: Terminal): Promise<void> {\r\n    await CredentialCache.usingAsync(\r\n      {\r\n        supportEditing: true\r\n      },\r\n      async (credentialsCache: CredentialCache) => {\r\n        credentialsCache.deleteCacheEntry(this._credentialCacheId);\r\n        await credentialsCache.saveIfModifiedAsync();\r\n      }\r\n    );\r\n  }\r\n}\r\n"]}