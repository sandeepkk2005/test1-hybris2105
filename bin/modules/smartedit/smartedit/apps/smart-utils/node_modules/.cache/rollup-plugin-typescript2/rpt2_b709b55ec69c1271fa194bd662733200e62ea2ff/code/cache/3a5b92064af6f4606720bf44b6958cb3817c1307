{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport * as lodash from 'lodash';\r\nimport { stringUtils } from './string-utils';\r\n/* tslint:disable:max-classes-per-file */\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:UrlUtils#URIBuilder\r\n *\r\n * @description\r\n * builder or URIs, build() method must be invoked to actually retrieve a URI\r\n *\r\n * @param {Object} modalStack, the $modalStack service of angular-ui.\r\n */\r\nvar URIBuilder = /** @class */ (function () {\r\n    function URIBuilder(uri) {\r\n        this.uri = uri;\r\n        this.wholeWordMatch = '[\\\\w]+';\r\n    }\r\n    URIBuilder.prototype.build = function () {\r\n        return this.uri;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name  @smartutils.services:UrlUtils#URIBuilder#replaceParams\r\n     * @methodOf  @smartutils.services:UrlUtils#URIBuilder\r\n     *\r\n     * @description\r\n     * Substitute all \":\" prefixed placeholders in the full url with the matching values in the given params\r\n     * Substitute Non \":\" prefixed placeholders containg \"_\"\r\n     *\r\n     * @param {Object} params a map of placeholder names / values\r\n     */\r\n    URIBuilder.prototype.replaceParams = function (params) {\r\n        var _this = this;\r\n        var clone = lodash.cloneDeep(this);\r\n        if (params) {\r\n            // order the keys by descending length\r\n            clone.uri = Object.keys(params)\r\n                .sort(function (a, b) {\r\n                return b.length - a.length;\r\n            })\r\n                .reduce(function (tempURL, key) {\r\n                return _this.substituteKeyForValue(tempURL, key, params[key]);\r\n            }, clone.uri);\r\n        }\r\n        return clone;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name  @smartutils.services:UrlUtils#URIBuilder#sanitize\r\n     * @methodOf  @smartutils.services:UrlUtils#URIBuilder\r\n     *\r\n     * @description\r\n     * removes unresolved \":\" prefixed placeholders from absolute path\r\n     */\r\n    URIBuilder.prototype.sanitize = function () {\r\n        var clone = lodash.cloneDeep(this);\r\n        var uriDomainAndPath = /(https?:\\/\\/[^\\/]*)(\\/.*)/.exec(clone.uri);\r\n        clone.uri = uriDomainAndPath == null ? clone.uri : uriDomainAndPath[2];\r\n        clone.uri = this.substituteKeyForValue(clone.uri, this.wholeWordMatch, '')\r\n            .replace(/\\/\\//, '/') // to replace double slash (api/:identifier/data?param=true) if :identifier is removed\r\n            .replace(/\\/\\?/, '?') // to replace slash question mark (api/:identifier?param=true) if :identifier is removed\r\n            .replace(/\\/$/, ''); // to remove trailing slash\r\n        clone.uri = uriDomainAndPath == null ? clone.uri : uriDomainAndPath[1] + clone.uri;\r\n        return clone;\r\n    };\r\n    URIBuilder.prototype.substituteKeyForValue = function (url, key, value) {\r\n        url = url\r\n            .replace(new RegExp(':' + key + '/'), (value || '') + \"/\")\r\n            .replace(new RegExp(':' + key + '$'), \"\" + (value || ''))\r\n            .replace(new RegExp(':' + key + '\\\\?'), (value || '') + \"?\")\r\n            .replace(new RegExp(':' + key + '&'), (value || '') + \"&\");\r\n        /*\r\n         * to cater for special case of smartedit\r\n         * where some non \":\" prefixed placeholders must be resolved too\r\n         * we limit it though to keys containing \"_\" (case for smartedit)\r\n         * since it would otherwise breaks most APIs patterns\r\n         */\r\n        if (key !== this.wholeWordMatch && key.includes('_')) {\r\n            var _uri = url.includes('?') ? url.substr(0, url.indexOf('?')) : url;\r\n            var uri = _uri.replace(new RegExp('\\\\b' + key + '\\\\b'), \"\" + (value || ''));\r\n            url = url.includes('?') ? uri + url.substr(url.indexOf('?')) : uri;\r\n        }\r\n        return url;\r\n    };\r\n    return URIBuilder;\r\n}());\r\nexport { URIBuilder };\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:UrlUtils\r\n *\r\n * @description\r\n * A collection of utility methods for manipulating URLs\r\n */\r\nvar UrlUtils = /** @class */ (function () {\r\n    function UrlUtils() {\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getOrigin\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     * @description\r\n     * returns document location origin\r\n     * Some browsers still do not support W3C document.location.origin, this function caters for gap.\r\n     * @param {String =} url optional any url\r\n     */\r\n    UrlUtils.prototype.getOrigin = function (url) {\r\n        if (url) {\r\n            var link = document.createElement('a');\r\n            link.setAttribute('href', url);\r\n            var origin_1 = link.protocol + '//' + link.hostname + (link.port ? ':' + link.port : '');\r\n            // @ts-ignore\r\n            link = null; // GC\r\n            return origin_1;\r\n        }\r\n        else {\r\n            return (window.location.protocol +\r\n                '//' +\r\n                window.location.hostname +\r\n                (window.location.port ? ':' + window.location.port : ''));\r\n        }\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getURI\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * Will return the URI part of a URL\r\n     * @param {String} url the URL the URI of which is to be returned\r\n     */\r\n    UrlUtils.prototype.getURI = function (url) {\r\n        return url && url.indexOf('?') > -1 ? url.split('?')[0] : url;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#updateUrlParameter\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * Updates a URL to contain the query param and value provided. If already exists then it is updated,\r\n     * if it did not previously exist, then it will be added.\r\n     *\r\n     * @param {String} url The url to be updated (this param will not be modified)\r\n     * @param {String} key The query param key\r\n     * @param {String} value The query param value\r\n     *\r\n     * @returns {String} The url with updated key/value\r\n     */\r\n    UrlUtils.prototype.updateUrlParameter = function (url, key, value) {\r\n        var i = url.indexOf('#');\r\n        var hash = i === -1 ? '' : url.substr(i);\r\n        url = i === -1 ? url : url.substr(0, i);\r\n        var regex = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');\r\n        var separator = url.indexOf('?') !== -1 ? '&' : '?';\r\n        if (url.match(regex)) {\r\n            url = url.replace(regex, '$1' + key + '=' + value + '$2');\r\n        }\r\n        else {\r\n            url = url + separator + key + '=' + value;\r\n        }\r\n        return url + hash;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getQueryString\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * <b>getQueryString</b> will convert a given object into a query string.\r\n     *\r\n     * Below is the code snippet for sample input and sample output:\r\n     *\r\n     * <pre>\r\n     * var params = {\r\n     *  key1 : 'value1',\r\n     *  key2 : 'value2',\r\n     *  key3 : 'value3'\r\n     *  }\r\n     *\r\n     *  var output = getQueryString(params);\r\n     *\r\n     *  // The output is '?&key1=value1&key2=value2&key3=value3'\r\n     *\r\n     * </pre>\r\n     * @param {Object} params Object containing a list of params.\r\n     *\r\n     * @returns {String} a query string\r\n     */\r\n    UrlUtils.prototype.getQueryString = function (params) {\r\n        var queryString = '';\r\n        if (params) {\r\n            var _loop_1 = function (param) {\r\n                if (params.hasOwnProperty(param)) {\r\n                    (lodash.isArray(params[param]) ? params[param] : [params[param]]).forEach(function (value) {\r\n                        queryString +=\r\n                            '&' + encodeURIComponent(param) + '=' + encodeURIComponent(value);\r\n                    });\r\n                }\r\n            };\r\n            for (var param in params) {\r\n                _loop_1(param);\r\n            }\r\n        }\r\n        return '?' + (!stringUtils.isBlank(queryString) ? queryString.substring(1) : queryString);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#parseQuery\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * <b>parseQuery</b> will convert a given query string to an object.\r\n     *\r\n     * Below is the code snippet for sample input and sample output:\r\n     *\r\n     * <pre>\r\n     * var query = '?key1=value1&key2=value2&key3=value3';\r\n     *\r\n     * var output = parseQuery(query);\r\n     *\r\n     * // The output is { key1 : 'value1', key2 : 'value2', key3 : 'value3' }\r\n     *\r\n     * </pre>\r\n     * @param {String} query String that needs to be parsed.\r\n     *\r\n     * @returns {Object} an object containing all params of the given query\r\n     */\r\n    UrlUtils.prototype.parseQuery = function (str) {\r\n        var objURL = {};\r\n        str.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), function ($0, $1, $2, $3) {\r\n            objURL[$1] = $3;\r\n        });\r\n        return objURL;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getAbsoluteURL\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * Makes url absolute (with provided domain) if not yet\r\n     *\r\n     * @param {String} domain the domain with witch to prepend the url if it is not absolute\r\n     * @param {String} url the url to test\r\n     *\r\n     * @returns {String} url\r\n     */\r\n    UrlUtils.prototype.getAbsoluteURL = function (domain, url) {\r\n        // url regex\r\n        // scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]\r\n        var re = new RegExp('([a-zA-Z0-9]+://)' + // scheme\r\n            '([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?' + // user:password\r\n            '([a-zA-Z0-9.-]+)' + // hostname\r\n            '|([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+)' + // or ip\r\n            '(:[0-9]+)?' + // port\r\n            '(/.*)?' // everything else\r\n        );\r\n        return re.exec(url) ? url : domain + url;\r\n    };\r\n    return UrlUtils;\r\n}());\r\nexport { UrlUtils };\r\nexport var urlUtils = new UrlUtils();\r\n//# sourceMappingURL=url-utils.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/utils/string-utils.ts"],"map":"{\"version\":3,\"file\":\"url-utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/url-utils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/utils/url-utils.d.ts","writeByteOrderMark":false,"text":"import { TypedMap } from '../dtos';\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:UrlUtils#URIBuilder\r\n *\r\n * @description\r\n * builder or URIs, build() method must be invoked to actually retrieve a URI\r\n *\r\n * @param {Object} modalStack, the $modalStack service of angular-ui.\r\n */\r\nexport declare class URIBuilder {\r\n    private uri;\r\n    private readonly wholeWordMatch;\r\n    constructor(uri: string);\r\n    build(): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name  @smartutils.services:UrlUtils#URIBuilder#replaceParams\r\n     * @methodOf  @smartutils.services:UrlUtils#URIBuilder\r\n     *\r\n     * @description\r\n     * Substitute all \":\" prefixed placeholders in the full url with the matching values in the given params\r\n     * Substitute Non \":\" prefixed placeholders containg \"_\"\r\n     *\r\n     * @param {Object} params a map of placeholder names / values\r\n     */\r\n    replaceParams(params: TypedMap<string>): URIBuilder;\r\n    /**\r\n     * @ngdoc method\r\n     * @name  @smartutils.services:UrlUtils#URIBuilder#sanitize\r\n     * @methodOf  @smartutils.services:UrlUtils#URIBuilder\r\n     *\r\n     * @description\r\n     * removes unresolved \":\" prefixed placeholders from absolute path\r\n     */\r\n    sanitize(): URIBuilder;\r\n    private substituteKeyForValue;\r\n}\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:UrlUtils\r\n *\r\n * @description\r\n * A collection of utility methods for manipulating URLs\r\n */\r\nexport declare class UrlUtils {\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getOrigin\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     * @description\r\n     * returns document location origin\r\n     * Some browsers still do not support W3C document.location.origin, this function caters for gap.\r\n     * @param {String =} url optional any url\r\n     */\r\n    getOrigin(url?: string): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getURI\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * Will return the URI part of a URL\r\n     * @param {String} url the URL the URI of which is to be returned\r\n     */\r\n    getURI(url: string): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#updateUrlParameter\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * Updates a URL to contain the query param and value provided. If already exists then it is updated,\r\n     * if it did not previously exist, then it will be added.\r\n     *\r\n     * @param {String} url The url to be updated (this param will not be modified)\r\n     * @param {String} key The query param key\r\n     * @param {String} value The query param value\r\n     *\r\n     * @returns {String} The url with updated key/value\r\n     */\r\n    updateUrlParameter(url: string, key: string, value: string): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getQueryString\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * <b>getQueryString</b> will convert a given object into a query string.\r\n     *\r\n     * Below is the code snippet for sample input and sample output:\r\n     *\r\n     * <pre>\r\n     * var params = {\r\n     *  key1 : 'value1',\r\n     *  key2 : 'value2',\r\n     *  key3 : 'value3'\r\n     *  }\r\n     *\r\n     *  var output = getQueryString(params);\r\n     *\r\n     *  // The output is '?&key1=value1&key2=value2&key3=value3'\r\n     *\r\n     * </pre>\r\n     * @param {Object} params Object containing a list of params.\r\n     *\r\n     * @returns {String} a query string\r\n     */\r\n    getQueryString(params: any): string;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#parseQuery\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * <b>parseQuery</b> will convert a given query string to an object.\r\n     *\r\n     * Below is the code snippet for sample input and sample output:\r\n     *\r\n     * <pre>\r\n     * var query = '?key1=value1&key2=value2&key3=value3';\r\n     *\r\n     * var output = parseQuery(query);\r\n     *\r\n     * // The output is { key1 : 'value1', key2 : 'value2', key3 : 'value3' }\r\n     *\r\n     * </pre>\r\n     * @param {String} query String that needs to be parsed.\r\n     *\r\n     * @returns {Object} an object containing all params of the given query\r\n     */\r\n    parseQuery(str: any): JSON;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:UrlUtils#getAbsoluteURL\r\n     * @methodOf @smartutils.services:UrlUtils\r\n     *\r\n     * @description\r\n     * Makes url absolute (with provided domain) if not yet\r\n     *\r\n     * @param {String} domain the domain with witch to prepend the url if it is not absolute\r\n     * @param {String} url the url to test\r\n     *\r\n     * @returns {String} url\r\n     */\r\n    getAbsoluteURL(domain: string, url: string): string;\r\n}\r\nexport declare const urlUtils: UrlUtils;\r\n"}}
