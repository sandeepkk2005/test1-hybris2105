{"code":"// import { UriDropdownPopulator } from './uri';\r\n// import { OptionsDropdownPopulator } from './options';\r\n/**\r\n * Interface describing the contract of a DropdownPopulator resolved by\r\n * {@link GenericEditorFactoryService} to populate the dropdowns of {@link GenericEditorDropdownComponent}.\r\n */\r\nvar DropdownPopulatorInterface = /** @class */ (function () {\r\n    function DropdownPopulatorInterface(lodash, languageService, translateService) {\r\n        this.lodash = lodash;\r\n        this.languageService = languageService;\r\n        this.translateService = translateService;\r\n    }\r\n    DropdownPopulatorInterface.prototype.getItem = function (payload) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns a promise resolving to a list of items.\r\n     * The items must all contain a property `id`.\r\n     */\r\n    DropdownPopulatorInterface.prototype.fetchAll = function (payload) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns a promise resolving to a page of items.\r\n     * The items must all contain a property `id`.\r\n     */\r\n    DropdownPopulatorInterface.prototype.fetchPage = function (payload) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Specifies whether this populator is meant to work in paged mode as opposed to retrieve lists. Optional, default is false.\r\n     */\r\n    DropdownPopulatorInterface.prototype.isPaged = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Populates the id and label property for each item in the list. If the label property is not already set,\r\n     * then we use an ordered list of attributes to use when determining the label for each item.\r\n     * @param items The array of items to set the id and label attributes on\r\n     * @param idAttribute The name of the id attribute\r\n     * @param orderedLabelAttributes The ordered list of label attributes\r\n     * @returns The modified list of items\r\n     */\r\n    DropdownPopulatorInterface.prototype.populateAttributes = function (items, idAttribute, orderedLabelAttributes) {\r\n        var _this = this;\r\n        return this.lodash.map(items, function (item) {\r\n            if (idAttribute && _this.lodash.isEmpty(item.id)) {\r\n                item.id = item[idAttribute];\r\n            }\r\n            if (orderedLabelAttributes && _this.lodash.isEmpty(item.label)) {\r\n                // Find the first attribute that the item object contains\r\n                var labelAttribute = _this.lodash.find(orderedLabelAttributes, function (attr) { return !_this.lodash.isEmpty(item[attr]); });\r\n                // If we found an attribute, set the label\r\n                if (labelAttribute) {\r\n                    item.label = item[labelAttribute];\r\n                }\r\n            }\r\n            return item;\r\n        });\r\n    };\r\n    /**\r\n     * Searches a list and returns a promise resolving to only items with a label attribute that matches the search term.\r\n     * @param items The list of items to search\r\n     * @param searchTerm The search term to filter items by\r\n     * @returns The filtered list of items\r\n     */\r\n    DropdownPopulatorInterface.prototype.search = function (items, searchTerm) {\r\n        var _this = this;\r\n        return this.languageService.getResolveLocale().then(function (isocode) {\r\n            return _this.lodash.filter(items, function (item) {\r\n                var labelValue;\r\n                if (_this.lodash.isObject(item.label)) {\r\n                    isocode = item.label[isocode] ? isocode : Object.keys(item.label)[0];\r\n                    labelValue = item.label[isocode];\r\n                }\r\n                else {\r\n                    labelValue = _this.translateService\r\n                        ? _this.translateService.instant(item.label)\r\n                        : item.label;\r\n                }\r\n                return (labelValue && labelValue.toUpperCase().indexOf(searchTerm.toUpperCase()) > -1);\r\n            });\r\n        });\r\n    };\r\n    return DropdownPopulatorInterface;\r\n}());\r\nexport { DropdownPopulatorInterface };\r\n//# sourceMappingURL=DropdownPopulatorInterface.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate/core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/language/LanguageService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/types.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/components/dropdown/populators/types.ts"],"map":"{\"version\":3,\"file\":\"DropdownPopulatorInterface.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/components/genericEditor/components/dropdown/populators/DropdownPopulatorInterface.ts\"],\"names\":[],\"mappings\":\"AAgBA,gDAAgD;AAChD,wDAAwD;AAExD;;;GAGG;AACH;IACI,oCACW,MAAuB,EACvB,eAAgC,EAChC,gBAAmC;QAFnC,WAAM,GAAN,MAAM,CAAiB;QACvB,oBAAe,GAAf,eAAe,CAAiB;QAChC,qBAAgB,GAAhB,gBAAgB,CAAmB;IAC3C,CAAC;IAEG,4CAAO,GAAd,UAAe,OAAqC;QAChD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,6CAAQ,GAAf,UAAgB,OAAiC;QAC7C,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,8CAAS,GAAhB,UACI,OAAqC;QAErC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,4CAAO,GAAd;QACI,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;;;;OAOG;IACI,uDAAkB,GAAzB,UACI,KAA4B,EAC5B,WAAmB,EACnB,sBAAgC;QAHpC,iBAyBC;QApBG,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,UAAC,IAAyB;YACpD,IAAI,WAAW,IAAI,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;gBAC7C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;aAC/B;YAED,IAAI,sBAAsB,IAAI,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC3D,yDAAyD;gBACzD,IAAM,cAAc,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CACnC,sBAAsB,EACtB,UAAC,IAAY,IAAK,OAAA,CAAC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAhC,CAAgC,CACrD,CAAC;gBAEF,0CAA0C;gBAC1C,IAAI,cAAc,EAAE;oBAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;iBACrC;aACJ;YAED,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACI,2CAAM,GAAb,UACI,KAA4B,EAC5B,UAAkB;QAFtB,iBAoBC;QAhBG,OAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAC,OAAe;YAChE,OAAA,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,UAAC,IAAyB;gBAChD,IAAI,UAAkB,CAAC;gBACvB,IAAI,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBAClC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrE,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;iBACpC;qBAAM;oBACH,UAAU,GAAG,KAAI,CAAC,gBAAgB;wBAC9B,CAAC,CAAC,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;wBAC3C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;iBACpB;gBACD,OAAO,CACH,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAChF,CAAC;YACN,CAAC,CAAC;QAbF,CAaE,CACL,CAAC;IACN,CAAC;IACL,iCAAC;AAAD,CAAC,AApGD,IAoGC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/genericEditor/components/dropdown/populators/DropdownPopulatorInterface.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport * as lo from 'lodash';\r\nimport { LanguageService } from '../../../../../services/language/LanguageService';\r\nimport { GenericEditorOption } from '../../../types';\r\nimport { DropdownPopulatorFetchPageResponse, DropdownPopulatorItemPayload, DropdownPopulatorPagePayload, DropdownPopulatorPayload, IDropdownPopulator } from './types';\r\n/**\r\n * Interface describing the contract of a DropdownPopulator resolved by\r\n * {@link GenericEditorFactoryService} to populate the dropdowns of {@link GenericEditorDropdownComponent}.\r\n */\r\nexport declare class DropdownPopulatorInterface implements IDropdownPopulator {\r\n    lodash: lo.LoDashStatic;\r\n    languageService: LanguageService;\r\n    translateService?: TranslateService;\r\n    constructor(lodash: lo.LoDashStatic, languageService: LanguageService, translateService?: TranslateService);\r\n    getItem(payload: DropdownPopulatorItemPayload): Promise<GenericEditorOption>;\r\n    /**\r\n     * Returns a promise resolving to a list of items.\r\n     * The items must all contain a property `id`.\r\n     */\r\n    fetchAll(payload: DropdownPopulatorPayload): Promise<GenericEditorOption[]>;\r\n    /**\r\n     * Returns a promise resolving to a page of items.\r\n     * The items must all contain a property `id`.\r\n     */\r\n    fetchPage(payload: DropdownPopulatorPagePayload): Promise<DropdownPopulatorFetchPageResponse>;\r\n    /**\r\n     * Specifies whether this populator is meant to work in paged mode as opposed to retrieve lists. Optional, default is false.\r\n     */\r\n    isPaged(): boolean;\r\n    /**\r\n     * Populates the id and label property for each item in the list. If the label property is not already set,\r\n     * then we use an ordered list of attributes to use when determining the label for each item.\r\n     * @param items The array of items to set the id and label attributes on\r\n     * @param idAttribute The name of the id attribute\r\n     * @param orderedLabelAttributes The ordered list of label attributes\r\n     * @returns The modified list of items\r\n     */\r\n    populateAttributes(items: GenericEditorOption[], idAttribute: string, orderedLabelAttributes: string[]): GenericEditorOption[];\r\n    /**\r\n     * Searches a list and returns a promise resolving to only items with a label attribute that matches the search term.\r\n     * @param items The list of items to search\r\n     * @param searchTerm The search term to filter items by\r\n     * @returns The filtered list of items\r\n     */\r\n    search(items: GenericEditorOption[], searchTerm: string): Promise<GenericEditorOption[]>;\r\n}\r\n"}}
