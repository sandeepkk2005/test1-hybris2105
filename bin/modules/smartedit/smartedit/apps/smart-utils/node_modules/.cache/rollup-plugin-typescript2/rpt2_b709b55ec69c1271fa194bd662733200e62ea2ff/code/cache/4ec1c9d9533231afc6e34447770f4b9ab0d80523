{"code":"import { __decorate, __metadata, __param, __spreadArrays } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport * as lodash from 'lodash';\r\nimport { EVENT_SERVICE } from '../../constants';\r\nimport { FunctionsUtils, StringUtils } from '../../utils';\r\nimport { LogService } from '../log.service';\r\nimport { CacheEngine, DefaultCacheTiming } from './engine';\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:CacheService\r\n * @description\r\n * Service to which the {@link @smartutils.object:@Cached @Cached} and {@link @smartutils.object:@InvalidateCache @InvalidateCache} annotations delegate to perform service method level caching.\r\n * It is not handled explicitly except for its evict method.\r\n */\r\nvar CacheService = /** @class */ (function () {\r\n    function CacheService(logService, stringUtils, functionsUtils, eventService, cacheEngine) {\r\n        this.logService = logService;\r\n        this.stringUtils = stringUtils;\r\n        this.functionsUtils = functionsUtils;\r\n        this.eventService = eventService;\r\n        this.cacheEngine = cacheEngine;\r\n        this.predicatesRegistry = [];\r\n        this.eventListeners = [];\r\n        this.defaultCacheTiming = new DefaultCacheTiming(24 * 60 * 60 * 1000, 12 * 60 * 60 * 1000);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:CacheService#register\r\n     * @methodOf @smartutils.services:CacheService\r\n     *\r\n     * @description\r\n     * Register a new predicate with it's associated cacheTiming.\r\n     * Each time the @Cache annotation is handled, the CacheService try to find a matching cacheTiming for the given cacheActions.\r\n     *\r\n     * @param {ICachePredicate} test This function takes the cacheActions {@link @smartutils.object:CacheAction CacheAction} argument, and must return a Boolean that is true if the given cacheActions match the predicate.\r\n     * @param {ICacheTiming} cacheTiming This function is used to call setAge(item: ICacheItem<any>) on the cached item.\r\n     *\r\n     * @return {CacheService} CacheService The CacheService instance.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * export class CustomCacheTiming implements ICacheTiming {\r\n     * \tprivate expirationAge: number;\r\n     * \tprivate refreshAge: number;\r\n     *  constructor(expirationAge: number, refreshAge: number) {\r\n     * \t\t// The cached response is discarded if it is older than the expiration age.\r\n     * \t\tthis.expirationAge = expirationAge;\r\n     * \t\t// maximum age for the cached response to be considered \"fresh.\"\r\n     * \t\tthis.refreshAge = refreshAge;\r\n     * \t}\r\n     * \tsetAge(item: ICacheItem<any>): void {\r\n     * \t\titem.expirationAge = this.expirationAge;\r\n     * \t\titem.refreshAge = this.refreshAge;\r\n     * \t}\r\n     * \t};\r\n     * \tconst customCacheTiming = new CustomCacheTiming(30 * 60000, 15 * 60000);\r\n     * \tconst customContentPredicate: ICachePredicate = (cacheActions: CacheAction[]) => {\r\n     * \t\treturn cacheActions.find((cacheAction) => cacheAction.name === 'CUSTOM_TAG') !== null;\r\n     * \t};\r\n     * this.register(customContentPredicate, customCacheTiming);\r\n     * ```\r\n     */\r\n    CacheService.prototype.register = function (test, cacheTiming) {\r\n        this.predicatesRegistry.unshift({\r\n            test: test,\r\n            cacheTiming: cacheTiming\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * public method but only meant to be used by @Cache annotation\r\n     */\r\n    CacheService.prototype.handle = function (service, methodName, preboundMethod, invocationArguments, cacheActions, tags) {\r\n        var constructorName = this.functionsUtils.getInstanceConstructorName(service);\r\n        var cachedItemId = window.btoa(constructorName + methodName) +\r\n            this.stringUtils.encode(invocationArguments);\r\n        var _item = this.cacheEngine.getItemById(cachedItemId);\r\n        var item;\r\n        if (!_item) {\r\n            var partialItem = _item || {\r\n                id: cachedItemId,\r\n                timestamp: new Date().getTime(),\r\n                evictionTags: this.collectEventNamesFromTags(tags),\r\n                cache: null\r\n            };\r\n            var cacheTiming = this.findCacheTimingByCacheActions(cacheActions);\r\n            if (!cacheTiming) {\r\n                throw new Error('CacheService::handle - No predicate match.');\r\n            }\r\n            item = cacheTiming.setAge(partialItem);\r\n            this.cacheEngine.addItem(item, cacheTiming, preboundMethod.bind.apply(preboundMethod, __spreadArrays([undefined], Array.prototype.slice.call(invocationArguments))));\r\n            this.listenForEvictionByTags(tags);\r\n        }\r\n        else {\r\n            item = _item;\r\n        }\r\n        return this.cacheEngine.handle(item);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:CacheService#evict\r\n     * @methodOf  @smartutils.services:CacheService\r\n     * @description\r\n     * Will evict the entire cache of all methods of all services referencing either directly or indirectly the given {@link @smartutils.object:EvictionTag EvictionTags}\r\n     * @param {...EvictionTag[]} evictionTags the {@link @smartutils.object:EvictionTag EvictionTags}\r\n     */\r\n    CacheService.prototype.evict = function () {\r\n        var _a;\r\n        var _this = this;\r\n        var evictionTags = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            evictionTags[_i] = arguments[_i];\r\n        }\r\n        var tags = this.collectEventNamesFromTags(evictionTags);\r\n        (_a = this.cacheEngine).evict.apply(_a, tags);\r\n        tags.forEach(function (tag) { return _this.eventService.publish(tag); });\r\n    };\r\n    CacheService.prototype.listenForEvictionByTags = function (tags) {\r\n        var _this = this;\r\n        this.collectEventNamesFromTags(tags)\r\n            .filter(function (eventId) { return _this.eventListeners.indexOf(eventId) === -1; })\r\n            .forEach(function (eventId) {\r\n            _this.logService.debug(\"registering event listener \" + eventId);\r\n            _this.eventListeners.push(eventId);\r\n            _this.eventService.subscribe(eventId, function (evt, data) {\r\n                _this.logService.debug(\"cleaning cache on event \" + eventId);\r\n                _this.cacheEngine.evict(eventId);\r\n                return Promise.resolve({});\r\n            });\r\n        });\r\n    };\r\n    CacheService.prototype.collectEventNamesFromTags = function (tags) {\r\n        var _this = this;\r\n        if (tags && tags.length) {\r\n            return lodash.union.apply(lodash, tags.map(function (t) { return _this.collectEventNamesFromTag(t); }));\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    CacheService.prototype.collectEventNamesFromTag = function (tag) {\r\n        var _this = this;\r\n        return lodash.union.apply(lodash, __spreadArrays([[tag.event]], (tag.relatedTags ? tag.relatedTags.map(function (t) { return _this.collectEventNamesFromTag(t); }) : [])));\r\n    };\r\n    CacheService.prototype.findCacheTimingByCacheActions = function (cacheActions) {\r\n        var predicate = this.predicatesRegistry.find(function (cacheTimingPredicate) {\r\n            return cacheTimingPredicate.test(cacheActions);\r\n        });\r\n        return predicate ? predicate.cacheTiming : this.defaultCacheTiming;\r\n    };\r\n    CacheService = __decorate([\r\n        Injectable(),\r\n        __param(3, Inject(EVENT_SERVICE)),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            StringUtils,\r\n            FunctionsUtils, Object, CacheEngine])\r\n    ], CacheService);\r\n    return CacheService;\r\n}());\r\nexport { CacheService };\r\n//# sourceMappingURL=cache.service.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/constants.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/interfaces/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/log.service.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/cache/cache-action.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/cache/engine/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/cache/eviction-tag.ts"],"map":"{\"version\":3,\"file\":\"cache.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/cache/cache.service.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/cache/cache.service.d.ts","writeByteOrderMark":false,"text":"import { IEventService } from '../../interfaces';\r\nimport { FunctionsUtils, StringUtils } from '../../utils';\r\nimport { LogService } from '../log.service';\r\nimport { CacheAction } from './cache-action';\r\nimport { CacheEngine, ICacheTiming, IMetadata } from './engine';\r\nimport { EvictionTag } from './eviction-tag';\r\nexport declare type ICachePredicate = (cacheActions: CacheAction[]) => boolean;\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:CacheService\r\n * @description\r\n * Service to which the {@link @smartutils.object:@Cached @Cached} and {@link @smartutils.object:@InvalidateCache @InvalidateCache} annotations delegate to perform service method level caching.\r\n * It is not handled explicitly except for its evict method.\r\n */\r\nexport declare class CacheService {\r\n    private logService;\r\n    private stringUtils;\r\n    private functionsUtils;\r\n    private eventService;\r\n    private cacheEngine;\r\n    private predicatesRegistry;\r\n    private eventListeners;\r\n    private defaultCacheTiming;\r\n    constructor(logService: LogService, stringUtils: StringUtils, functionsUtils: FunctionsUtils, eventService: IEventService, cacheEngine: CacheEngine);\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:CacheService#register\r\n     * @methodOf @smartutils.services:CacheService\r\n     *\r\n     * @description\r\n     * Register a new predicate with it's associated cacheTiming.\r\n     * Each time the @Cache annotation is handled, the CacheService try to find a matching cacheTiming for the given cacheActions.\r\n     *\r\n     * @param {ICachePredicate} test This function takes the cacheActions {@link @smartutils.object:CacheAction CacheAction} argument, and must return a Boolean that is true if the given cacheActions match the predicate.\r\n     * @param {ICacheTiming} cacheTiming This function is used to call setAge(item: ICacheItem<any>) on the cached item.\r\n     *\r\n     * @return {CacheService} CacheService The CacheService instance.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * export class CustomCacheTiming implements ICacheTiming {\r\n     * \tprivate expirationAge: number;\r\n     * \tprivate refreshAge: number;\r\n     *  constructor(expirationAge: number, refreshAge: number) {\r\n     * \t\t// The cached response is discarded if it is older than the expiration age.\r\n     * \t\tthis.expirationAge = expirationAge;\r\n     * \t\t// maximum age for the cached response to be considered \"fresh.\"\r\n     * \t\tthis.refreshAge = refreshAge;\r\n     * \t}\r\n     * \tsetAge(item: ICacheItem<any>): void {\r\n     * \t\titem.expirationAge = this.expirationAge;\r\n     * \t\titem.refreshAge = this.refreshAge;\r\n     * \t}\r\n     * \t};\r\n     * \tconst customCacheTiming = new CustomCacheTiming(30 * 60000, 15 * 60000);\r\n     * \tconst customContentPredicate: ICachePredicate = (cacheActions: CacheAction[]) => {\r\n     * \t\treturn cacheActions.find((cacheAction) => cacheAction.name === 'CUSTOM_TAG') !== null;\r\n     * \t};\r\n     * this.register(customContentPredicate, customCacheTiming);\r\n     * ```\r\n     */\r\n    register(test: ICachePredicate, cacheTiming: ICacheTiming): CacheService;\r\n    /**\r\n     * public method but only meant to be used by @Cache annotation\r\n     */\r\n    handle<T extends IMetadata>(service: any, methodName: string, preboundMethod: (...args: any[]) => Promise<T>, invocationArguments: any[], cacheActions: CacheAction[], tags: EvictionTag[]): Promise<T>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:CacheService#evict\r\n     * @methodOf  @smartutils.services:CacheService\r\n     * @description\r\n     * Will evict the entire cache of all methods of all services referencing either directly or indirectly the given {@link @smartutils.object:EvictionTag EvictionTags}\r\n     * @param {...EvictionTag[]} evictionTags the {@link @smartutils.object:EvictionTag EvictionTags}\r\n     */\r\n    evict(...evictionTags: EvictionTag[]): void;\r\n    protected listenForEvictionByTags(tags: EvictionTag[]): void;\r\n    protected collectEventNamesFromTags(tags: EvictionTag[]): string[];\r\n    protected collectEventNamesFromTag(tag: EvictionTag): string[];\r\n    protected findCacheTimingByCacheActions(cacheActions: CacheAction[]): ICacheTiming | null;\r\n}\r\n"}}
