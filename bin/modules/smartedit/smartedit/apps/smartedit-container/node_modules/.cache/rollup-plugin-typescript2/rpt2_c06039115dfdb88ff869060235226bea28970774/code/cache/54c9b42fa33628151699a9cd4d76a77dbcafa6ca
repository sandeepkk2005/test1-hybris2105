{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport * as lodash from 'lodash';\r\nimport { CONFIGURATION_URI, ISharedDataService, LogService, OperationContextRegistered, PromiseUtils, RestServiceFactory, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * LoadConfigManagerService is used to retrieve configurations stored in configuration API.\r\n */\r\nvar /* @ngInject */ LoadConfigManagerService = /** @class */ (function () {\r\n    function /* @ngInject */ LoadConfigManagerService(restServicefactory, sharedDataService, logService, promiseUtils, SMARTEDIT_RESOURCE_URI_REGEXP, SMARTEDIT_ROOT) {\r\n        this.sharedDataService = sharedDataService;\r\n        this.logService = logService;\r\n        this.promiseUtils = promiseUtils;\r\n        this.SMARTEDIT_RESOURCE_URI_REGEXP = SMARTEDIT_RESOURCE_URI_REGEXP;\r\n        this.SMARTEDIT_ROOT = SMARTEDIT_ROOT;\r\n        this.restService = restServicefactory.get(CONFIGURATION_URI);\r\n    }\r\n    /**\r\n     * Retrieves configuration from an API and returns as an array of mapped key/value pairs.\r\n     *\r\n     * ### Example:\r\n     *\r\n     *      loadConfigManagerService.loadAsArray().then(\r\n     *          (response: ConfigurationItem[]) => {\r\n     *              this._prettify(response);\r\n     *          }));\r\n     *\r\n     *\r\n     *\r\n     * @returns  a promise of configuration values as an array of mapped configuration key/value pairs\r\n     */\r\n    /* @ngInject */ LoadConfigManagerService.prototype.loadAsArray = function () {\r\n        var _this = this;\r\n        var deferred = this.promiseUtils.defer();\r\n        this.restService.query().then(function (response) {\r\n            deferred.resolve(_this._parse(response));\r\n        }, function (error) {\r\n            _this.logService.log('Fail to load the configurations.', error);\r\n            deferred.reject();\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Retrieves a configuration from the API and converts it to an object.\r\n     *\r\n     * ### Example:\r\n     *\r\n     *\r\n     *      loadConfigManagerService.loadAsObject().then((conf: ConfigurationObject) => {\r\n     *          sharedDataService.set('defaultToolingLanguage', conf.defaultToolingLanguage);\r\n     *      });\r\n     *\r\n     * @returns a promise of configuration values as an object of mapped configuration key/value pairs\r\n     */\r\n    /* @ngInject */ LoadConfigManagerService.prototype.loadAsObject = function () {\r\n        var _this = this;\r\n        var deferred = this.promiseUtils.defer();\r\n        this.loadAsArray().then(function (response) {\r\n            try {\r\n                var conf = _this._convertToObject(response);\r\n                _this.sharedDataService.set('configuration', conf);\r\n                deferred.resolve(conf);\r\n            }\r\n            catch (e) {\r\n                _this.logService.error('LoadConfigManager.loadAsObject - _convertToObject failed to load configuration:', response);\r\n                _this.logService.error(e);\r\n                deferred.reject();\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /* @ngInject */ LoadConfigManagerService.prototype._convertToObject = function (configuration) {\r\n        var _this = this;\r\n        var configurations = configuration.reduce(function (previous, current) {\r\n            try {\r\n                if (typeof previous[current.key] !== 'undefined') {\r\n                    _this.logService.error('LoadConfigManager._convertToObject() - duplicate configuration keys found: ' +\r\n                        current.key);\r\n                }\r\n                previous[current.key] = JSON.parse(current.value);\r\n            }\r\n            catch (parseError) {\r\n                _this.logService.error('item _key_ from configuration contains unparsable JSON data _value_ and was ignored'\r\n                    .replace('_key_', current.key)\r\n                    .replace('_value_', current.value));\r\n            }\r\n            return previous;\r\n        }, {});\r\n        try {\r\n            configurations.domain = this.SMARTEDIT_RESOURCE_URI_REGEXP.exec(this._getLocation())[1];\r\n        }\r\n        catch (e) {\r\n            throw new Error(\"location \" + this._getLocation() + \" doesn't match the expected pattern \" + this.SMARTEDIT_RESOURCE_URI_REGEXP);\r\n        }\r\n        configurations.smarteditroot = configurations.domain + '/' + this.SMARTEDIT_ROOT;\r\n        return configurations;\r\n    };\r\n    /* @ngInject */ LoadConfigManagerService.prototype._getLocation = function () {\r\n        return document.location.href;\r\n    };\r\n    // FIXME: weird on an array and useless\r\n    /* @ngInject */ LoadConfigManagerService.prototype._parse = function (configuration) {\r\n        var conf = lodash.cloneDeep(configuration);\r\n        Object.keys(conf).forEach(function (key) {\r\n            try {\r\n                conf[key] = JSON.parse(conf[key]);\r\n            }\r\n            catch (e) {\r\n                //\r\n            }\r\n        });\r\n        return conf;\r\n    };\r\n    /* @ngInject */ LoadConfigManagerService = __decorate([\r\n        SeDowngradeService(),\r\n        OperationContextRegistered(CONFIGURATION_URI, 'TOOLING'),\r\n        Injectable(),\r\n        __param(4, Inject('SMARTEDIT_RESOURCE_URI_REGEXP')),\r\n        __param(5, Inject('SMARTEDIT_ROOT')),\r\n        __metadata(\"design:paramtypes\", [RestServiceFactory,\r\n            ISharedDataService,\r\n            LogService,\r\n            PromiseUtils,\r\n            RegExp, String])\r\n    ], /* @ngInject */ LoadConfigManagerService);\r\n    return /* @ngInject */ LoadConfigManagerService;\r\n}());\r\nexport { /* @ngInject */ LoadConfigManagerService };\r\n//# sourceMappingURL=LoadConfigManagerService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/bootstrap/Configuration.ts"],"map":"{\"version\":3,\"file\":\"LoadConfigManagerService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/bootstrap/LoadConfigManagerService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/bootstrap/LoadConfigManagerService.d.ts","writeByteOrderMark":false,"text":"import { ISharedDataService, LogService, PromiseUtils, RestServiceFactory } from 'smarteditcommons';\r\nimport { ConfigurationItem, ConfigurationObject } from './Configuration';\r\n/**\r\n * LoadConfigManagerService is used to retrieve configurations stored in configuration API.\r\n */\r\nexport declare class LoadConfigManagerService {\r\n    private sharedDataService;\r\n    private logService;\r\n    private promiseUtils;\r\n    private SMARTEDIT_RESOURCE_URI_REGEXP;\r\n    private SMARTEDIT_ROOT;\r\n    private restService;\r\n    constructor(restServicefactory: RestServiceFactory, sharedDataService: ISharedDataService, logService: LogService, promiseUtils: PromiseUtils, SMARTEDIT_RESOURCE_URI_REGEXP: RegExp, SMARTEDIT_ROOT: string);\r\n    /**\r\n     * Retrieves configuration from an API and returns as an array of mapped key/value pairs.\r\n     *\r\n     * ### Example:\r\n     *\r\n     *      loadConfigManagerService.loadAsArray().then(\r\n     *          (response: ConfigurationItem[]) => {\r\n     *              this._prettify(response);\r\n     *          }));\r\n     *\r\n     *\r\n     *\r\n     * @returns  a promise of configuration values as an array of mapped configuration key/value pairs\r\n     */\r\n    loadAsArray(): Promise<ConfigurationItem[]>;\r\n    /**\r\n     * Retrieves a configuration from the API and converts it to an object.\r\n     *\r\n     * ### Example:\r\n     *\r\n     *\r\n     *      loadConfigManagerService.loadAsObject().then((conf: ConfigurationObject) => {\r\n     *          sharedDataService.set('defaultToolingLanguage', conf.defaultToolingLanguage);\r\n     *      });\r\n     *\r\n     * @returns a promise of configuration values as an object of mapped configuration key/value pairs\r\n     */\r\n    loadAsObject(): Promise<ConfigurationObject>;\r\n    private _convertToObject;\r\n    private _getLocation;\r\n    private _parse;\r\n}\r\n"}}
