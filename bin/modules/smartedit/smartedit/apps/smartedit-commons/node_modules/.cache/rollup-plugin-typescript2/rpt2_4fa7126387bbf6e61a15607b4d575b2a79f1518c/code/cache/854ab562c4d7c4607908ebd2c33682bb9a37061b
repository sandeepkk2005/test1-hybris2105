{"code":"import * as lo from 'lodash';\r\n/**\r\n * ExperienceService deals with building experience objects given a context.\r\n */\r\nvar IExperienceService = /** @class */ (function () {\r\n    function IExperienceService() {\r\n    }\r\n    IExperienceService.prototype.updateExperiencePageContext = function (pageCatalogVersionUuid, pageId) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Retrieves the active experience.\r\n     */\r\n    IExperienceService.prototype.getCurrentExperience = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Stores a given experience as current experience.\r\n     * Invoking this method ensures that a hard refresh of the application will preserve the experience.\r\n     */\r\n    IExperienceService.prototype.setCurrentExperience = function (experience) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Determines whether the catalog version has changed between the previous and current experience\r\n     */\r\n    IExperienceService.prototype.hasCatalogVersionChanged = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Retrieves the active experience, creates a new preview ticket and returns a new preview url with an updated\r\n     * previewTicketId query param\r\n     *\r\n     * @returns An URL containing the new `previewTicketId`\r\n     */\r\n    IExperienceService.prototype.buildRefreshedPreviewUrl = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Retrieves the active experience, merges it with a new experience, creates a new preview ticket and reloads the\r\n     * preview within the iframeManagerService\r\n     *\r\n     * @param newExperience The object containing new attributes to be merged with the current experience\r\n     *\r\n     * @returns A promise of the updated experience\r\n     */\r\n    IExperienceService.prototype.updateExperience = function (newExperience) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    IExperienceService.prototype.loadExperience = function (params) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method compares all the properties of given experience of type IDefaultExperienceParams with the current experience.\r\n     *\r\n     * @param experience The object containing default experience params such as pageId, catalogId, catalogVersion and siteId\r\n     *\r\n     * @return True if current experience matches with the gien experience. Otherwise false.\r\n     */\r\n    IExperienceService.prototype.compareWithCurrentExperience = function (experience) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /** @internal */\r\n    IExperienceService.prototype._convertExperienceToPreviewData = function (experience, resourcePath) {\r\n        var previewData = lo.cloneDeep(experience);\r\n        var catalogVersions = [];\r\n        delete previewData.catalogDescriptor;\r\n        delete previewData.siteDescriptor;\r\n        delete previewData.languageDescriptor;\r\n        delete previewData.pageContext;\r\n        delete previewData.productCatalogVersions;\r\n        if (experience.productCatalogVersions && experience.productCatalogVersions.length) {\r\n            experience.productCatalogVersions.forEach(function (productCatalogVersion) {\r\n                catalogVersions.push({\r\n                    catalog: productCatalogVersion.catalog,\r\n                    catalogVersion: productCatalogVersion.catalogVersion\r\n                });\r\n            });\r\n        }\r\n        catalogVersions.push({\r\n            catalog: experience.catalogDescriptor.catalogId,\r\n            catalogVersion: experience.catalogDescriptor.catalogVersion\r\n        });\r\n        previewData.catalogVersions = catalogVersions;\r\n        previewData.language = experience.languageDescriptor.isocode;\r\n        previewData.resourcePath = resourcePath;\r\n        previewData.siteId = experience.siteDescriptor.uid;\r\n        return previewData;\r\n    };\r\n    /**\r\n     * If an experience is set in the shared data service, this method will load the preview for this experience (such as Catalog, language, date and time).\r\n     * Otherwise, the user will be redirected to the landing page to select an experience.\r\n     * To load a preview, we need to get a preview ticket from an API.\r\n     * Here we set current location to null initially so that the iframe manager loads the provided url and set the location.\r\n     *\r\n     * @returns a promise returning the experience\r\n     */\r\n    IExperienceService.prototype.initializeExperience = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Given an object containing a siteId, catalogId, catalogVersion and catalogVersions (array of product catalog version uuid's), will return a reconstructed experience\r\n     *\r\n     */\r\n    IExperienceService.prototype.buildAndSetExperience = function (params) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    return IExperienceService;\r\n}());\r\nexport { IExperienceService };\r\n//# sourceMappingURL=IExperienceService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IExperience.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IPreview.ts"],"map":"{\"version\":3,\"file\":\"IExperienceService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/IExperienceService.ts\"],\"names\":[],\"mappings\":\"AAIA,OAAO,KAAK,EAAE,MAAM,QAAQ,CAAC;AAS7B;;GAEG;AACH;IAAA;IAkIA,CAAC;IAjIG,wDAA2B,GAA3B,UACI,sBAA8B,EAC9B,MAAc;QAEd,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,iDAAoB,GAApB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,iDAAoB,GAApB,UAAqB,UAAuB;QACxC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,qDAAwB,GAAxB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,qDAAwB,GAAxB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACH,6CAAgB,GAAhB,UAAiB,aAAuB;QACpC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,2CAAc,GAAd,UAAe,MAAgC;QAC3C,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACH,yDAA4B,GAA5B,UAA6B,UAAoC;QAC7D,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,gBAAgB;IAChB,4DAA+B,GAA/B,UAAgC,UAAuB,EAAE,YAAoB;QACzE,IAAM,WAAW,GAAG,EAAE,CAAC,SAAS,CAAC,UAAU,CAAQ,CAAC;QACpD,IAAM,eAAe,GAAiC,EAAE,CAAC;QAEzD,OAAO,WAAW,CAAC,iBAAiB,CAAC;QACrC,OAAO,WAAW,CAAC,cAAc,CAAC;QAClC,OAAO,WAAW,CAAC,kBAAkB,CAAC;QACtC,OAAO,WAAW,CAAC,WAAW,CAAC;QAC/B,OAAO,WAAW,CAAC,sBAAsB,CAAC;QAE1C,IAAI,UAAU,CAAC,sBAAsB,IAAI,UAAU,CAAC,sBAAsB,CAAC,MAAM,EAAE;YAC/E,UAAU,CAAC,sBAAsB,CAAC,OAAO,CACrC,UAAC,qBAAgD;gBAC7C,eAAe,CAAC,IAAI,CAAC;oBACjB,OAAO,EAAE,qBAAqB,CAAC,OAAO;oBACtC,cAAc,EAAE,qBAAqB,CAAC,cAAc;iBACvD,CAAC,CAAC;YACP,CAAC,CACJ,CAAC;SACL;QACD,eAAe,CAAC,IAAI,CAAC;YACjB,OAAO,EAAE,UAAU,CAAC,iBAAiB,CAAC,SAAS;YAC/C,cAAc,EAAE,UAAU,CAAC,iBAAiB,CAAC,cAAc;SAC9D,CAAC,CAAC;QAEH,WAAW,CAAC,eAAe,GAAG,eAAe,CAAC;QAC9C,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC;QAC7D,WAAW,CAAC,YAAY,GAAG,YAAY,CAAC;QACxC,WAAW,CAAC,MAAM,GAAG,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC;QAEnD,OAAO,WAA2B,CAAC;IACvC,CAAC;IAED;;;;;;;OAOG;IACH,iDAAoB,GAApB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,kDAAqB,GAArB,UAAsB,MAAyB;QAC3C,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,yBAAC;AAAD,CAAC,AAlID,IAkIC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/interfaces/IExperienceService.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\nimport { Payload } from '@smart/utils';\r\nimport { IDefaultExperienceParams, IExperience, IExperienceParams } from './IExperience';\r\nimport { IPreviewData } from './IPreview';\r\n/**\r\n * ExperienceService deals with building experience objects given a context.\r\n */\r\nexport declare abstract class IExperienceService {\r\n    updateExperiencePageContext(pageCatalogVersionUuid: string, pageId: string): Promise<IExperience>;\r\n    /**\r\n     * Retrieves the active experience.\r\n     */\r\n    getCurrentExperience(): Promise<IExperience>;\r\n    /**\r\n     * Stores a given experience as current experience.\r\n     * Invoking this method ensures that a hard refresh of the application will preserve the experience.\r\n     */\r\n    setCurrentExperience(experience: IExperience): Promise<IExperience>;\r\n    /**\r\n     * Determines whether the catalog version has changed between the previous and current experience\r\n     */\r\n    hasCatalogVersionChanged(): Promise<boolean>;\r\n    /**\r\n     * Retrieves the active experience, creates a new preview ticket and returns a new preview url with an updated\r\n     * previewTicketId query param\r\n     *\r\n     * @returns An URL containing the new `previewTicketId`\r\n     */\r\n    buildRefreshedPreviewUrl(): Promise<string>;\r\n    /**\r\n     * Retrieves the active experience, merges it with a new experience, creates a new preview ticket and reloads the\r\n     * preview within the iframeManagerService\r\n     *\r\n     * @param newExperience The object containing new attributes to be merged with the current experience\r\n     *\r\n     * @returns A promise of the updated experience\r\n     */\r\n    updateExperience(newExperience?: Payload): Promise<IExperience>;\r\n    loadExperience(params: IDefaultExperienceParams): Promise<angular.ILocationService | void>;\r\n    /**\r\n     * This method compares all the properties of given experience of type IDefaultExperienceParams with the current experience.\r\n     *\r\n     * @param experience The object containing default experience params such as pageId, catalogId, catalogVersion and siteId\r\n     *\r\n     * @return True if current experience matches with the gien experience. Otherwise false.\r\n     */\r\n    compareWithCurrentExperience(experience: IDefaultExperienceParams): Promise<boolean>;\r\n    /** @internal */\r\n    _convertExperienceToPreviewData(experience: IExperience, resourcePath: string): IPreviewData;\r\n    /**\r\n     * If an experience is set in the shared data service, this method will load the preview for this experience (such as Catalog, language, date and time).\r\n     * Otherwise, the user will be redirected to the landing page to select an experience.\r\n     * To load a preview, we need to get a preview ticket from an API.\r\n     * Here we set current location to null initially so that the iframe manager loads the provided url and set the location.\r\n     *\r\n     * @returns a promise returning the experience\r\n     */\r\n    initializeExperience(): Promise<IExperience>;\r\n    /**\r\n     * Given an object containing a siteId, catalogId, catalogVersion and catalogVersions (array of product catalog version uuid's), will return a reconstructed experience\r\n     *\r\n     */\r\n    buildAndSetExperience(params: IExperienceParams): Promise<IExperience>;\r\n}\r\n"}}
