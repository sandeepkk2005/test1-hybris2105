{"code":"import { __decorate, __extends, __metadata, __param, __spreadArrays } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport * as lo from 'lodash';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter, mergeMap, take } from 'rxjs/operators';\r\nimport { CrossFrameEventService, EVENT_SERVICE, EVENTS, GatewayProxied, ICatalogService, IExperienceService, IPreviewService, ISharedDataService, IStorageManager, IStoragePropertiesService, LanguageService, LogService, NG_ROUTE_PREFIX, SeDowngradeService, SmarteditRoutingService, STORE_FRONT_CONTEXT, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\nimport { IframeManagerService } from './iframe/IframeManagerService';\r\nimport { SiteService } from './SiteService';\r\n/** @internal */\r\nvar /* @ngInject */ ExperienceService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ ExperienceService, _super);\r\n    function /* @ngInject */ ExperienceService(seStorageManager, storagePropertiesService, logService, crossFrameEventService, siteService, previewService, catalogService, languageService, sharedDataService, iframeManagerService, routingService) {\r\n        var _this = _super.call(this) || this;\r\n        _this.seStorageManager = seStorageManager;\r\n        _this.storagePropertiesService = storagePropertiesService;\r\n        _this.logService = logService;\r\n        _this.crossFrameEventService = crossFrameEventService;\r\n        _this.siteService = siteService;\r\n        _this.previewService = previewService;\r\n        _this.catalogService = catalogService;\r\n        _this.languageService = languageService;\r\n        _this.sharedDataService = sharedDataService;\r\n        _this.iframeManagerService = iframeManagerService;\r\n        _this.routingService = routingService;\r\n        _this.storageLoaded$ = new BehaviorSubject(false);\r\n        seStorageManager\r\n            .getStorage({\r\n            storageId: EXPERIENCE_STORAGE_KEY,\r\n            storageType: storagePropertiesService.getProperty('STORAGE_TYPE_SESSION_STORAGE')\r\n        })\r\n            .then(function (_storage) {\r\n            _this.experienceStorage = _storage;\r\n            _this.storageLoaded$.next(true);\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Given an object containing a siteId, catalogId, catalogVersion and catalogVersions (array of product catalog version uuid's), will return a reconstructed experience\r\n     *\r\n     */\r\n    /* @ngInject */ ExperienceService.prototype.buildAndSetExperience = function (params) {\r\n        var _this = this;\r\n        var siteId = params.siteId;\r\n        var catalogId = params.catalogId;\r\n        var catalogVersion = params.catalogVersion;\r\n        var productCatalogVersions = params.productCatalogVersions;\r\n        return Promise.all([\r\n            this.siteService.getSiteById(siteId),\r\n            this.catalogService.getContentCatalogsForSite(siteId),\r\n            this.catalogService.getProductCatalogsForSite(siteId),\r\n            this.languageService.getLanguagesForSite(siteId)\r\n        ]).then(function (_a) {\r\n            var siteDescriptor = _a[0], catalogs = _a[1], productCatalogs = _a[2], languages = _a[3];\r\n            var currentCatalog = catalogs.find(function (catalog) { return catalog.catalogId === catalogId; });\r\n            var currentCatalogVersion = currentCatalog\r\n                ? currentCatalog.versions.find(function (result) { return result.version === catalogVersion; })\r\n                : null;\r\n            if (!currentCatalogVersion) {\r\n                return Promise.reject(\"no catalogVersionDescriptor found for \" + catalogId + \" catalogId and \" + catalogVersion + \" catalogVersion\");\r\n            }\r\n            var currentExperienceProductCatalogVersions = [];\r\n            productCatalogs.forEach(function (productCatalog) {\r\n                // for each product catalog either choose the version already present in the params or choose the active version.\r\n                var currentProductCatalogVersion = productCatalog.versions.find(function (version) {\r\n                    return productCatalogVersions\r\n                        ? productCatalogVersions.indexOf(version.uuid) > -1\r\n                        : version.active === true;\r\n                });\r\n                currentExperienceProductCatalogVersions.push({\r\n                    catalog: productCatalog.catalogId,\r\n                    catalogName: productCatalog.name,\r\n                    catalogVersion: currentProductCatalogVersion.version,\r\n                    active: currentProductCatalogVersion.active,\r\n                    uuid: currentProductCatalogVersion.uuid\r\n                });\r\n            });\r\n            var languageDescriptor = params.language\r\n                ? languages.find(function (lang) { return lang.isocode === params.language; })\r\n                : languages[0];\r\n            var defaultExperience = lo.cloneDeep(params);\r\n            delete defaultExperience.siteId;\r\n            delete defaultExperience.catalogId;\r\n            delete defaultExperience.catalogVersion;\r\n            defaultExperience.siteDescriptor = siteDescriptor;\r\n            defaultExperience.catalogDescriptor = {\r\n                catalogId: catalogId,\r\n                catalogVersion: currentCatalogVersion.version,\r\n                catalogVersionUuid: currentCatalogVersion.uuid,\r\n                name: currentCatalog.name,\r\n                siteId: siteId,\r\n                active: currentCatalogVersion.active\r\n            };\r\n            defaultExperience.languageDescriptor = languageDescriptor;\r\n            defaultExperience.time = defaultExperience.time || null;\r\n            defaultExperience.productCatalogVersions = currentExperienceProductCatalogVersions;\r\n            return _this.setCurrentExperience(defaultExperience);\r\n        });\r\n    };\r\n    /**\r\n     * Used to update the page ID stored in the current experience and reloads the page to make the changes visible.\r\n     *\r\n     * @param newPageID the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    /* @ngInject */ ExperienceService.prototype.updateExperiencePageId = function (newPageID) {\r\n        var _this = this;\r\n        return this.getCurrentExperience().then(function (currentExperience) {\r\n            if (!currentExperience) {\r\n                // Experience haven't been set. Thus, the experience hasn't been loaded.\r\n                // No need to update the experience then.\r\n                return null;\r\n            }\r\n            currentExperience.pageId = newPageID;\r\n            _this.setCurrentExperience(currentExperience);\r\n            _this.reloadPage();\r\n        });\r\n    };\r\n    /**\r\n     * Used to update the experience with the parameters provided and reloads the page to make the changes visible.\r\n     *\r\n     * @param params The object containing the paratements for the experience to be loaded.\r\n     * @param params.siteId the ID of the site that must be stored in the current experience.\r\n     * @param params.catalogId the ID of the catalog that must be stored in the current experience.\r\n     * @param params.catalogVersion the version of the catalog that must be stored in the current experience.\r\n     * @param params.pageId the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    /* @ngInject */ ExperienceService.prototype.loadExperience = function (params) {\r\n        var _this = this;\r\n        return this.buildAndSetExperience(params).then(function () { return _this.reloadPage(); });\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.reloadPage = function () {\r\n        this.routingService.reload(\"\" + NG_ROUTE_PREFIX + STORE_FRONT_CONTEXT);\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.updateExperiencePageContext = function (pageCatalogVersionUuid, pageId) {\r\n        var _this = this;\r\n        return this.getCurrentExperience()\r\n            .then(function (currentExperience) {\r\n            return _this.catalogService\r\n                .getContentCatalogsForSite(currentExperience.catalogDescriptor.siteId)\r\n                .then(function (catalogs) {\r\n                if (!currentExperience) {\r\n                    // Experience haven't been set. Thus, the experience hasn't been loaded. No need to update the\r\n                    // experience then.\r\n                    return null;\r\n                }\r\n                var allCatalogs = catalogs.reduce(function (acc, catalog) {\r\n                    if (catalog.parents && catalog.parents.length) {\r\n                        catalog.parents.forEach(function (parent) {\r\n                            acc.push(parent);\r\n                        });\r\n                    }\r\n                    return acc;\r\n                }, __spreadArrays(catalogs));\r\n                var pageCatalogVersion = lo\r\n                    .flatten(allCatalogs.map(function (catalog) {\r\n                    return catalog.versions.map(function (version) {\r\n                        version.catalogName =\r\n                            catalog.name ||\r\n                                catalog.catalogName;\r\n                        version.catalogId = catalog.catalogId;\r\n                        return version;\r\n                    });\r\n                }))\r\n                    .find(function (version) {\r\n                    return version.uuid === pageCatalogVersionUuid;\r\n                });\r\n                return _this.catalogService.getCurrentSiteID().then(function (siteID) {\r\n                    currentExperience.pageId = pageId;\r\n                    currentExperience.pageContext = {\r\n                        catalogId: pageCatalogVersion.catalogId,\r\n                        catalogName: pageCatalogVersion.catalogName,\r\n                        catalogVersion: pageCatalogVersion.version,\r\n                        catalogVersionUuid: pageCatalogVersion.uuid,\r\n                        siteId: siteID,\r\n                        active: pageCatalogVersion.active\r\n                    };\r\n                    return _this.setCurrentExperience(currentExperience);\r\n                });\r\n            });\r\n        })\r\n            .then(function (experience) {\r\n            _this.crossFrameEventService.publish(EVENTS.PAGE_CHANGE, experience);\r\n            return experience;\r\n        });\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.getCurrentExperience = function () {\r\n        // After Angular porting of StorageModule the experienceStorage load promise seems to be resolved after execution of getCurrentExperience.\r\n        // To avoid errors the method is triggered once experienceStorage is present.\r\n        var _this = this;\r\n        return this.storageLoaded$\r\n            .pipe(filter(function (value) { return value; }), take(1), mergeMap(function () { return _this.experienceStorage.get(EXPERIENCE_STORAGE_KEY); }))\r\n            .toPromise();\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.setCurrentExperience = function (experience) {\r\n        var _this = this;\r\n        return this.getCurrentExperience().then(function (previousExperience) {\r\n            _this.previousExperience = previousExperience;\r\n            return _this.experienceStorage.put(experience, EXPERIENCE_STORAGE_KEY).then(function () {\r\n                _this.sharedDataService.set(EXPERIENCE_STORAGE_KEY, experience);\r\n                return Promise.resolve(experience);\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.hasCatalogVersionChanged = function () {\r\n        var _this = this;\r\n        return this.getCurrentExperience().then(function (currentExperience) {\r\n            return _this.previousExperience === undefined ||\r\n                currentExperience.catalogDescriptor.catalogId !==\r\n                    _this.previousExperience.catalogDescriptor.catalogId ||\r\n                currentExperience.catalogDescriptor.catalogVersion !==\r\n                    _this.previousExperience.catalogDescriptor.catalogVersion;\r\n        });\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.initializeExperience = function () {\r\n        var _this = this;\r\n        this.iframeManagerService.setCurrentLocation(null);\r\n        return this.getCurrentExperience().then(function (experience) {\r\n            if (!experience) {\r\n                _this.routingService.go(NG_ROUTE_PREFIX);\r\n                return null;\r\n            }\r\n            return _this.updateExperience();\r\n        }, function (err) {\r\n            _this.logService.error('ExperienceService.initializeExperience() - failed to retrieve experience');\r\n            return Promise.reject(err);\r\n        });\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.updateExperience = function (newExperience) {\r\n        var _this = this;\r\n        return this.getCurrentExperience().then(function (experience) {\r\n            // create a deep copy of the current experience\r\n            experience = lo.cloneDeep(experience);\r\n            // merge the new experience into the copy of the current experience\r\n            lo.merge(experience, newExperience);\r\n            _this.previewService\r\n                .getResourcePathFromPreviewUrl(experience.siteDescriptor.previewUrl)\r\n                .then(function (resourcePath) {\r\n                var previewData = _this._convertExperienceToPreviewData(experience, resourcePath);\r\n                return _this.previewService.createPreview(previewData).then(function (previewResponse) {\r\n                    /* forbiddenNameSpaces window._:false */\r\n                    window.__smartedit__.smartEditBootstrapped = {};\r\n                    _this.iframeManagerService.loadPreview(previewResponse.resourcePath, previewResponse.ticketId);\r\n                    return _this.setCurrentExperience(experience);\r\n                }, function (err) {\r\n                    _this.logService.error('iframeManagerService.updateExperience() - failed to update experience');\r\n                    return Promise.reject(err);\r\n                });\r\n            }, function (err) {\r\n                _this.logService.error('ExperienceService.updateExperience() - failed to retrieve resource path');\r\n                return Promise.reject(err);\r\n            });\r\n        }, function (err) {\r\n            _this.logService.error('ExperienceService.updateExperience() - failed to retrieve current experience');\r\n            return Promise.reject(err);\r\n        });\r\n    };\r\n    /* @ngInject */ ExperienceService.prototype.compareWithCurrentExperience = function (experience) {\r\n        if (!experience) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return this.getCurrentExperience().then(function (currentExperience) {\r\n            if (!currentExperience) {\r\n                return Promise.resolve(false);\r\n            }\r\n            if (currentExperience.pageId === experience.pageId &&\r\n                currentExperience.siteDescriptor.uid === experience.siteId &&\r\n                currentExperience.catalogDescriptor.catalogId === experience.catalogId &&\r\n                currentExperience.catalogDescriptor.catalogVersion === experience.catalogVersion) {\r\n                return Promise.resolve(true);\r\n            }\r\n            return Promise.resolve(false);\r\n        });\r\n    };\r\n    /* @ngInject */ ExperienceService = __decorate([\r\n        SeDowngradeService(IExperienceService),\r\n        GatewayProxied('loadExperience', 'updateExperiencePageContext', 'getCurrentExperience', 'hasCatalogVersionChanged', 'buildRefreshedPreviewUrl', 'compareWithCurrentExperience'),\r\n        __param(3, Inject(EVENT_SERVICE)),\r\n        __metadata(\"design:paramtypes\", [IStorageManager,\r\n            IStoragePropertiesService,\r\n            LogService,\r\n            CrossFrameEventService,\r\n            SiteService,\r\n            IPreviewService,\r\n            ICatalogService,\r\n            LanguageService,\r\n            ISharedDataService,\r\n            IframeManagerService,\r\n            SmarteditRoutingService])\r\n    ], /* @ngInject */ ExperienceService);\r\n    return /* @ngInject */ ExperienceService;\r\n}(IExperienceService));\r\nexport { /* @ngInject */ ExperienceService };\r\n//# sourceMappingURL=ExperienceServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/iframe/IframeManagerService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/SiteService.ts"],"map":"{\"version\":3,\"file\":\"ExperienceServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ExperienceServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/ExperienceServiceOuter.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\nimport { CrossFrameEventService, ICatalogService, IDefaultExperienceParams, IExperience, IExperienceParams, IExperienceService, IPreviewService, ISharedDataService, IStorageManager, IStoragePropertiesService, LanguageService, LogService, Payload, SmarteditRoutingService } from 'smarteditcommons';\r\nimport { IframeManagerService } from './iframe/IframeManagerService';\r\nimport { SiteService } from './SiteService';\r\n/** @internal */\r\nexport declare class ExperienceService extends IExperienceService {\r\n    seStorageManager: IStorageManager;\r\n    storagePropertiesService: IStoragePropertiesService;\r\n    private logService;\r\n    private crossFrameEventService;\r\n    private siteService;\r\n    private previewService;\r\n    private catalogService;\r\n    private languageService;\r\n    private sharedDataService;\r\n    private iframeManagerService;\r\n    private routingService;\r\n    private previousExperience;\r\n    private experienceStorage;\r\n    private storageLoaded$;\r\n    constructor(seStorageManager: IStorageManager, storagePropertiesService: IStoragePropertiesService, logService: LogService, crossFrameEventService: CrossFrameEventService, siteService: SiteService, previewService: IPreviewService, catalogService: ICatalogService, languageService: LanguageService, sharedDataService: ISharedDataService, iframeManagerService: IframeManagerService, routingService: SmarteditRoutingService);\r\n    /**\r\n     * Given an object containing a siteId, catalogId, catalogVersion and catalogVersions (array of product catalog version uuid's), will return a reconstructed experience\r\n     *\r\n     */\r\n    buildAndSetExperience(params: IExperienceParams): Promise<IExperience>;\r\n    /**\r\n     * Used to update the page ID stored in the current experience and reloads the page to make the changes visible.\r\n     *\r\n     * @param newPageID the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    updateExperiencePageId(newPageID: string): Promise<any>;\r\n    /**\r\n     * Used to update the experience with the parameters provided and reloads the page to make the changes visible.\r\n     *\r\n     * @param params The object containing the paratements for the experience to be loaded.\r\n     * @param params.siteId the ID of the site that must be stored in the current experience.\r\n     * @param params.catalogId the ID of the catalog that must be stored in the current experience.\r\n     * @param params.catalogVersion the version of the catalog that must be stored in the current experience.\r\n     * @param params.pageId the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    loadExperience(params: IDefaultExperienceParams): Promise<angular.ILocationService | void>;\r\n    reloadPage(): void;\r\n    updateExperiencePageContext(pageCatalogVersionUuid: string, pageId: string): Promise<IExperience>;\r\n    getCurrentExperience(): Promise<IExperience>;\r\n    setCurrentExperience(experience: IExperience): Promise<IExperience>;\r\n    hasCatalogVersionChanged(): Promise<boolean>;\r\n    initializeExperience(): Promise<IExperience>;\r\n    updateExperience(newExperience?: Payload): Promise<IExperience>;\r\n    compareWithCurrentExperience(experience: IDefaultExperienceParams): Promise<boolean>;\r\n}\r\n"}}
