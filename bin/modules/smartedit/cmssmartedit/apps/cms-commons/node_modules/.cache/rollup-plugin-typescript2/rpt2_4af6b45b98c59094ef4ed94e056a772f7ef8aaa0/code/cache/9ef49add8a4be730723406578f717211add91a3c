{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CrossFrameEventService, IAlertService, IAuthenticationService, OperationContextRegistered, OPERATION_CONTEXT, IRestServiceFactory, SeDowngradeService, TimerService } from 'smarteditcommons';\r\nimport { JOB_STATUS } from '../dtos';\r\nimport { DEFAULT_SYNCHRONIZATION_EVENT } from '../modules/synchronizationPanel';\r\nexport var CATALOG_SYNC_INTERVAL_IN_MILLISECONDS = 5000;\r\nvar /* @ngInject */ SynchronizationService = /** @class */ (function () {\r\n    function /* @ngInject */ SynchronizationService(restServiceFactory, timerService, translateService, alertService, authenticationService, crossFrameEventService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.timerService = timerService;\r\n        this.translateService = translateService;\r\n        this.alertService = alertService;\r\n        this.authenticationService = authenticationService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        // Constants\r\n        this.BASE_URL = '/cmswebservices';\r\n        this.SYNC_JOB_INFO_BY_TARGET_URI = '/cmswebservices/v1/catalogs/:catalog/synchronizations/targetversions/:target';\r\n        this.SYNC_JOB_INFO_BY_SOURCE_AND_TARGET_URI = '/cmswebservices/v1/catalogs/:catalog/versions/:source/synchronizations/versions/:target';\r\n        this.intervalHandle = {};\r\n        this.syncRequested = [];\r\n        this.syncJobInfoByTargetRestService = this.restServiceFactory.get(this.SYNC_JOB_INFO_BY_TARGET_URI);\r\n        this.syncJobInfoBySourceAndTargetRestService = this.restServiceFactory.get(this.SYNC_JOB_INFO_BY_SOURCE_AND_TARGET_URI, 'catalog');\r\n    }\r\n    /**\r\n     * This method is used to synchronize a catalog between two catalog versions.\r\n     * It sends the SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event if successful.\r\n     */\r\n    /* @ngInject */ SynchronizationService.prototype.updateCatalogSync = function (catalog) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var jobKey, response, reason_1, translationErrorMsg;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        jobKey = this._getJobKey(catalog.catalogId, catalog.sourceCatalogVersion, catalog.targetCatalogVersion);\r\n                        this.addCatalogSyncRequest(jobKey);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.syncJobInfoBySourceAndTargetRestService.save({\r\n                                catalog: catalog.catalogId,\r\n                                source: catalog.sourceCatalogVersion,\r\n                                target: catalog.targetCatalogVersion\r\n                            })];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, response];\r\n                    case 3:\r\n                        reason_1 = _a.sent();\r\n                        translationErrorMsg = this.translateService.instant('sync.running.error.msg', {\r\n                            catalogName: catalog.name\r\n                        });\r\n                        if (reason_1.statusText === 'Conflict') {\r\n                            this.alertService.showDanger({\r\n                                message: translationErrorMsg\r\n                            });\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    /* @ngInject */ SynchronizationService.prototype.getCatalogSyncStatus = function (catalog) {\r\n        if (catalog.sourceCatalogVersion) {\r\n            return this.getSyncJobInfoBySourceAndTarget(catalog);\r\n        }\r\n        else {\r\n            return this.getLastSyncJobInfoByTarget(catalog);\r\n        }\r\n    };\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    /* @ngInject */ SynchronizationService.prototype.getSyncJobInfoBySourceAndTarget = function (catalog) {\r\n        return this.syncJobInfoBySourceAndTargetRestService.get({\r\n            catalog: catalog.catalogId,\r\n            source: catalog.sourceCatalogVersion,\r\n            target: catalog.targetCatalogVersion\r\n        });\r\n    };\r\n    /**\r\n     * This method is used to get the status of the last synchronization job.\r\n     */\r\n    /* @ngInject */ SynchronizationService.prototype.getLastSyncJobInfoByTarget = function (catalog) {\r\n        return this.syncJobInfoByTargetRestService.get({\r\n            catalog: catalog.catalogId,\r\n            target: catalog.targetCatalogVersion\r\n        });\r\n    };\r\n    /**\r\n     * This method starts the auto synchronization status update in a catalog between two given catalog versions.\r\n     */\r\n    /* @ngInject */ SynchronizationService.prototype.startAutoGetSyncData = function (catalog, callback) {\r\n        var _this = this;\r\n        var catalogId = catalog.catalogId, sourceCatalogVersion = catalog.sourceCatalogVersion, targetCatalogVersion = catalog.targetCatalogVersion;\r\n        var jobKey = this._getJobKey(catalogId, sourceCatalogVersion, targetCatalogVersion);\r\n        var syncJobTimer = this.timerService.createTimer(function () { return _this._autoSyncCallback(catalog, callback, jobKey); }, CATALOG_SYNC_INTERVAL_IN_MILLISECONDS);\r\n        syncJobTimer.start();\r\n        this.intervalHandle[jobKey] = syncJobTimer;\r\n    };\r\n    /**\r\n     * This method stops the auto synchronization status update in a catalog between two given catalog versions\r\n     * or it marks the job with discardWhenNextSynced = true if there is a synchronization in progress. If the job is\r\n     * marked with discardWhenNextSynced = true then it will be discarded when the synchronization process is finished or aborted.\r\n     */\r\n    /* @ngInject */ SynchronizationService.prototype.stopAutoGetSyncData = function (catalog) {\r\n        var jobKey = this._getJobKey(catalog.catalogId, catalog.sourceCatalogVersion, catalog.targetCatalogVersion);\r\n        if (this.intervalHandle[jobKey]) {\r\n            if (this.syncRequested.indexOf(jobKey) > -1) {\r\n                this.intervalHandle[jobKey].discardWhenNextSynced = true;\r\n            }\r\n            else {\r\n                this.intervalHandle[jobKey].stop();\r\n                this.intervalHandle[jobKey] = undefined;\r\n            }\r\n        }\r\n    };\r\n    /* @ngInject */ SynchronizationService.prototype._autoSyncCallback = function (catalog, callback, jobKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, syncStatus, syncJob;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.authenticationService.isAuthenticated(this.BASE_URL)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!response) {\r\n                            this.stopAutoGetSyncData(catalog);\r\n                        }\r\n                        return [4 /*yield*/, this.getCatalogSyncStatus(catalog)];\r\n                    case 2:\r\n                        syncStatus = _a.sent();\r\n                        syncJob = this.syncRequestedCallback(catalog)(syncStatus);\r\n                        callback(syncJob);\r\n                        if (!this.intervalHandle[jobKey]) {\r\n                            this.startAutoGetSyncData(catalog, callback);\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Method sends SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event when synchronization process is finished.\r\n     * It also stops polling if the job is not needed anymore (i.e. was marked with discardWhenNextSynced = true).\r\n     */\r\n    /* @ngInject */ SynchronizationService.prototype.syncRequestedCallback = function (catalog) {\r\n        var _this = this;\r\n        var jobKey = this._getJobKey(catalog.catalogId, catalog.sourceCatalogVersion, catalog.targetCatalogVersion);\r\n        return function (response) {\r\n            if (_this.catalogSyncInProgress(jobKey)) {\r\n                if (_this.catalogSyncFinished(response)) {\r\n                    _this.removeCatalogSyncRequest(jobKey);\r\n                    _this.crossFrameEventService.publish(DEFAULT_SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED, catalog);\r\n                }\r\n                if ((_this.intervalHandle[jobKey].discardWhenNextSynced &&\r\n                    _this.catalogSyncFinished(response)) ||\r\n                    _this.catalogSyncAborted(response)) {\r\n                    _this.intervalHandle[jobKey].stop();\r\n                    _this.intervalHandle[jobKey] = undefined;\r\n                    _this.removeCatalogSyncRequest(jobKey);\r\n                }\r\n            }\r\n            return response;\r\n        };\r\n    };\r\n    /* @ngInject */ SynchronizationService.prototype.catalogSyncInProgress = function (jobKey) {\r\n        return this.syncRequested.indexOf(jobKey) > -1;\r\n    };\r\n    /* @ngInject */ SynchronizationService.prototype.catalogSyncFinished = function (response) {\r\n        return response.syncStatus === JOB_STATUS.FINISHED;\r\n    };\r\n    /* @ngInject */ SynchronizationService.prototype.catalogSyncAborted = function (response) {\r\n        return response.syncStatus === JOB_STATUS.ABORTED;\r\n    };\r\n    /* @ngInject */ SynchronizationService.prototype.removeCatalogSyncRequest = function (jobKey) {\r\n        var index = this.syncRequested.indexOf(jobKey);\r\n        if (index > -1) {\r\n            this.syncRequested.splice(index, 1);\r\n        }\r\n    };\r\n    /* @ngInject */ SynchronizationService.prototype.addCatalogSyncRequest = function (jobKey) {\r\n        if (this.syncRequested.indexOf(jobKey) === -1) {\r\n            this.syncRequested.push(jobKey);\r\n        }\r\n    };\r\n    /* @ngInject */ SynchronizationService.prototype._getJobKey = function (catalogId, sourceCatalogVersion, targetCatalogVersion) {\r\n        return catalogId + '_' + sourceCatalogVersion + '_' + targetCatalogVersion;\r\n    };\r\n    /* @ngInject */ SynchronizationService = __decorate([\r\n        SeDowngradeService(),\r\n        OperationContextRegistered('/cmswebservices/v1/catalogs/:catalog/synchronizations/targetversions/:target', OPERATION_CONTEXT.CMS),\r\n        OperationContextRegistered('/cmswebservices/v1/catalogs/:catalog/versions/:source/synchronizations/versions/:target', OPERATION_CONTEXT.CMS),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n            TimerService,\r\n            TranslateService,\r\n            IAlertService,\r\n            IAuthenticationService,\r\n            CrossFrameEventService])\r\n    ], /* @ngInject */ SynchronizationService);\r\n    return /* @ngInject */ SynchronizationService;\r\n}());\r\nexport { /* @ngInject */ SynchronizationService };\r\n//# sourceMappingURL=synchronizationService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate/core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/modules/synchronizationPanel/index.ts"],"map":"{\"version\":3,\"file\":\"synchronizationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/synchronizationService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/services/synchronizationService.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport { CrossFrameEventService, IAlertService, IAuthenticationService, IRestServiceFactory, Timer, TimerService } from 'smarteditcommons';\r\nimport { ISyncJob } from '../dtos';\r\nexport declare const CATALOG_SYNC_INTERVAL_IN_MILLISECONDS = 5000;\r\nexport interface DiscardableTimer extends Timer {\r\n    discardWhenNextSynced?: boolean;\r\n}\r\nexport declare class SynchronizationService {\r\n    private restServiceFactory;\r\n    private timerService;\r\n    private translateService;\r\n    private alertService;\r\n    private authenticationService;\r\n    private crossFrameEventService;\r\n    private readonly BASE_URL;\r\n    private readonly SYNC_JOB_INFO_BY_TARGET_URI;\r\n    private readonly SYNC_JOB_INFO_BY_SOURCE_AND_TARGET_URI;\r\n    private intervalHandle;\r\n    private syncRequested;\r\n    private syncJobInfoByTargetRestService;\r\n    private syncJobInfoBySourceAndTargetRestService;\r\n    constructor(restServiceFactory: IRestServiceFactory, timerService: TimerService, translateService: TranslateService, alertService: IAlertService, authenticationService: IAuthenticationService, crossFrameEventService: CrossFrameEventService);\r\n    /**\r\n     * This method is used to synchronize a catalog between two catalog versions.\r\n     * It sends the SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event if successful.\r\n     */\r\n    updateCatalogSync(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    getCatalogSyncStatus(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    getSyncJobInfoBySourceAndTarget(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method is used to get the status of the last synchronization job.\r\n     */\r\n    getLastSyncJobInfoByTarget(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method starts the auto synchronization status update in a catalog between two given catalog versions.\r\n     */\r\n    startAutoGetSyncData(catalog: ISyncJob, callback: (job: ISyncJob) => void): void;\r\n    /**\r\n     * This method stops the auto synchronization status update in a catalog between two given catalog versions\r\n     * or it marks the job with discardWhenNextSynced = true if there is a synchronization in progress. If the job is\r\n     * marked with discardWhenNextSynced = true then it will be discarded when the synchronization process is finished or aborted.\r\n     */\r\n    stopAutoGetSyncData(catalog: ISyncJob): void;\r\n    private _autoSyncCallback;\r\n    /**\r\n     * Method sends SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event when synchronization process is finished.\r\n     * It also stops polling if the job is not needed anymore (i.e. was marked with discardWhenNextSynced = true).\r\n     */\r\n    private syncRequestedCallback;\r\n    private catalogSyncInProgress;\r\n    private catalogSyncFinished;\r\n    private catalogSyncAborted;\r\n    private removeCatalogSyncRequest;\r\n    private addCatalogSyncRequest;\r\n    private _getJobKey;\r\n}\r\n"}}
