{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ComponentService, IComponentVisibilityAlertService, IEditorModalService, PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI, COMPONENT_CREATED_EVENT, COMPONENT_UPDATED_EVENT } from 'cmscommons';\r\nimport { CrossFrameEventService, EVENT_SMARTEDIT_COMPONENT_UPDATED, IAlertService, IPageInfoService, IRenderService, IRestServiceFactory, ISharedDataService, LogService, objectUtils, SeDowngradeService, SystemEventService, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\nimport { SlotVisibilityService } from '../SlotVisibilityService';\r\nvar contentSlotComponentsResourceLocation = PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI + \"/pages/:pageId/contentslots/:currentSlotId/components/:componentId\";\r\n/**\r\n * This service provides methods that allow adding or removing components in the page.\r\n */\r\nvar /* @ngInject */ ComponentEditingFacade = /** @class */ (function () {\r\n    function /* @ngInject */ ComponentEditingFacade(alertService, componentService, componentVisibilityAlertService, crossFrameEventService, editorModalService, logService, pageInfoService, renderService, restServiceFactory, slotVisibilityService, sharedDataService, systemEventService, translateService) {\r\n        this.alertService = alertService;\r\n        this.componentService = componentService;\r\n        this.componentVisibilityAlertService = componentVisibilityAlertService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.editorModalService = editorModalService;\r\n        this.logService = logService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.renderService = renderService;\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.slotVisibilityService = slotVisibilityService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.systemEventService = systemEventService;\r\n        this.translateService = translateService;\r\n    }\r\n    /**\r\n     * Adds a new component to the slot and opens a component modal to edit its properties.\r\n     *\r\n     * @param slotInfo The target slot for the new component.\r\n     * @param catalogVersionUuid The catalog version on which to create the new component\r\n     * @param componentType The type of the new component to add.\r\n     * @param position The position in the slot where to add the new component.\r\n     *\r\n     */\r\n    /* @ngInject */ ComponentEditingFacade.prototype.addNewComponentToSlot = function (slotInfo, catalogVersionUuid, componentType, position) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var componentAttributes, editedComponent;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        componentAttributes = {\r\n                            smarteditComponentType: componentType,\r\n                            catalogVersionUuid: catalogVersionUuid\r\n                        };\r\n                        return [4 /*yield*/, this.editorModalService.open(componentAttributes, slotInfo.targetSlotUUId, position)];\r\n                    case 1:\r\n                        editedComponent = _a.sent();\r\n                        this.componentVisibilityAlertService.checkAndAlertOnComponentVisibility({\r\n                            itemId: editedComponent.uuid,\r\n                            itemType: editedComponent.itemtype,\r\n                            catalogVersion: editedComponent.catalogVersion,\r\n                            restricted: editedComponent.restricted,\r\n                            slotId: slotInfo.targetSlotId,\r\n                            visible: editedComponent.visible\r\n                        });\r\n                        this.crossFrameEventService.publish(COMPONENT_CREATED_EVENT, editedComponent);\r\n                        return [2 /*return*/, this.renderSlots([slotInfo.targetSlotId], editedComponent.uid, slotInfo.targetSlotId, true)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds an existing component to the slot and display an Alert whenever the component is either hidden or restricted.\r\n     *\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param dragInfo The dragInfo object containing the componentId, componentUuid and componentType.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    /* @ngInject */ ComponentEditingFacade.prototype.addExistingComponentToSlot = function (targetSlotId, dragInfo, position) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageId, item, error_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUID()];\r\n                    case 1:\r\n                        pageId = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 5, , 6]);\r\n                        return [4 /*yield*/, this.componentService.addExistingComponent(pageId, dragInfo.componentId, targetSlotId, position)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.componentService.loadComponentItem(dragInfo.componentUuid)];\r\n                    case 4:\r\n                        item = _a.sent();\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        error_1 = _a.sent();\r\n                        this.generateAndAlertErrorMessage(dragInfo.componentId, targetSlotId, error_1);\r\n                        return [2 /*return*/, Promise.reject()];\r\n                    case 6:\r\n                        this.componentVisibilityAlertService.checkAndAlertOnComponentVisibility({\r\n                            itemId: dragInfo.componentUuid,\r\n                            itemType: dragInfo.componentType,\r\n                            catalogVersion: item.catalogVersion,\r\n                            restricted: item.restricted,\r\n                            slotId: targetSlotId,\r\n                            visible: item.visible\r\n                        });\r\n                        // 1. First update the cache.\r\n                        this.systemEventService.publish(COMPONENT_UPDATED_EVENT, item);\r\n                        // 2. Then replay decorators (via EVENT_SMARTEDIT_COMPONENT_UPDATED).\r\n                        // This is important because there might be existing instances of the component in the page that need to\r\n                        // be updated. For example, if the component was not shared, it would not show the SharedComponent contextual button.\r\n                        // However, if a user adds another instance into the page then the component becomes shared. Both instances of the\r\n                        // component must show that the component is shared now. Thus, the first instance needs to be updated too.\r\n                        this.crossFrameEventService.publish(EVENT_SMARTEDIT_COMPONENT_UPDATED, {\r\n                            componentId: dragInfo.componentId,\r\n                            componentType: dragInfo.componentType,\r\n                            componentUuid: dragInfo.componentUuid,\r\n                            requiresReplayingDecorators: true\r\n                        });\r\n                        return [2 /*return*/, this.renderSlots(targetSlotId, dragInfo.componentId, targetSlotId, true)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This methods clones an existing component to the slot by opening a component modal to edit its properties.\r\n     */\r\n    /* @ngInject */ ComponentEditingFacade.prototype.cloneExistingComponentToSlot = function (componentInfo) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var componentItem, experience, component, componentAttributes, updatedComponent;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.componentService\r\n                            .loadComponentItem(componentInfo.dragInfo.componentUuid)\r\n                            .catch(function (error) {\r\n                            _this.generateAndAlertErrorMessage(componentInfo.dragInfo.componentId, componentInfo.targetSlotId, error);\r\n                            return Promise.reject();\r\n                        })];\r\n                    case 1:\r\n                        componentItem = _a.sent();\r\n                        return [4 /*yield*/, this.sharedDataService.get(EXPERIENCE_STORAGE_KEY)];\r\n                    case 2:\r\n                        experience = (_a.sent());\r\n                        component = objectUtils.copy(componentItem);\r\n                        // While cloning an existing components, remove some parameters, reset catalogVersion to the version of the page.\r\n                        // If cloning an existing component, prefix name and drop restrictions - doing this here will make generic editor dirty and enable save by default.\r\n                        component.componentUuid = component.uuid;\r\n                        component.cloneComponent = true;\r\n                        component.catalogVersion = experience.pageContext.catalogVersionUuid;\r\n                        component.name = this.translateService.instant('se.cms.component.name.clone.of.prefix') + \" \" + component.name;\r\n                        delete component.uuid;\r\n                        delete component.uid;\r\n                        delete component.slots;\r\n                        delete component.restrictions;\r\n                        delete component.creationtime;\r\n                        delete component.modifiedtime;\r\n                        componentAttributes = {\r\n                            smarteditComponentType: componentInfo.dragInfo.componentType,\r\n                            catalogVersionUuid: experience.pageContext.catalogVersionUuid,\r\n                            content: objectUtils.copy(component),\r\n                            initialDirty: true\r\n                        };\r\n                        return [4 /*yield*/, this.editorModalService.open(componentAttributes, componentInfo.targetSlotId, componentInfo.position)];\r\n                    case 3:\r\n                        updatedComponent = _a.sent();\r\n                        this.componentVisibilityAlertService.checkAndAlertOnComponentVisibility({\r\n                            itemId: updatedComponent.uuid,\r\n                            itemType: updatedComponent.itemtype,\r\n                            catalogVersion: updatedComponent.catalogVersion,\r\n                            restricted: updatedComponent.restricted,\r\n                            slotId: componentInfo.targetSlotId,\r\n                            visible: updatedComponent.visible\r\n                        });\r\n                        this.crossFrameEventService.publish(COMPONENT_CREATED_EVENT, updatedComponent);\r\n                        return [2 /*return*/, this.renderSlots(componentInfo.targetSlotId, updatedComponent.uid, componentInfo.targetSlotId, true)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This methods moves a component from two slots in a page.\r\n     *\r\n     * @param sourceSlotId The ID of the slot where the component is initially located.\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param componentId The ID of the component to add into the slot.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    /* @ngInject */ ComponentEditingFacade.prototype.moveComponent = function (sourceSlotId, targetSlotId, componentId, position) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageId, error_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.contentSlotComponentsRestService =\r\n                            this.contentSlotComponentsRestService ||\r\n                                this.restServiceFactory.get(contentSlotComponentsResourceLocation, 'componentId');\r\n                        return [4 /*yield*/, this.pageInfoService.getPageUID()];\r\n                    case 1:\r\n                        pageId = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 4, , 5]);\r\n                        return [4 /*yield*/, this.contentSlotComponentsRestService.update({\r\n                                pageId: pageId,\r\n                                currentSlotId: sourceSlotId,\r\n                                componentId: componentId,\r\n                                slotId: targetSlotId,\r\n                                position: position\r\n                            })];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        error_2 = _a.sent();\r\n                        this.generateAndAlertErrorMessage(componentId, targetSlotId, error_2, {\r\n                            message: 'se.cms.draganddrop.move.failed',\r\n                            messagePlaceholders: {\r\n                                slotID: targetSlotId,\r\n                                componentID: componentId\r\n                            }\r\n                        });\r\n                        return [2 /*return*/, Promise.reject()];\r\n                    case 5: return [2 /*return*/, this.renderSlots([sourceSlotId, targetSlotId], componentId, targetSlotId)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentEditingFacade.prototype.generateAndAlertSuccessMessage = function (sourceComponentId, targetSlotId) {\r\n        this.alertService.showSuccess({\r\n            message: 'se.cms.draganddrop.success',\r\n            messagePlaceholders: {\r\n                sourceComponentId: sourceComponentId,\r\n                targetSlotId: targetSlotId\r\n            }\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentEditingFacade.prototype.generateAndAlertErrorMessage = function (sourceComponentId, targetSlotId, requestResponse, alertConf) {\r\n        if (this.hasErrorResponseErrors(requestResponse)) {\r\n            this.alertService.showDanger({\r\n                message: 'se.cms.draganddrop.error',\r\n                messagePlaceholders: {\r\n                    sourceComponentId: sourceComponentId,\r\n                    targetSlotId: targetSlotId,\r\n                    detailedError: requestResponse.error.errors[0].message\r\n                }\r\n            });\r\n        }\r\n        else if (alertConf) {\r\n            this.alertService.showDanger(alertConf);\r\n        }\r\n    };\r\n    /* @ngInject */ ComponentEditingFacade.prototype.hasErrorResponseErrors = function (response) {\r\n        var _a, _b;\r\n        return !!(((_b = (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.length) > 0);\r\n    };\r\n    /* @ngInject */ ComponentEditingFacade.prototype.renderSlots = function (slots, sourceComponentId, targetSlotId, showSuccess) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var error_3, error_4;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.renderService.renderSlots(slots)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        error_3 = _a.sent();\r\n                        this.logService.error(this.constructor.name + \".renderSlots::renderService.renderSlots - targetSlotId:\", targetSlotId);\r\n                        this.logService.error(error_3);\r\n                        this.generateAndAlertErrorMessage(sourceComponentId, targetSlotId, error_3);\r\n                        return [2 /*return*/, Promise.reject(error_3)];\r\n                    case 3:\r\n                        _a.trys.push([3, 5, , 6]);\r\n                        return [4 /*yield*/, this.slotVisibilityService.reloadSlotsInfo()];\r\n                    case 4:\r\n                        _a.sent();\r\n                        if (showSuccess) {\r\n                            this.generateAndAlertSuccessMessage(sourceComponentId, targetSlotId);\r\n                        }\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        error_4 = _a.sent();\r\n                        this.logService.error(this.constructor.name + \".renderSlots::slotVisibilityService.reloadSlotsInfo\");\r\n                        this.logService.error(error_4);\r\n                        return [2 /*return*/, Promise.reject(error_4)];\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentEditingFacade = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IAlertService,\r\n            ComponentService,\r\n            IComponentVisibilityAlertService,\r\n            CrossFrameEventService,\r\n            IEditorModalService,\r\n            LogService,\r\n            IPageInfoService,\r\n            IRenderService,\r\n            IRestServiceFactory,\r\n            SlotVisibilityService,\r\n            ISharedDataService,\r\n            SystemEventService,\r\n            TranslateService])\r\n    ], /* @ngInject */ ComponentEditingFacade);\r\n    return /* @ngInject */ ComponentEditingFacade;\r\n}());\r\nexport { /* @ngInject */ ComponentEditingFacade };\r\n//# sourceMappingURL=ComponentEditingFacade.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate/core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/SlotVisibilityService.ts"],"map":"{\"version\":3,\"file\":\"ComponentEditingFacade.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/dragAndDrop/ComponentEditingFacade.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/dragAndDrop/ComponentEditingFacade.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport { ComponentService, IComponentVisibilityAlertService, IEditorModalService } from 'cmscommons';\r\nimport { CrossFrameEventService, IAlertService, IPageInfoService, IRenderService, IRestServiceFactory, ISharedDataService, LogService, SystemEventService } from 'smarteditcommons';\r\nimport { SlotVisibilityService } from '../SlotVisibilityService';\r\nexport interface SlotInfo {\r\n    /** The Uid of the slot where to drop the component. */\r\n    targetSlotId: string;\r\n    /** The UUid of the slot where to drop the component. */\r\n    targetSlotUUId?: string;\r\n}\r\n/** Represents the properties of the component required to create a clone. */\r\ninterface CloneComponentInfo extends SlotInfo {\r\n    dragInfo: DragInfo;\r\n    /** The position in the slot where to add the new component. */\r\n    position: number;\r\n}\r\n/** Represents the component to be added to a slot. */\r\ninterface DragInfo {\r\n    componentId: string;\r\n    componentUuid: string;\r\n    componentType: string;\r\n}\r\n/**\r\n * This service provides methods that allow adding or removing components in the page.\r\n */\r\nexport declare class ComponentEditingFacade {\r\n    private alertService;\r\n    private componentService;\r\n    private componentVisibilityAlertService;\r\n    private crossFrameEventService;\r\n    private editorModalService;\r\n    private logService;\r\n    private pageInfoService;\r\n    private renderService;\r\n    private restServiceFactory;\r\n    private slotVisibilityService;\r\n    private sharedDataService;\r\n    private systemEventService;\r\n    private translateService;\r\n    private contentSlotComponentsRestService;\r\n    constructor(alertService: IAlertService, componentService: ComponentService, componentVisibilityAlertService: IComponentVisibilityAlertService, crossFrameEventService: CrossFrameEventService, editorModalService: IEditorModalService, logService: LogService, pageInfoService: IPageInfoService, renderService: IRenderService, restServiceFactory: IRestServiceFactory, slotVisibilityService: SlotVisibilityService, sharedDataService: ISharedDataService, systemEventService: SystemEventService, translateService: TranslateService);\r\n    /**\r\n     * Adds a new component to the slot and opens a component modal to edit its properties.\r\n     *\r\n     * @param slotInfo The target slot for the new component.\r\n     * @param catalogVersionUuid The catalog version on which to create the new component\r\n     * @param componentType The type of the new component to add.\r\n     * @param position The position in the slot where to add the new component.\r\n     *\r\n     */\r\n    addNewComponentToSlot(slotInfo: SlotInfo, catalogVersionUuid: string, componentType: string, position: number): Promise<void>;\r\n    /**\r\n     * Adds an existing component to the slot and display an Alert whenever the component is either hidden or restricted.\r\n     *\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param dragInfo The dragInfo object containing the componentId, componentUuid and componentType.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    addExistingComponentToSlot(targetSlotId: string, dragInfo: DragInfo, position: number): Promise<void>;\r\n    /**\r\n     * This methods clones an existing component to the slot by opening a component modal to edit its properties.\r\n     */\r\n    cloneExistingComponentToSlot(componentInfo: CloneComponentInfo): Promise<void>;\r\n    /**\r\n     * This methods moves a component from two slots in a page.\r\n     *\r\n     * @param sourceSlotId The ID of the slot where the component is initially located.\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param componentId The ID of the component to add into the slot.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    moveComponent(sourceSlotId: string, targetSlotId: string, componentId: string, position: number): Promise<void>;\r\n    private generateAndAlertSuccessMessage;\r\n    private generateAndAlertErrorMessage;\r\n    private hasErrorResponseErrors;\r\n    private renderSlots;\r\n}\r\nexport {};\r\n"}}
