{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { RestServiceFactory, SeDowngradeService, TYPES_RESOURCE_URI } from 'smarteditcommons';\r\n/**\r\n * Used for fetching CMS Item Structures.\r\n */\r\nvar /* @ngInject */ TypeStructureRestService = /** @class */ (function () {\r\n    function /* @ngInject */ TypeStructureRestService(restServiceFactory) {\r\n        this.structureRestService = restServiceFactory.get(TYPES_RESOURCE_URI);\r\n    }\r\n    /**\r\n     * Fetches the type structure (fields) for CMS pages for a given Page Type.\r\n     */\r\n    /* @ngInject */ TypeStructureRestService.prototype.getStructureByType = function (typeCode) {\r\n        return this.structureRestService\r\n            .getById(typeCode)\r\n            .then(function (structure) { return structure.attributes; });\r\n    };\r\n    /**\r\n     * Fetches the type structure (fields) for CMS pages for a given Page Type and mode.\r\n     */\r\n    /* @ngInject */ TypeStructureRestService.prototype.getStructureByTypeAndMode = function (typeCode, mode, getWholeStructure) {\r\n        if (getWholeStructure === void 0) { getWholeStructure = false; }\r\n        return this.structureRestService\r\n            .get({\r\n            code: typeCode,\r\n            mode: mode\r\n        })\r\n            .then(function (result) {\r\n            var structure = result.componentTypes[0];\r\n            return !structure || getWholeStructure ? structure : structure.attributes;\r\n        });\r\n    };\r\n    /**\r\n     * Fetches structures supported in the given category.\r\n     */\r\n    /* @ngInject */ TypeStructureRestService.prototype.getStructuresByCategory = function (category) {\r\n        return this.structureRestService\r\n            .get({\r\n            category: category\r\n        })\r\n            .then(function (result) { return result.componentTypes; });\r\n    };\r\n    /* @ngInject */ TypeStructureRestService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [RestServiceFactory])\r\n    ], /* @ngInject */ TypeStructureRestService);\r\n    return /* @ngInject */ TypeStructureRestService;\r\n}());\r\nexport { /* @ngInject */ TypeStructureRestService };\r\n//# sourceMappingURL=TypeStructureRestService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"TypeStructureRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/dao/TypeStructureRestService.ts\"],\"names\":[],\"mappings\":\";AAIA,OAAO,EAEH,kBAAkB,EAClB,kBAAkB,EAClB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAE1B;;GAEG;AAEH;IAKI,kDAAY,kBAAsC;QAC9C,IAAI,CAAC,oBAAoB,GAAG,kBAAkB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACI,qEAAkB,GAAzB,UAA0B,QAAgB;QACtC,OAAO,IAAI,CAAC,oBAAoB;aAC3B,OAAO,CAAmB,QAAQ,CAAC;aACnC,IAAI,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,CAAC,UAAU,EAApB,CAAoB,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACI,4EAAyB,GAAhC,UACI,QAAgB,EAChB,IAAY,EACZ,iBAAyB;QAAzB,kCAAA,EAAA,yBAAyB;QAEzB,OAAO,IAAI,CAAC,oBAAoB;aAC3B,GAAG,CAAyC;YACzC,IAAI,EAAE,QAAQ;YACd,IAAI,MAAA;SACP,CAAC;aACD,IAAI,CAAC,UAAC,MAAM;YACT,IAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC3C,OAAO,CAAC,SAAS,IAAI,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC;QAC9E,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;OAEG;IACI,0EAAuB,GAA9B,UAA+B,QAA+B;QAC1D,OAAO,IAAI,CAAC,oBAAoB;aAC3B,GAAG,CAAyC;YACzC,QAAQ,UAAA;SACX,CAAC;aACD,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,cAAc,EAArB,CAAqB,CAAC,CAAC;IACjD,CAAC;IA9CL;QADC,kBAAkB,EAAE;yCAMe,kBAAkB;gDA0CrD;IAAD,+CAAC;CAAA,AA/CD,IA+CC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/dao/TypeStructureRestService.d.ts","writeByteOrderMark":false,"text":"import { CMSItemStructure, CMSItemStructureField, StructureTypeCategory } from 'cmscommons';\r\nimport { RestServiceFactory } from 'smarteditcommons';\r\n/**\r\n * Used for fetching CMS Item Structures.\r\n */\r\nexport declare class TypeStructureRestService {\r\n    private readonly structureRestService;\r\n    constructor(restServiceFactory: RestServiceFactory);\r\n    /**\r\n     * Fetches the type structure (fields) for CMS pages for a given Page Type.\r\n     */\r\n    getStructureByType(typeCode: string): Promise<CMSItemStructureField[]>;\r\n    /**\r\n     * Fetches the type structure (fields) for CMS pages for a given Page Type and mode.\r\n     */\r\n    getStructureByTypeAndMode(typeCode: string, mode: string, getWholeStructure?: boolean): Promise<CMSItemStructure | CMSItemStructureField[]>;\r\n    /**\r\n     * Fetches structures supported in the given category.\r\n     */\r\n    getStructuresByCategory(category: StructureTypeCategory): Promise<CMSItemStructure[]>;\r\n}\r\n"}}
