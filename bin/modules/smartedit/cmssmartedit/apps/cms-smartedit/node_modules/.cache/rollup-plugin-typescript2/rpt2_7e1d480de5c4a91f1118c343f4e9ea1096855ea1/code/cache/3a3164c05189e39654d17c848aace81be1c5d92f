{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { CmsitemsRestService } from 'cmscommons';\r\nimport { SeDowngradeService } from 'smarteditcommons';\r\nimport { PageContentSlotsService } from './PageContentSlotsService';\r\n/**\r\n * SlotUnsharedService provides methods to interact with the backend for unshared slot information.\r\n */\r\nvar /* @ngInject */ SlotUnsharedService = /** @class */ (function () {\r\n    function /* @ngInject */ SlotUnsharedService(cmsItemsRestService, pageContentSlotsService) {\r\n        this.cmsItemsRestService = cmsItemsRestService;\r\n        this.pageContentSlotsService = pageContentSlotsService;\r\n        this.slotUnsharedStatus = 'OVERRIDE';\r\n    }\r\n    /**\r\n     * Checks if the slot is unshared and returns true in case slot is unshared and returns false if it is not.\r\n     * Based on this service method the slot unshared button is shown or hidden for a particular slotId.\r\n     *\r\n     * @param slotId The uid of the slot\r\n     *\r\n     * @returns promise that resolves to true if slot is unshared; Otherwise false.\r\n     */\r\n    /* @ngInject */ SlotUnsharedService.prototype.isSlotUnshared = function (slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var slotStatus;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.pageContentSlotsService.getSlotStatus(slotId)];\r\n                    case 1:\r\n                        slotStatus = _a.sent();\r\n                        return [2 /*return*/, slotStatus === this.slotUnsharedStatus];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    /* @ngInject */ SlotUnsharedService.prototype.isSlotShared = function (slotId) {\r\n        return this.pageContentSlotsService.isSlotShared(slotId);\r\n    };\r\n    /**\r\n     * This method is used to revert an unshared slot to a shared slot.\r\n     * This operation is immutable.\r\n     *\r\n     * @param slotUuid The uuid of the slot\r\n     */\r\n    /* @ngInject */ SlotUnsharedService.prototype.revertToSharedSlot = function (slotUuid) {\r\n        return this.cmsItemsRestService.delete(slotUuid);\r\n    };\r\n    /* @ngInject */ SlotUnsharedService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [CmsitemsRestService,\r\n            PageContentSlotsService])\r\n    ], /* @ngInject */ SlotUnsharedService);\r\n    return /* @ngInject */ SlotUnsharedService;\r\n}());\r\nexport { /* @ngInject */ SlotUnsharedService };\r\n//# sourceMappingURL=SlotUnsharedService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/PageContentSlotsService.ts"],"map":"{\"version\":3,\"file\":\"SlotUnsharedService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotUnsharedService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AACjD,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AAEpE;;GAEG;AAEH;IAGI,6CACY,mBAAwC,EACxC,uBAAgD;QADhD,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,4BAAuB,GAAvB,uBAAuB,CAAyB;QAJ3C,uBAAkB,GAAG,UAAU,CAAC;IAK9C,CAAC;IAEJ;;;;;;;OAOG;IACU,4DAAc,GAA3B,UAA4B,MAAc;;;;;4BACnB,qBAAM,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,MAAM,CAAC,EAAA;;wBAArE,UAAU,GAAG,SAAwD;wBAE3E,sBAAO,UAAU,KAAK,IAAI,CAAC,kBAAkB,EAAC;;;;KACjD;IAED;;;;;;;OAOG;IACI,0DAAY,GAAnB,UAAoB,MAAc;QAC9B,OAAO,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACI,gEAAkB,GAAzB,UAA0B,QAAgB;QACtC,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IA1CL;QADC,kBAAkB,EAAE;yCAKgB,mBAAmB;YACf,uBAAuB;2CAsC/D;IAAD,0CAAC;CAAA,AA3CD,IA2CC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/SlotUnsharedService.d.ts","writeByteOrderMark":false,"text":"import { CmsitemsRestService } from 'cmscommons';\r\nimport { PageContentSlotsService } from './PageContentSlotsService';\r\n/**\r\n * SlotUnsharedService provides methods to interact with the backend for unshared slot information.\r\n */\r\nexport declare class SlotUnsharedService {\r\n    private cmsItemsRestService;\r\n    private pageContentSlotsService;\r\n    private readonly slotUnsharedStatus;\r\n    constructor(cmsItemsRestService: CmsitemsRestService, pageContentSlotsService: PageContentSlotsService);\r\n    /**\r\n     * Checks if the slot is unshared and returns true in case slot is unshared and returns false if it is not.\r\n     * Based on this service method the slot unshared button is shown or hidden for a particular slotId.\r\n     *\r\n     * @param slotId The uid of the slot\r\n     *\r\n     * @returns promise that resolves to true if slot is unshared; Otherwise false.\r\n     */\r\n    isSlotUnshared(slotId: string): Promise<boolean>;\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    isSlotShared(slotId: string): Promise<boolean>;\r\n    /**\r\n     * This method is used to revert an unshared slot to a shared slot.\r\n     * This operation is immutable.\r\n     *\r\n     * @param slotUuid The uuid of the slot\r\n     */\r\n    revertToSharedSlot(slotUuid: string): Promise<void>;\r\n}\r\n"}}
