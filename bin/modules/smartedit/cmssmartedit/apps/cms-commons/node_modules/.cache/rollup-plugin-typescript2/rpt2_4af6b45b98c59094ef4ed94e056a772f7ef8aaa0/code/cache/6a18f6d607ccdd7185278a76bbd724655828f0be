{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { pageChangeEvictionTag, rarelyChangingContent, Cached, IPageInfoService, IRestServiceFactory, SeDowngradeService } from 'smarteditcommons';\r\nimport { CmsitemsRestService, IPageContentSlotsComponentsRestService, PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI } from '../dao';\r\n/**\r\n * Service which manages component types and items.\r\n */\r\nvar /* @ngInject */ ComponentService = /** @class */ (function () {\r\n    function /* @ngInject */ ComponentService(restServiceFactory, cmsitemsRestService, pageInfoService, pageContentSlotsComponentsRestService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.pageContentSlotsComponentsRestService = pageContentSlotsComponentsRestService;\r\n        this.pageComponentTypesRestServiceURI = '/cmssmarteditwebservices/v1/catalogs/:catalogId/versions/:catalogVersion/pages/:pageId/types';\r\n        this.pageComponentTypesRestService = this.restServiceFactory.get(this.pageComponentTypesRestServiceURI);\r\n        this.restServiceForAddExistingComponent = this.restServiceFactory.get(PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI);\r\n    }\r\n    /**\r\n     * Fetches all component types that are applicable to the current page.\r\n     *\r\n     * @returns A promise resolving to a page of component types applicable to the current page.\r\n     */\r\n    /* @ngInject */ ComponentService.prototype.getSupportedComponentTypesForCurrentPage = function (payload) {\r\n        return this.pageComponentTypesRestService.get(payload);\r\n    };\r\n    /**\r\n     * Given a component info and the component payload, a new componentItem is created and added to a slot\r\n     */\r\n    /* @ngInject */ ComponentService.prototype.createNewComponent = function (componentInfo, componentPayload) {\r\n        var payload = {\r\n            name: componentInfo.name,\r\n            slotId: componentInfo.targetSlotId,\r\n            pageId: componentInfo.pageId,\r\n            position: componentInfo.position,\r\n            typeCode: componentInfo.componentType,\r\n            itemtype: componentInfo.componentType,\r\n            catalogVersion: componentInfo.catalogVersionUuid,\r\n            uid: '',\r\n            uuid: ''\r\n        };\r\n        // TODO: consider refactor. Remove the if statement, rely on TypeScript.\r\n        if (typeof componentPayload === 'object') {\r\n            for (var property in componentPayload) {\r\n                if (componentPayload.hasOwnProperty(property)) {\r\n                    payload[property] = componentPayload[property];\r\n                }\r\n            }\r\n        }\r\n        else if (componentPayload) {\r\n            throw new Error(\"ComponentService.createNewComponent() - Illegal componentPayload - [\" + componentPayload + \"]\");\r\n        }\r\n        return this.cmsitemsRestService.create(payload);\r\n    };\r\n    /**\r\n     * Given a component payload related to an existing component, it will be updated with the new supplied values.\r\n     */\r\n    /* @ngInject */ ComponentService.prototype.updateComponent = function (componentPayload) {\r\n        return this.cmsitemsRestService.update(componentPayload);\r\n    };\r\n    /**\r\n     * Add an existing component item to a slot.\r\n     *\r\n     * @param pageId used to identify the page containing the slot in the current template.\r\n     * @param componentId used to identify the existing component which will be added to the slot.\r\n     * @param slotId used to identify the slot in the current template.\r\n     * @param position used to identify the position in the slot in the current template.\r\n     */\r\n    /* @ngInject */ ComponentService.prototype.addExistingComponent = function (pageId, componentId, slotId, position) {\r\n        return this.restServiceForAddExistingComponent.save({\r\n            pageId: pageId,\r\n            slotId: slotId,\r\n            componentId: componentId,\r\n            position: position\r\n        });\r\n    };\r\n    /**\r\n     * Load a component identified by its id.\r\n     */\r\n    /* @ngInject */ ComponentService.prototype.loadComponentItem = function (id) {\r\n        return this.cmsitemsRestService.getById(id);\r\n    };\r\n    /**\r\n     * All existing component items for the provided content catalog are retrieved in the form of pages\r\n     * used for pagination especially when the result set is very large.\r\n     *\r\n     * E.g. Add Components -> Saved Components.\r\n     *\r\n     * @returns A promise resolving to a page of component items retrieved from the provided catalog version.\r\n     */\r\n    /* @ngInject */ ComponentService.prototype.loadPagedComponentItemsByCatalogVersion = function (payload) {\r\n        var requestParams = {\r\n            pageSize: payload.pageSize,\r\n            currentPage: payload.page,\r\n            mask: payload.mask,\r\n            sort: 'name',\r\n            typeCode: 'AbstractCMSComponent',\r\n            catalogId: payload.catalogId,\r\n            catalogVersion: payload.catalogVersion,\r\n            itemSearchParams: ''\r\n        };\r\n        return this.cmsitemsRestService.get(requestParams);\r\n    };\r\n    /**\r\n     * Returns slot IDs for the given componentUuid.\r\n     *\r\n     * E.g. Edit Component on Storefront and click Save button.\r\n     */\r\n    /* @ngInject */ ComponentService.prototype.getSlotsForComponent = function (componentUuid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var allSlotsToComponents;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getContentSlotsForComponents()];\r\n                    case 1:\r\n                        allSlotsToComponents = _a.sent();\r\n                        return [2 /*return*/, Object.entries(allSlotsToComponents)\r\n                                .filter(function (_a) {\r\n                                var components = _a[1];\r\n                                return components.find(function (component) { return component.uuid === componentUuid; });\r\n                            })\r\n                                .map(function (_a) {\r\n                                var slotId = _a[0];\r\n                                return slotId;\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ ComponentService.prototype.getContentSlotsForComponents = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageId;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUID()];\r\n                    case 1:\r\n                        pageId = _a.sent();\r\n                        return [4 /*yield*/, this.pageContentSlotsComponentsRestService.getSlotsToComponentsMapForPageUid(pageId)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [pageChangeEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ ComponentService.prototype, \"getSupportedComponentTypesForCurrentPage\", null);\r\n    /* @ngInject */ ComponentService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n            CmsitemsRestService,\r\n            IPageInfoService,\r\n            IPageContentSlotsComponentsRestService])\r\n    ], /* @ngInject */ ComponentService);\r\n    return /* @ngInject */ ComponentService;\r\n}());\r\nexport { /* @ngInject */ ComponentService };\r\n//# sourceMappingURL=ComponentService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dao/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"ComponentService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ComponentService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/services/ComponentService.d.ts","writeByteOrderMark":false,"text":"import { IPageInfoService, IRestServiceFactory } from 'smarteditcommons';\r\nimport { CmsitemsRestService, IPageContentSlotsComponentsRestService, Page } from '../dao';\r\nimport { CMSItem, CMSItemStructure } from '../dtos';\r\n/**\r\n * The payload that contains the information of the page of components to load\r\n */\r\nexport interface LoadPagedComponentsRequestPayload {\r\n    /**\r\n     * The current page number.\r\n     */\r\n    page: number;\r\n    /**\r\n     * The number of elements that a page can contain.\r\n     */\r\n    pageSize: number;\r\n    /**\r\n     * The search string to filter the results.\r\n     */\r\n    mask: string;\r\n    typeCode: string;\r\n    /**\r\n     * The id of the catalog for which to retrieve the component items.\r\n     */\r\n    catalogId: string;\r\n    /**\r\n     * The id of the catalog version for which to retrieve the component items.\r\n     */\r\n    catalogVersion: string;\r\n}\r\n/**\r\n * Describes the information of the component types to load.\r\n */\r\nexport interface LoadPagedComponentTypesRequestPayload {\r\n    catalogId: string;\r\n    catalogVersion: string;\r\n    pageId: string;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    mask: string;\r\n}\r\n/**\r\n * The basic information of the ComponentType to be created and added to the slot.\r\n */\r\ninterface ComponentInfo {\r\n    name: string;\r\n    /**\r\n     * Identifies the slot in the current template.\r\n     */\r\n    slotId: string;\r\n    /**\r\n     * Identifies the current page template.\r\n     */\r\n    pageId: string;\r\n    /**\r\n     * Identifies the position in the slot in the current template.\r\n     */\r\n    position: number;\r\n    typeCode: string;\r\n    itemtype: string;\r\n    catalogVersion: string;\r\n    targetSlotId?: string;\r\n    componentType?: string;\r\n    catalogVersionUuid?: string;\r\n}\r\n/**\r\n * Service which manages component types and items.\r\n */\r\nexport declare class ComponentService {\r\n    private restServiceFactory;\r\n    private cmsitemsRestService;\r\n    private pageInfoService;\r\n    private pageContentSlotsComponentsRestService;\r\n    private pageComponentTypesRestService;\r\n    private restServiceForAddExistingComponent;\r\n    private readonly pageComponentTypesRestServiceURI;\r\n    constructor(restServiceFactory: IRestServiceFactory, cmsitemsRestService: CmsitemsRestService, pageInfoService: IPageInfoService, pageContentSlotsComponentsRestService: IPageContentSlotsComponentsRestService);\r\n    /**\r\n     * Fetches all component types that are applicable to the current page.\r\n     *\r\n     * @returns A promise resolving to a page of component types applicable to the current page.\r\n     */\r\n    getSupportedComponentTypesForCurrentPage(payload: LoadPagedComponentTypesRequestPayload): Promise<Page<CMSItemStructure>>;\r\n    /**\r\n     * Given a component info and the component payload, a new componentItem is created and added to a slot\r\n     */\r\n    createNewComponent(componentInfo: ComponentInfo, componentPayload: CMSItem): Promise<CMSItem>;\r\n    /**\r\n     * Given a component payload related to an existing component, it will be updated with the new supplied values.\r\n     */\r\n    updateComponent(componentPayload: CMSItem): Promise<CMSItem>;\r\n    /**\r\n     * Add an existing component item to a slot.\r\n     *\r\n     * @param pageId used to identify the page containing the slot in the current template.\r\n     * @param componentId used to identify the existing component which will be added to the slot.\r\n     * @param slotId used to identify the slot in the current template.\r\n     * @param position used to identify the position in the slot in the current template.\r\n     */\r\n    addExistingComponent(pageId: string, componentId: string, slotId: string, position: number): Promise<void>;\r\n    /**\r\n     * Load a component identified by its id.\r\n     */\r\n    loadComponentItem(id: string): Promise<CMSItem>;\r\n    /**\r\n     * All existing component items for the provided content catalog are retrieved in the form of pages\r\n     * used for pagination especially when the result set is very large.\r\n     *\r\n     * E.g. Add Components -> Saved Components.\r\n     *\r\n     * @returns A promise resolving to a page of component items retrieved from the provided catalog version.\r\n     */\r\n    loadPagedComponentItemsByCatalogVersion(payload: LoadPagedComponentsRequestPayload): Promise<Page<CMSItem>>;\r\n    /**\r\n     * Returns slot IDs for the given componentUuid.\r\n     *\r\n     * E.g. Edit Component on Storefront and click Save button.\r\n     */\r\n    getSlotsForComponent(componentUuid: string): Promise<string[]>;\r\n    private getContentSlotsForComponents;\r\n}\r\nexport {};\r\n"}}
