{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport * as lodash from 'lodash';\r\nimport { IStoragePropertiesService, SeDowngradeService, STORAGE_PROPERTIES_TOKEN } from 'smarteditcommons';\r\nimport { defaultStorageProperties } from './defaultStorageProperties';\r\n/**\r\n * The storagePropertiesService is a provider that implements the IStoragePropertiesService\r\n * interface and exposes the default storage properties. These properties are used to bootstrap various\r\n * pieces of the storage system.\r\n * By Means of StorageModule.configure() you would might change the default localStorage key names, or storage types.\r\n */\r\n/** @internal */\r\nvar /* @ngInject */ StoragePropertiesService = /** @class */ (function () {\r\n    function /* @ngInject */ StoragePropertiesService(storageProperties) {\r\n        var _this = this;\r\n        this.properties = lodash.cloneDeep(defaultStorageProperties);\r\n        storageProperties.forEach(function (properties) {\r\n            lodash.merge(_this.properties, properties);\r\n        });\r\n    }\r\n    /* @ngInject */ StoragePropertiesService.prototype.getProperty = function (propertyName) {\r\n        return this.properties[propertyName];\r\n    };\r\n    /* @ngInject */ StoragePropertiesService = __decorate([\r\n        SeDowngradeService(IStoragePropertiesService),\r\n        __param(0, Inject(STORAGE_PROPERTIES_TOKEN)),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], /* @ngInject */ StoragePropertiesService);\r\n    return /* @ngInject */ StoragePropertiesService;\r\n}());\r\nexport { /* @ngInject */ StoragePropertiesService };\r\n//# sourceMappingURL=StoragePropertiesService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/storage/defaultStorageProperties.ts"],"map":"{\"version\":3,\"file\":\"StoragePropertiesService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/storage/StoragePropertiesService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAEjC,OAAO,EAEH,yBAAyB,EACzB,kBAAkB,EAClB,wBAAwB,EAC3B,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAEtE;;;;;GAKG;AACH,gBAAgB;AAEhB;IAGI,kDAA8C,iBAAuC;QAArF,iBAMC;QALG,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QAE7D,iBAAiB,CAAC,OAAO,CAAC,UAAC,UAAU;YACjC,MAAM,CAAC,KAAK,CAAC,KAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8DAAW,GAAX,UAAY,YAAsC;QAC9C,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACzC,CAAC;IAbL;QADC,kBAAkB,CAAC,yBAAyB,CAAC;QAI7B,WAAA,MAAM,CAAC,wBAAwB,CAAC,CAAA;;gDAWhD;IAAD,+CAAC;CAAA,AAdD,IAcC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/storage/StoragePropertiesService.d.ts","writeByteOrderMark":false,"text":"import { IStorageProperties, IStoragePropertiesService } from 'smarteditcommons';\r\n/**\r\n * The storagePropertiesService is a provider that implements the IStoragePropertiesService\r\n * interface and exposes the default storage properties. These properties are used to bootstrap various\r\n * pieces of the storage system.\r\n * By Means of StorageModule.configure() you would might change the default localStorage key names, or storage types.\r\n */\r\n/** @internal */\r\nexport declare class StoragePropertiesService implements IStoragePropertiesService {\r\n    private readonly properties;\r\n    constructor(storageProperties: IStorageProperties[]);\r\n    getProperty(propertyName: keyof IStorageProperties): any;\r\n}\r\n"}}
