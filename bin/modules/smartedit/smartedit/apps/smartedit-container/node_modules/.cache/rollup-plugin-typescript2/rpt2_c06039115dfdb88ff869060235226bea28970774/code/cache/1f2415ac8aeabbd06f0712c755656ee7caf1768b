{"code":"import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lodash from 'lodash';\r\nimport { CONTEXT_CATALOG, CONTEXT_CATALOG_VERSION, CONTEXT_SITE_ID, GatewayProxied, ICatalogService, ICatalogVersionPermissionService, SeDowngradeService } from 'smarteditcommons';\r\nimport { CatalogVersionPermissionRestService } from './CatalogVersionPermissionRestService';\r\nvar PERMISSION_TYPES;\r\n(function (PERMISSION_TYPES) {\r\n    PERMISSION_TYPES[\"READ\"] = \"read\";\r\n    PERMISSION_TYPES[\"WRITE\"] = \"write\";\r\n})(PERMISSION_TYPES || (PERMISSION_TYPES = {}));\r\nvar /* @ngInject */ CatalogVersionPermissionService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ CatalogVersionPermissionService, _super);\r\n    function /* @ngInject */ CatalogVersionPermissionService(catalogVersionPermissionRestService, catalogService) {\r\n        var _this = _super.call(this) || this;\r\n        _this.catalogVersionPermissionRestService = catalogVersionPermissionRestService;\r\n        _this.catalogService = catalogService;\r\n        return _this;\r\n    }\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasPermission = function (accessType, catalogId, catalogVersion, siteId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, shouldOverride, response, targetPermission, value;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, Promise.all([\r\n                            this.shouldIgnoreCatalogPermissions(accessType, catalogId, catalogVersion, siteId),\r\n                            this.catalogVersionPermissionRestService.getCatalogVersionPermissions(catalogId, catalogVersion)\r\n                        ])];\r\n                    case 1:\r\n                        _a = _b.sent(), shouldOverride = _a[0], response = _a[1];\r\n                        if (this.isCatalogVersionPermissionResponse(response)) {\r\n                            targetPermission = response.permissions.find(function (permission) { return permission.key === accessType; });\r\n                            value = targetPermission ? targetPermission.value : 'false';\r\n                            return [2 /*return*/, value === 'true' || shouldOverride];\r\n                        }\r\n                        return [2 /*return*/, false];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasSyncPermissionFromCurrentToActiveCatalogVersion = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        return [4 /*yield*/, this.hasSyncPermissionToActiveCatalogVersion(data[CONTEXT_CATALOG], data[CONTEXT_CATALOG_VERSION])];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasSyncPermissionToActiveCatalogVersion = function (catalogId, catalogVersion) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var targetCatalogVersion;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.catalogService.getActiveContentCatalogVersionByCatalogId(catalogId)];\r\n                    case 1:\r\n                        targetCatalogVersion = _a.sent();\r\n                        return [4 /*yield*/, this.hasSyncPermission(catalogId, catalogVersion, targetCatalogVersion)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasSyncPermission = function (catalogId, sourceCatalogVersion, targetCatalogVersion) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, permission;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.catalogVersionPermissionRestService.getCatalogVersionPermissions(catalogId, sourceCatalogVersion)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (this.isCatalogVersionPermissionResponse(response) &&\r\n                            response.syncPermissions &&\r\n                            response.syncPermissions.length > 0) {\r\n                            permission = response.syncPermissions.some(function (syncPermission) {\r\n                                return syncPermission\r\n                                    ? syncPermission.canSynchronize === true &&\r\n                                        syncPermission.targetCatalogVersion === targetCatalogVersion\r\n                                    : false;\r\n                            });\r\n                            return [2 /*return*/, permission];\r\n                        }\r\n                        return [2 /*return*/, false];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasWritePermissionOnCurrent = function () {\r\n        return this.hasCurrentCatalogPermission(PERMISSION_TYPES.WRITE);\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasReadPermissionOnCurrent = function () {\r\n        return this.hasCurrentCatalogPermission(PERMISSION_TYPES.READ);\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasWritePermission = function (catalogId, catalogVersion) {\r\n        return this.hasPermission(PERMISSION_TYPES.WRITE, catalogId, catalogVersion);\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasReadPermission = function (catalogId, catalogVersion) {\r\n        return this.hasPermission(PERMISSION_TYPES.READ, catalogId, catalogVersion);\r\n    };\r\n    /**\r\n     * if in the context of an experience AND the catalogVersion is the active one, then permissions should be ignored in read mode\r\n     */\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.shouldIgnoreCatalogPermissions = function (accessType, catalogId, catalogVersion, siteId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var promise, versionCheckedAgainst;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        promise = siteId && accessType === PERMISSION_TYPES.READ\r\n                            ? this.catalogService.getActiveContentCatalogVersionByCatalogId(catalogId)\r\n                            : Promise.resolve();\r\n                        return [4 /*yield*/, promise];\r\n                    case 1:\r\n                        versionCheckedAgainst = _a.sent();\r\n                        return [2 /*return*/, versionCheckedAgainst === catalogVersion];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Verifies whether current user has write or read permission for current catalog version.\r\n     * @param {String} accessType\r\n     */\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.hasCurrentCatalogPermission = function (accessType) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        return [4 /*yield*/, this.hasPermission(accessType, data[CONTEXT_CATALOG], data[CONTEXT_CATALOG_VERSION], data[CONTEXT_SITE_ID])];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService.prototype.isCatalogVersionPermissionResponse = function (response) {\r\n        return !lodash.isEmpty(response);\r\n    };\r\n    /* @ngInject */ CatalogVersionPermissionService = __decorate([\r\n        SeDowngradeService(ICatalogVersionPermissionService),\r\n        GatewayProxied('hasWritePermission', 'hasReadPermission', 'hasWritePermissionOnCurrent', 'hasReadPermissionOnCurrent'),\r\n        __metadata(\"design:paramtypes\", [CatalogVersionPermissionRestService,\r\n            ICatalogService])\r\n    ], /* @ngInject */ CatalogVersionPermissionService);\r\n    return /* @ngInject */ CatalogVersionPermissionService;\r\n}(ICatalogVersionPermissionService));\r\nexport { /* @ngInject */ CatalogVersionPermissionService };\r\n//# sourceMappingURL=catalogVersionPermissionServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/CatalogVersionPermissionRestService.ts"],"map":"{\"version\":3,\"file\":\"catalogVersionPermissionServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/catalogVersionPermissionServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/catalogVersionPermissionServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { ICatalogService, ICatalogVersionPermissionService } from 'smarteditcommons';\r\nimport { CatalogVersionPermissionRestService } from './CatalogVersionPermissionRestService';\r\ndeclare enum PERMISSION_TYPES {\r\n    READ = \"read\",\r\n    WRITE = \"write\"\r\n}\r\nexport declare class CatalogVersionPermissionService extends ICatalogVersionPermissionService {\r\n    private catalogVersionPermissionRestService;\r\n    private catalogService;\r\n    constructor(catalogVersionPermissionRestService: CatalogVersionPermissionRestService, catalogService: ICatalogService);\r\n    hasPermission(accessType: PERMISSION_TYPES, catalogId: string, catalogVersion: string, siteId?: string): Promise<boolean>;\r\n    hasSyncPermissionFromCurrentToActiveCatalogVersion(): Promise<boolean>;\r\n    hasSyncPermissionToActiveCatalogVersion(catalogId: string, catalogVersion: string): Promise<boolean>;\r\n    hasSyncPermission(catalogId: string, sourceCatalogVersion: string, targetCatalogVersion: string): Promise<boolean>;\r\n    hasWritePermissionOnCurrent(): Promise<boolean>;\r\n    hasReadPermissionOnCurrent(): Promise<boolean>;\r\n    hasWritePermission(catalogId: string, catalogVersion: string): Promise<boolean>;\r\n    hasReadPermission(catalogId: string, catalogVersion: string): Promise<boolean>;\r\n    /**\r\n     * if in the context of an experience AND the catalogVersion is the active one, then permissions should be ignored in read mode\r\n     */\r\n    private shouldIgnoreCatalogPermissions;\r\n    /**\r\n     * Verifies whether current user has write or read permission for current catalog version.\r\n     * @param {String} accessType\r\n     */\r\n    private hasCurrentCatalogPermission;\r\n    private isCatalogVersionPermissionResponse;\r\n}\r\nexport {};\r\n"}}
