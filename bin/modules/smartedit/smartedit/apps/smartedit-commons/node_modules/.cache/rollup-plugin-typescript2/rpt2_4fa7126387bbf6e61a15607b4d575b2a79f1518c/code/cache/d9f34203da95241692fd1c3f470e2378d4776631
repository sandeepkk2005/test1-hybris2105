{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { ISessionService, LogService } from '@smart/utils';\r\nimport { SeDowngradeService } from 'smarteditcommons/di';\r\nimport { PermissionsRestService } from './rest';\r\n/**\r\n * This service makes calls to the Global Permissions REST API to check if the current user was\r\n * granted certain permissions.\r\n */\r\nvar /* @ngInject */ AuthorizationService = /** @class */ (function () {\r\n    function /* @ngInject */ AuthorizationService(logService, sessionService, permissionsRestService) {\r\n        this.logService = logService;\r\n        this.sessionService = sessionService;\r\n        this.permissionsRestService = permissionsRestService;\r\n    }\r\n    /**\r\n     * This method checks if the current user is granted the given global permissions.\r\n     *\r\n     * @param permissionNames The list of global permissions to check.\r\n     *\r\n     * @returns True if the user is granted all of the given permissions, false otherwise\r\n     *\r\n     * ### Throws\r\n     *\r\n     * - Will throw an error if the permissionNames array is empty.\r\n     */\r\n    /* @ngInject */ AuthorizationService.prototype.hasGlobalPermissions = function (permissionNames) {\r\n        var _this = this;\r\n        if (!permissionNames.length || permissionNames.length < 1) {\r\n            throw new Error('permissionNames must be a non-empty array');\r\n        }\r\n        var onSuccess = function (permissions) {\r\n            return _this.mergePermissionResults(permissions, permissionNames);\r\n        };\r\n        var onError = function () {\r\n            _this.logService.error('AuthorizationService - Failed to determine authorization for the following permissions: ' +\r\n                permissionNames.toString());\r\n            return false;\r\n        };\r\n        return this.getPermissions(permissionNames).then(onSuccess, onError);\r\n    };\r\n    /*\r\n     * This method will look for the result for the given permission name. If found, it is\r\n     * verified that it has been granted. Otherwise, the method will return false.\r\n     */\r\n    /* @ngInject */ AuthorizationService.prototype.getPermissionResult = function (permissionResults, permissionName) {\r\n        var permission = permissionResults.permissions.find(function (result) {\r\n            return result.key.toLowerCase() === permissionName.toLowerCase();\r\n        });\r\n        return !!permission && permission.value === 'true';\r\n    };\r\n    /*\r\n     * This method merges permission results. It iterates through the list of permission names that\r\n     * were checked and evaluates if the permission is granted. It immediately returns false when\r\n     * it encounters a permission that is denied.\r\n     */\r\n    /* @ngInject */ AuthorizationService.prototype.mergePermissionResults = function (permissionResults, permissionNames) {\r\n        var hasPermission = !!permissionNames && permissionNames.length > 0;\r\n        var index = 0;\r\n        while (hasPermission && index < permissionNames.length) {\r\n            hasPermission =\r\n                hasPermission &&\r\n                    this.getPermissionResult(permissionResults, permissionNames[index++]);\r\n        }\r\n        return hasPermission;\r\n    };\r\n    /*\r\n     * This method makes a call to the Global Permissions API with the given permission names\r\n     * and returns the list of results.\r\n     */\r\n    /* @ngInject */ AuthorizationService.prototype.getPermissions = function (permissionNames) {\r\n        var _this = this;\r\n        return this.sessionService.getCurrentUsername().then(function (user) {\r\n            if (!user) {\r\n                return { permissions: [] };\r\n            }\r\n            return _this.permissionsRestService.get({\r\n                user: user,\r\n                permissionNames: permissionNames.join(',')\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ AuthorizationService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            ISessionService,\r\n            PermissionsRestService])\r\n    ], /* @ngInject */ AuthorizationService);\r\n    return /* @ngInject */ AuthorizationService;\r\n}());\r\nexport { /* @ngInject */ AuthorizationService };\r\n//# sourceMappingURL=AuthorizationService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/rest/index.ts"],"map":"{\"version\":3,\"file\":\"AuthorizationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/AuthorizationService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE3D,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AAEzD,OAAO,EAAE,sBAAsB,EAAE,MAAM,QAAQ,CAAC;AAEhD;;;GAGG;AAEH;IACI,8CACY,UAAsB,EACtB,cAA+B,EAC/B,sBAA8C;QAF9C,eAAU,GAAV,UAAU,CAAY;QACtB,mBAAc,GAAd,cAAc,CAAiB;QAC/B,2BAAsB,GAAtB,sBAAsB,CAAwB;IACvD,CAAC;IAEJ;;;;;;;;;;OAUG;IACI,mEAAoB,GAA3B,UAA4B,eAAyB;QAArD,iBAiBC;QAhBG,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAChE;QAED,IAAM,SAAS,GAAG,UAAC,WAA0C;YACzD,OAAA,KAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,eAAe,CAAC;QAAzD,CAAyD,CAAC;QAE9D,IAAM,OAAO,GAAG;YACZ,KAAI,CAAC,UAAU,CAAC,KAAK,CACjB,0FAA0F;gBACtF,eAAe,CAAC,QAAQ,EAAE,CACjC,CAAC;YACF,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACzE,CAAC;IAED;;;OAGG;IACK,kEAAmB,GAA3B,UACI,iBAAgD,EAChD,cAAsB;QAEtB,IAAM,UAAU,GAAgC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAC9E,UAAC,MAAmC;YAChC,OAAA,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,cAAc,CAAC,WAAW,EAAE;QAAzD,CAAyD,CAChE,CAAC;QAEF,OAAO,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,KAAK,KAAK,MAAM,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACK,qEAAsB,GAA9B,UACI,iBAAgD,EAChD,eAAyB;QAEzB,IAAI,aAAa,GAAG,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;QACpE,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,OAAO,aAAa,IAAI,KAAK,GAAG,eAAe,CAAC,MAAM,EAAE;YACpD,aAAa;gBACT,aAAa;oBACb,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC7E;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;OAGG;IACK,6DAAc,GAAtB,UAAuB,eAAyB;QAAhD,iBAUC;QATG,OAAO,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,UAAC,IAAY;YAC9D,IAAI,CAAC,IAAI,EAAE;gBACP,OAAO,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;aAC9B;YACD,OAAO,KAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC;gBACnC,IAAI,MAAA;gBACJ,eAAe,EAAE,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC;aAC7C,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAxFL;QADC,kBAAkB,EAAE;yCAGO,UAAU;YACN,eAAe;YACP,sBAAsB;4CAqF7D;IAAD,2CAAC;CAAA,AAzFD,IAyFC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/AuthorizationService.d.ts","writeByteOrderMark":false,"text":"import { ISessionService, LogService } from '@smart/utils';\r\nimport { PermissionsRestService } from './rest';\r\n/**\r\n * This service makes calls to the Global Permissions REST API to check if the current user was\r\n * granted certain permissions.\r\n */\r\nexport declare class AuthorizationService {\r\n    private logService;\r\n    private sessionService;\r\n    private permissionsRestService;\r\n    constructor(logService: LogService, sessionService: ISessionService, permissionsRestService: PermissionsRestService);\r\n    /**\r\n     * This method checks if the current user is granted the given global permissions.\r\n     *\r\n     * @param permissionNames The list of global permissions to check.\r\n     *\r\n     * @returns True if the user is granted all of the given permissions, false otherwise\r\n     *\r\n     * ### Throws\r\n     *\r\n     * - Will throw an error if the permissionNames array is empty.\r\n     */\r\n    hasGlobalPermissions(permissionNames: string[]): Promise<boolean>;\r\n    private getPermissionResult;\r\n    private mergePermissionResults;\r\n    private getPermissions;\r\n}\r\n"}}
