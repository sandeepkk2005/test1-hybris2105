<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/integration
           http://www.springframework.org/schema/integration/spring-integration.xsd">

    <import resource="webhookservices-retry-spring.xml"/>

    <bean id="webhookConfigValidateInterceptor"
          class="de.hybris.platform.webhookservices.model.WebhookConfigurationValidateInterceptor">
    </bean>


    <bean id="webhookConfigValidateInterceptorMapping"
          class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
        <property name="interceptor" ref="webhookConfigValidateInterceptor"/>
        <property name="typeCode" value="WebhookConfiguration"/>
    </bean>

    <bean id="webhookConfigurationDestinationValidateInterceptor"
          class="de.hybris.platform.webhookservices.model.WebhookConfigurationDestinationValidateInterceptor"/>
    <bean id="webhookConfigurationDestinationValidateInterceptorMapping"
          class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
        <property name="interceptor" ref="webhookConfigurationDestinationValidateInterceptor"/>
        <property name="typeCode" value="WebhookConfiguration"/>
    </bean>

    <alias name="defaultWebhookConfigurationService" alias="webhookConfigurationService"/>
    <bean id="defaultWebhookConfigurationService"
          class="de.hybris.platform.webhookservices.service.impl.DefaultWebhookConfigurationService">
        <constructor-arg ref="flexibleSearchService"/>
    </bean>

    <alias name="defaultWebhookValidationService" alias="webhookValidationService"/>
    <bean id="defaultWebhookValidationService"
          class="de.hybris.platform.webhookservices.service.impl.DefaultWebhookValidationService">
        <constructor-arg ref="integrationRestTemplateFactory" />
        <constructor-arg ref="outboundServiceFacade" />
        <constructor-arg ref="cloudEventHeadersService" />
    </bean>

    <alias name="afterSaveEventListener" alias="webhookServicesAfterSaveEventListener"/>
    <bean id="afterSaveEventListener"
          class="de.hybris.platform.webhookservices.event.WebhookServicesAfterSaveEventListener">
        <constructor-arg name="eventSender" ref="exportEventSender"/>
        <constructor-arg name="tenantLifecycle" ref="integrationTenantLifecycle"/>
        <constructor-arg name="webhookEventFactory" ref="webhookEventFactory"/>
        <property name="webhookConfigurationService" ref="webhookConfigurationService"/>
        <property name="modelService" ref="modelService"/>
    </bean>

    <alias name="defaultWebhookServicesTaskExecutor" alias="webhookServicesTaskExecutor"/>
    <bean id="defaultWebhookServicesTaskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${webhookservices.taskexecutor.pool.size}"/>
        <property name="keepAliveSeconds" value="5"/>
        <property name="maxPoolSize" value="${webhookservices.taskexecutor.pool.size}"/>
        <property name="queueCapacity" value="${webhookservices.taskexecutor.queue.capacity}"/>
        <property name="threadFactory" ref="webhookServicesThreadFactory"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor.AbortPolicy"/>
        </property>
    </bean>

    <!-- the tenant thread factory provides the tenant and user to the threads so we have permission to search for certain types -->
    <alias name="defaultWebhookServicesThreadFactory" alias="webhookServicesThreadFactory"/>
    <bean id="defaultWebhookServicesThreadFactory"
          class="de.hybris.platform.integrationservices.util.TenantAdminUserAwareThreadFactory">
        <constructor-arg name="tenant" ref="tenantFactory"/>
    </bean>

    <bean depends-on="eventRoutingMap" parent="mapMergeDirective">
        <property name="key" value="WEBHOOKSERVICES"/>
        <property name="value" value="webhookServicesChannel"/>
    </bean>

    <int:channel id="webhookServicesChannel">
        <int:dispatcher task-executor="webhookServicesTaskExecutor"/>
    </int:channel>
    <int:chain input-channel="webhookServicesChannel">
        <int:service-activator ref="webhookEventSender" method="send"/>
        <int:logging-channel-adapter level="ERROR" log-full-message="true" logger-name="WebhookServicesChannelLogger"/>
    </int:chain>

    <alias name="webhookEventToItemSender" alias="webhookEventSender"/>
    <bean id="webhookEventToItemSender"
          class="de.hybris.platform.webhookservices.service.impl.WebhookEventToItemSender">
        <constructor-arg ref="webhookImmediateRetryOutboundServiceFacade"/>
        <constructor-arg ref="webhookConfigurationService"/>
        <constructor-arg ref="itemModelSearchService"/>
        <property name="filterService" ref="webhookFilterService"/>
    </bean>

    <alias name="defaultWebhookImmediateRetryOutboundServiceFacade" alias="webhookImmediateRetryOutboundServiceFacade"/>
    <bean name="defaultWebhookImmediateRetryOutboundServiceFacade"
          class="de.hybris.platform.webhookservices.service.impl.WebhookImmediateRetryOutboundServiceFacade">
        <constructor-arg ref="outboundServiceFacade"/>
        <constructor-arg ref="webhookServicesRetryTemplate"/>
    </bean>

    <alias name="defaultWebhookFilterService" alias="webhookFilterService"/>
    <bean id="defaultWebhookFilterService"
          class="de.hybris.platform.webhookservices.filter.impl.DefaultWebhookFilterService">
        <constructor-arg ref="scriptingLanguagesService"/>
    </bean>

    <!--the list is used for verifying if consumed destination is assigned to WebhookConfiguration-->
    <bean depends-on="consumedDestinationPreventRemoveList" parent="listMergeDirective">
        <property name="add">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="#{T(de.hybris.platform.apiregistryservices.constants.ApiregistryservicesConstants).ITEM_DESTINATION_ATTRIBUTE}" value="#{T(de.hybris.platform.webhookservices.model.WebhookConfigurationModel).DESTINATION}"/>
                <entry key="#{T(de.hybris.platform.apiregistryservices.constants.ApiregistryservicesConstants).ITEM_TYPE_CODE}" value="#{T(de.hybris.platform.webhookservices.model.WebhookConfigurationModel)._TYPECODE}"/>
            </map>
        </property>
    </bean>

    <bean id="noWebhookConfigBeforeRemoveIOChecker"
          class="de.hybris.platform.webhookservices.interceptor.NoWebhookConfigBeforeRemoveIOChecker">
        <constructor-arg name="flexibleSearchService"
                         ref="flexibleSearchService"/>
    </bean>
    <!--the list is used for verifying if integration object is assigned to WebhookConfiguration-->
    <bean depends-on="beforeRemoveIntegrationObjectCheckers" parent="listMergeDirective">
        <property name="add" ref="noWebhookConfigBeforeRemoveIOChecker"/>
    </bean>

    <alias name="defaultCloudEventHeadersService" alias="cloudEventHeadersService" />
    <bean id="defaultCloudEventHeadersService" class="de.hybris.platform.webhookservices.service.impl.DefaultCloudEventHeadersService">
        <constructor-arg name="cloudEventConfigurationService" ref="cloudEventConfigurationService" />
    </bean>

    <alias name="defaultCloudEventConfigurationService" alias="cloudEventConfigurationService" />
    <bean id="defaultCloudEventConfigurationService" class="de.hybris.platform.webhookservices.service.impl.DefaultCloudEventConfigurationService"/>

    <alias name="defaultCloudEventHeadersRequestDecorator" alias="cloudEventHeadersRequestDecorator"/>
    <bean id="defaultCloudEventHeadersRequestDecorator"
          class="de.hybris.platform.webhookservices.decorator.DefaultCloudEventHeadersRequestDecorator">
        <constructor-arg ref="cloudEventHeadersService"/>
    </bean>
    <bean id="cloudEventHeadersDecoratorList" depends-on="outboundRequestDecoratorList" parent="listMergeDirective">
        <property name="add" ref="cloudEventHeadersRequestDecorator"/>
    </bean>

    <alias name="defaultWebhookEventFactory" alias="webhookEventFactory" />
    <bean id="defaultWebhookEventFactory" class="de.hybris.platform.webhookservices.event.impl.DefaultWebhookEventFactory"/>

</beans>
