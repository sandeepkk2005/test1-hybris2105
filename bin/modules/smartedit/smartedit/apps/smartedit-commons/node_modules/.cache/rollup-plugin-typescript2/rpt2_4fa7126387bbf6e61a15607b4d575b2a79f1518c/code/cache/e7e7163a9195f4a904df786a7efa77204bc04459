{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { LogService, PromiseUtils } from '@smart/utils';\r\nimport { SeDowngradeService } from 'smarteditcommons/di';\r\n/**\r\n * Used to transmit events synchronously or asynchronously. It is supported by the SmartEdit [gatewayFactory]{@link GatewayFactory} to propagate events between SmartEditContainer and SmartEdit.\r\n * It also contains options to publish events, as well as subscribe the event handlers.\r\n */\r\nvar /* @ngInject */ SystemEventService = /** @class */ (function () {\r\n    function /* @ngInject */ SystemEventService(logService, promiseUtils) {\r\n        this.logService = logService;\r\n        this.promiseUtils = promiseUtils;\r\n        this._eventHandlers = {};\r\n    }\r\n    /**\r\n     * Send the event with data synchronously.\r\n     *\r\n     * @returns A promise with resolved data of last subscriber or with the rejected error reason\r\n     */\r\n    /* @ngInject */ SystemEventService.prototype.publish = function (eventId, data) {\r\n        if (!eventId) {\r\n            this.logService.error('Failed to send event. No event ID provided for data: ' + data);\r\n        }\r\n        else {\r\n            if (this._eventHandlers[eventId] && this._eventHandlers[eventId].length > 0) {\r\n                return this._invokeEventHandlers(eventId, data);\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * Send the event with data asynchronously.\r\n     */\r\n    /* @ngInject */ SystemEventService.prototype.publishAsync = function (eventId, data) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            setTimeout(function () {\r\n                _this.publish(eventId, data).then(function (resolvedData) { return resolve(resolvedData); }, function (reason) { return reject(reason); });\r\n            }, 0);\r\n        });\r\n    };\r\n    /**\r\n     * Method to subscribe the event handler given the eventId and handler\r\n     *\r\n     * @param handler The event handler, a callback function which can either return a promise or directly a value.\r\n     *\r\n     * @returns Function to unsubscribe the event handler\r\n     */\r\n    /* @ngInject */ SystemEventService.prototype.subscribe = function (eventId, handler) {\r\n        var _this = this;\r\n        var unsubscribeFn;\r\n        if (!eventId || !handler) {\r\n            this.logService.error('Failed to subscribe event handler for event: ' + eventId);\r\n        }\r\n        else {\r\n            // create handlers array for this event if not already created\r\n            if (this._eventHandlers[eventId] === undefined) {\r\n                this._eventHandlers[eventId] = [];\r\n            }\r\n            this._eventHandlers[eventId].push(handler);\r\n            unsubscribeFn = function () {\r\n                _this._unsubscribe(eventId, handler);\r\n            };\r\n        }\r\n        return unsubscribeFn;\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    /* @ngInject */ SystemEventService.prototype._unsubscribe = function (eventId, handler) {\r\n        var handlersArray = this._eventHandlers[eventId];\r\n        var index = handlersArray ? this._eventHandlers[eventId].indexOf(handler) : -1;\r\n        if (index >= 0) {\r\n            this._eventHandlers[eventId].splice(index, 1);\r\n        }\r\n        else {\r\n            this.logService.warn('Attempting to remove event handler for ' + eventId + ' but handler not found.');\r\n        }\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    /* @ngInject */ SystemEventService.prototype._invokeEventHandlers = function (eventId, data) {\r\n        var _this = this;\r\n        return Promise.all(this._eventHandlers[eventId].map(function (eventHandler) {\r\n            var promiseClosure = _this.promiseUtils.toPromise(eventHandler);\r\n            return promiseClosure(eventId, data);\r\n        })).then(function (results) { return Promise.resolve(results.pop()); }, function (reason) { return Promise.reject(reason); });\r\n    };\r\n    /* @ngInject */ SystemEventService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [LogService, PromiseUtils])\r\n    ], /* @ngInject */ SystemEventService);\r\n    return /* @ngInject */ SystemEventService;\r\n}());\r\nexport { /* @ngInject */ SystemEventService };\r\n//# sourceMappingURL=SystemEventService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"SystemEventService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SystemEventService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/SystemEventService.d.ts","writeByteOrderMark":false,"text":"import { IEventService, LogService, PromiseUtils } from '@smart/utils';\r\nexport declare type EventHandler = (eventId: string, eventData?: any) => Promise<any> | any;\r\n/**\r\n * Used to transmit events synchronously or asynchronously. It is supported by the SmartEdit [gatewayFactory]{@link GatewayFactory} to propagate events between SmartEditContainer and SmartEdit.\r\n * It also contains options to publish events, as well as subscribe the event handlers.\r\n */\r\nexport declare class SystemEventService implements IEventService {\r\n    private logService;\r\n    private promiseUtils;\r\n    private _eventHandlers;\r\n    constructor(logService: LogService, promiseUtils: PromiseUtils);\r\n    /**\r\n     * Send the event with data synchronously.\r\n     *\r\n     * @returns A promise with resolved data of last subscriber or with the rejected error reason\r\n     */\r\n    publish(eventId: string, data?: any): Promise<any>;\r\n    /**\r\n     * Send the event with data asynchronously.\r\n     */\r\n    publishAsync(eventId: string, data?: any): Promise<any>;\r\n    /**\r\n     * Method to subscribe the event handler given the eventId and handler\r\n     *\r\n     * @param handler The event handler, a callback function which can either return a promise or directly a value.\r\n     *\r\n     * @returns Function to unsubscribe the event handler\r\n     */\r\n    subscribe(eventId: string, handler: EventHandler): () => void;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _unsubscribe;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _invokeEventHandlers;\r\n}\r\n"}}
