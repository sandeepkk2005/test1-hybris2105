{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { ISyncPollingService } from 'cmscommons';\r\nimport { SeDowngradeService } from 'smarteditcommons';\r\nvar /* @ngInject */ SlotSynchronizationService = /** @class */ (function () {\r\n    function /* @ngInject */ SlotSynchronizationService(syncPollingService) {\r\n        this.syncPollingService = syncPollingService;\r\n    }\r\n    /**\r\n     * Returns the sync status for the slot.\r\n     * @param pageUUID - the page where the slot is situated.\r\n     * @param slotId - the slot id for which to retrieve the sync status.\r\n     * @returns the sync status object, or null if not found.\r\n     */\r\n    /* @ngInject */ SlotSynchronizationService.prototype.getSyncStatus = function (pageUUID, slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var syncStatus, syncFromSelected, syncFromShared;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.syncPollingService.getSyncStatus(pageUUID)];\r\n                    case 1:\r\n                        syncStatus = _a.sent();\r\n                        syncFromSelected = this.findSlotStatus(syncStatus.selectedDependencies || [], slotId);\r\n                        if (syncFromSelected !== null) {\r\n                            syncFromSelected.fromSharedDependency = false;\r\n                            return [2 /*return*/, syncFromSelected];\r\n                        }\r\n                        else {\r\n                            syncFromShared = this.findSlotStatus(syncStatus.sharedDependencies || [], slotId);\r\n                            if (syncFromShared !== null) {\r\n                                syncFromShared.fromSharedDependency = true;\r\n                                return [2 /*return*/, syncFromShared];\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotSynchronizationService.prototype.performSync = function (array, uriContext) {\r\n        return this.syncPollingService.performSync(array, uriContext);\r\n    };\r\n    /**\r\n     * Verifies whether the sync status exists. The sync status for the slot does not exists when\r\n     * the slot comes from a parent catalog in multicountry environment.\r\n     * @param syncStatus - the object to verify.\r\n     * @returns true if the sync status exists, false otherwise.\r\n     */\r\n    /* @ngInject */ SlotSynchronizationService.prototype.syncStatusExists = function (syncStatus) {\r\n        return !!syncStatus;\r\n    };\r\n    /**\r\n     * Returns the slot sync status from the list of dependencies by slot id.\r\n     * @param dependencies - the list of dependencies to verify\r\n     * @param slotId - the slot for which to find a sync status\r\n     * @returns the sync status or null if cannot be find.\r\n     */\r\n    /* @ngInject */ SlotSynchronizationService.prototype.findSlotStatus = function (dependencies, slotId) {\r\n        return dependencies.find(function (slot) { return slot.name === slotId; }) || null;\r\n    };\r\n    /* @ngInject */ SlotSynchronizationService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [ISyncPollingService])\r\n    ], /* @ngInject */ SlotSynchronizationService);\r\n    return /* @ngInject */ SlotSynchronizationService;\r\n}());\r\nexport { /* @ngInject */ SlotSynchronizationService };\r\n//# sourceMappingURL=SlotSynchronizationService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SlotSynchronizationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotSynchronizationService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAY,mBAAmB,EAAe,MAAM,YAAY,CAAC;AACxE,OAAO,EAAyB,kBAAkB,EAAY,MAAM,kBAAkB,CAAC;AAGvF;IACI,oDAAoB,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;IAAG,CAAC;IAE/D;;;;;OAKG;IACU,kEAAa,GAA1B,UAA2B,QAAgB,EAAE,MAAc;;;;;4BACpC,qBAAM,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAA;;wBAAlE,UAAU,GAAG,SAAqD;wBAClE,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,oBAAoB,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;wBAC5F,IAAI,gBAAgB,KAAK,IAAI,EAAE;4BAC3B,gBAAgB,CAAC,oBAAoB,GAAG,KAAK,CAAC;4BAC9C,sBAAO,gBAAgB,EAAC;yBAC3B;6BAAM;4BACG,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,kBAAkB,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;4BACxF,IAAI,cAAc,KAAK,IAAI,EAAE;gCACzB,cAAc,CAAC,oBAAoB,GAAG,IAAI,CAAC;gCAC3C,sBAAO,cAAc,EAAC;6BACzB;yBACJ;wBACD,sBAAO,IAAI,EAAC;;;;KACf;IAEM,gEAAW,GAAlB,UAAmB,KAAyB,EAAE,UAAuB;QACjE,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAClE,CAAC;IAED;;;;;OAKG;IACI,qEAAgB,GAAvB,UAAwB,UAAuB;QAC3C,OAAO,CAAC,CAAC,UAAU,CAAC;IACxB,CAAC;IAED;;;;;OAKG;IACK,mEAAc,GAAtB,UAAuB,YAA2B,EAAE,MAAc;QAC9D,OAAO,YAAY,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,IAAI,KAAK,MAAM,EAApB,CAAoB,CAAC,IAAI,IAAI,CAAC;IACrE,CAAC;IA/CL;QADC,kBAAkB,EAAE;yCAEuB,mBAAmB;kDA+C9D;IAAD,iDAAC;CAAA,AAhDD,IAgDC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/SlotSynchronizationService.d.ts","writeByteOrderMark":false,"text":"import { ISyncJob, ISyncPollingService, ISyncStatus } from 'cmscommons';\r\nimport { IUriContext, Nullable, TypedMap } from 'smarteditcommons';\r\nexport declare class SlotSynchronizationService {\r\n    private syncPollingService;\r\n    constructor(syncPollingService: ISyncPollingService);\r\n    /**\r\n     * Returns the sync status for the slot.\r\n     * @param pageUUID - the page where the slot is situated.\r\n     * @param slotId - the slot id for which to retrieve the sync status.\r\n     * @returns the sync status object, or null if not found.\r\n     */\r\n    getSyncStatus(pageUUID: string, slotId: string): Promise<Nullable<ISyncStatus>>;\r\n    performSync(array: TypedMap<string>[], uriContext: IUriContext): Promise<ISyncJob>;\r\n    /**\r\n     * Verifies whether the sync status exists. The sync status for the slot does not exists when\r\n     * the slot comes from a parent catalog in multicountry environment.\r\n     * @param syncStatus - the object to verify.\r\n     * @returns true if the sync status exists, false otherwise.\r\n     */\r\n    syncStatusExists(syncStatus: ISyncStatus): boolean;\r\n    /**\r\n     * Returns the slot sync status from the list of dependencies by slot id.\r\n     * @param dependencies - the list of dependencies to verify\r\n     * @param slotId - the slot for which to find a sync status\r\n     * @returns the sync status or null if cannot be find.\r\n     */\r\n    private findSlotStatus;\r\n}\r\n"}}
