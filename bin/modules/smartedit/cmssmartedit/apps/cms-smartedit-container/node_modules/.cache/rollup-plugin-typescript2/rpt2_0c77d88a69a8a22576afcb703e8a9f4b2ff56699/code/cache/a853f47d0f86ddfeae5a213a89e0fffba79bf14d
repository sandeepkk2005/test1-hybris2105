{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport * as lodash from 'lodash';\r\nimport { RestServiceFactory, SeDowngradeService, MEDIA_RESOURCE_URI } from 'smarteditcommons';\r\n/**\r\n * This service provides functionality to upload images and to fetch images by code for a specific catalog-catalog version combination.\r\n */\r\nvar /* @ngInject */ MediaUploaderService = /** @class */ (function () {\r\n    function /* @ngInject */ MediaUploaderService(restServiceFactory) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.mediaRestService = this.restServiceFactory.get(MEDIA_RESOURCE_URI);\r\n    }\r\n    /**\r\n     * Uploads the media to the catalog.\r\n     *\r\n     * @returns Promise that resolves with the media object if request is successful.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ MediaUploaderService.prototype.uploadMedia = function (media) {\r\n        var formData = new FormData();\r\n        lodash.forEach(media, function (value, key) {\r\n            formData.append(key, value);\r\n        });\r\n        return this.mediaRestService.save(formData, {\r\n            headers: { enctype: 'multipart/form-data' }\r\n        });\r\n    };\r\n    /* @ngInject */ MediaUploaderService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [RestServiceFactory])\r\n    ], /* @ngInject */ MediaUploaderService);\r\n    return /* @ngInject */ MediaUploaderService;\r\n}());\r\nexport { /* @ngInject */ MediaUploaderService };\r\n//# sourceMappingURL=MediaUploaderService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"MediaUploaderService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/genericEditor/media/services/MediaUploaderService.ts\"],\"names\":[],\"mappings\":\";AAIA,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAEH,kBAAkB,EAClB,kBAAkB,EAClB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAe1B;;GAEG;AAEH;IAGI,8CAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;OAKG;IACH,0DAAW,GAAX,UAAY,KAAoB;QAC5B,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,UAAC,KAAK,EAAE,GAAW;YACrC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAe,EAAE;YAC/C,OAAO,EAAE,EAAE,OAAO,EAAE,qBAAqB,EAAE;SAC9C,CAAC,CAAC;IACP,CAAC;IAtBL;QADC,kBAAkB,EAAE;yCAIuB,kBAAkB;4CAoB7D;IAAD,2CAAC;CAAA,AAvBD,IAuBC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/genericEditor/media/services/MediaUploaderService.d.ts","writeByteOrderMark":false,"text":"import { ICMSMedia } from 'cmscommons';\r\nimport { RestServiceFactory } from 'smarteditcommons';\r\nexport interface MediaToUpload {\r\n    /**\r\n     * The {@link https://developer.mozilla.org/en/docs/Web/API/File File} object to be* uploaded.\r\n     */\r\n    file: File;\r\n    /** A unique code identifier for the media. */\r\n    code: string;\r\n    /** A description of the media. */\r\n    description: string;\r\n    /** An alternate text to be shown for the media. */\r\n    altText: string;\r\n}\r\n/**\r\n * This service provides functionality to upload images and to fetch images by code for a specific catalog-catalog version combination.\r\n */\r\nexport declare class MediaUploaderService {\r\n    private restServiceFactory;\r\n    private readonly mediaRestService;\r\n    constructor(restServiceFactory: RestServiceFactory);\r\n    /**\r\n     * Uploads the media to the catalog.\r\n     *\r\n     * @returns Promise that resolves with the media object if request is successful.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    uploadMedia(media: MediaToUpload): Promise<ICMSMedia>;\r\n}\r\n"}}
