{"version":3,"file":"SetupPackageRegistry.js","sourceRoot":"","sources":["../../../src/logic/setup/SetupPackageRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as child_process from 'child_process';\r\nimport {\r\n  AlreadyReportedError,\r\n  Colors,\r\n  ConsoleTerminalProvider,\r\n  Executable,\r\n  FileSystem,\r\n  InternalError,\r\n  JsonObject,\r\n  NewlineKind,\r\n  Terminal,\r\n  Text\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { IArtifactoryPackageRegistryJson, ArtifactoryConfiguration } from './ArtifactoryConfiguration';\r\nimport { WebClient, WebClientResponse } from '../../utilities/WebClient';\r\nimport { TerminalInput } from './TerminalInput';\r\n\r\ninterface IArtifactoryCustomizableMessages {\r\n  introduction: string;\r\n  obtainAnAccount: string;\r\n  visitWebsite: string;\r\n  locateUserName: string;\r\n  locateApiKey: string;\r\n}\r\n\r\nconst defaultMessages: IArtifactoryCustomizableMessages = {\r\n  introduction: 'This monorepo consumes packages from an Artifactory private NPM registry.',\r\n  obtainAnAccount:\r\n    'Please contact the repository maintainers for help with setting up an Artifactory user account.',\r\n  visitWebsite: 'Please open this URL in your web browser:',\r\n  locateUserName: 'Your user name appears in the upper-right corner of the JFrog website.',\r\n  locateApiKey:\r\n    'Click \"Edit Profile\" on the JFrog website.  Click the \"Generate API Key\"' +\r\n    \" button if you haven't already done so previously.\"\r\n};\r\n\r\nexport interface ISetupPackageRegistryOptions {\r\n  rushConfiguration: RushConfiguration;\r\n  isDebug: boolean;\r\n\r\n  /**\r\n   * Whether Utilities.syncNpmrc() has already been called.\r\n   */\r\n  syncNpmrcAlreadyCalled: boolean;\r\n}\r\n\r\nexport class SetupPackageRegistry {\r\n  private readonly _options: ISetupPackageRegistryOptions;\r\n  public readonly rushConfiguration: RushConfiguration;\r\n  private readonly _terminal: Terminal;\r\n  private readonly _artifactoryConfiguration: ArtifactoryConfiguration;\r\n  private readonly _messages: IArtifactoryCustomizableMessages;\r\n\r\n  public constructor(options: ISetupPackageRegistryOptions) {\r\n    this._options = options;\r\n    this.rushConfiguration = options.rushConfiguration;\r\n\r\n    this._terminal = new Terminal(\r\n      new ConsoleTerminalProvider({\r\n        verboseEnabled: options.isDebug\r\n      })\r\n    );\r\n\r\n    this._artifactoryConfiguration = new ArtifactoryConfiguration(\r\n      path.join(this.rushConfiguration.commonRushConfigFolder, 'artifactory.json')\r\n    );\r\n\r\n    this._messages = {\r\n      ...defaultMessages,\r\n      ...this._artifactoryConfiguration.configuration.packageRegistry.messageOverrides\r\n    };\r\n  }\r\n\r\n  private _writeInstructionBlock(message: string): void {\r\n    if (message === '') {\r\n      return;\r\n    }\r\n\r\n    this._terminal.writeLine(Utilities.wrapWords(message));\r\n    this._terminal.writeLine();\r\n  }\r\n\r\n  /**\r\n   * Test whether the NPM token is valid.\r\n   *\r\n   * @returns - `true` if valid, `false` if not valid\r\n   */\r\n  public async checkOnly(): Promise<boolean> {\r\n    const packageRegistry: IArtifactoryPackageRegistryJson = this._artifactoryConfiguration.configuration\r\n      .packageRegistry;\r\n    if (!packageRegistry.enabled) {\r\n      this._terminal.writeVerbose('Skipping package registry setup because packageRegistry.enabled=false');\r\n      return true;\r\n    }\r\n\r\n    const registryUrl: string = (packageRegistry?.registryUrl || '').trim();\r\n    if (registryUrl.length === 0) {\r\n      throw new Error('The \"registryUrl\" setting in artifactory.json is missing or empty');\r\n    }\r\n\r\n    if (!this._options.syncNpmrcAlreadyCalled) {\r\n      Utilities.syncNpmrc(\r\n        this.rushConfiguration.commonRushConfigFolder,\r\n        this.rushConfiguration.commonTempFolder\r\n      );\r\n    }\r\n\r\n    // Artifactory does not implement the \"npm ping\" protocol or any equivalent REST API.\r\n    // But if we query a package that is known not to exist, Artifactory will only return\r\n    // a 404 error if it is successfully authenticated.  We can use this negative query\r\n    // to validate the credentials.\r\n    const npmArgs: string[] = [\r\n      'view',\r\n      '@rushstack/nonexistent-package',\r\n      '--json',\r\n      '--registry=' + packageRegistry.registryUrl\r\n    ];\r\n\r\n    this._terminal.writeLine('Testing access to private NPM registry: ' + packageRegistry.registryUrl);\r\n\r\n    const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync('npm', npmArgs, {\r\n      currentWorkingDirectory: this.rushConfiguration.commonTempFolder,\r\n      stdio: ['ignore', 'pipe', 'pipe'],\r\n      // Wait at most 10 seconds for \"npm view\" to succeed\r\n      timeoutMs: 10 * 1000\r\n    });\r\n    this._terminal.writeLine();\r\n\r\n    // (This is not exactly correct, for example Node.js puts a string in error.errno instead of a string.)\r\n    const error: (Error & Partial<NodeJS.ErrnoException>) | undefined = result.error;\r\n\r\n    if (error) {\r\n      if (error.code === 'ETIMEDOUT') {\r\n        // For example, an incorrect \"https-proxy\" setting can hang for a long time\r\n        throw new Error('The \"npm view\" command timed out; check your .npmrc file for an incorrect setting');\r\n      }\r\n\r\n      throw new Error('Error invoking \"npm view\": ' + result.error);\r\n    }\r\n\r\n    if (result.status === 0) {\r\n      throw new InternalError('\"npm view\" unexpectedly succeeded');\r\n    }\r\n\r\n    // NPM 6.x writes to stdout\r\n    let jsonContent: string | undefined = SetupPackageRegistry._tryFindJson(result.stdout);\r\n    if (jsonContent === undefined) {\r\n      // NPM 7.x writes dirty output to stderr; see https://github.com/npm/cli/issues/2740\r\n      jsonContent = SetupPackageRegistry._tryFindJson(result.stderr);\r\n    }\r\n    if (jsonContent === undefined) {\r\n      throw new InternalError('The \"npm view\" command did not return a JSON structure');\r\n    }\r\n\r\n    let jsonOutput: JsonObject;\r\n    try {\r\n      jsonOutput = JSON.parse(jsonContent);\r\n    } catch (error) {\r\n      this._terminal.writeVerboseLine('NPM response:\\n\\n--------\\n' + jsonContent + '\\n--------\\n\\n');\r\n      throw new InternalError('The \"npm view\" command returned an invalid JSON structure');\r\n    }\r\n    const errorCode: JsonObject = jsonOutput?.error?.code;\r\n    if (typeof errorCode !== 'string') {\r\n      this._terminal.writeVerboseLine('NPM response:\\n' + JSON.stringify(jsonOutput, undefined, 2) + '\\n\\n');\r\n      throw new InternalError('The \"npm view\" command returned unexpected output');\r\n    }\r\n\r\n    switch (errorCode) {\r\n      case 'E404':\r\n        this._terminal.writeLine('NPM credentials are working');\r\n        this._terminal.writeLine();\r\n        return true;\r\n      case 'E401':\r\n      case 'E403':\r\n        this._terminal.writeVerboseLine(\r\n          'NPM response:\\n' + JSON.stringify(jsonOutput, undefined, 2) + '\\n\\n'\r\n        );\r\n        // Credentials are missing or expired\r\n        return false;\r\n      default:\r\n        this._terminal.writeVerboseLine(\r\n          'NPM response:\\n' + JSON.stringify(jsonOutput, undefined, 2) + '\\n\\n'\r\n        );\r\n        throw new Error(`The \"npm view\" command returned an unexpected error code \"${errorCode}\"`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether the NPM token is valid.  If not, prompt to update it.\r\n   */\r\n  public async checkAndSetup(): Promise<void> {\r\n    if (await this.checkOnly()) {\r\n      return;\r\n    }\r\n\r\n    this._terminal.writeWarningLine('NPM credentials are missing or expired');\r\n    this._terminal.writeLine();\r\n\r\n    const packageRegistry: IArtifactoryPackageRegistryJson = this._artifactoryConfiguration.configuration\r\n      .packageRegistry;\r\n\r\n    const fixThisProblem: boolean = await TerminalInput.promptYesNo({\r\n      message: 'Fix this problem now?',\r\n      defaultValue: false\r\n    });\r\n    this._terminal.writeLine();\r\n    if (!fixThisProblem) {\r\n      return;\r\n    }\r\n\r\n    this._writeInstructionBlock(this._messages.introduction);\r\n\r\n    const hasArtifactoryAccount: boolean = await TerminalInput.promptYesNo({\r\n      message: 'Do you already have an Artifactory user account?'\r\n    });\r\n    this._terminal.writeLine();\r\n\r\n    if (!hasArtifactoryAccount) {\r\n      this._writeInstructionBlock(this._messages.obtainAnAccount);\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    if (this._messages.visitWebsite) {\r\n      this._writeInstructionBlock(this._messages.visitWebsite);\r\n\r\n      const artifactoryWebsiteUrl: string = this._artifactoryConfiguration.configuration.packageRegistry\r\n        .artifactoryWebsiteUrl;\r\n\r\n      if (artifactoryWebsiteUrl) {\r\n        this._terminal.writeLine('  ', Colors.cyan(artifactoryWebsiteUrl));\r\n        this._terminal.writeLine();\r\n      }\r\n    }\r\n\r\n    this._writeInstructionBlock(this._messages.locateUserName);\r\n\r\n    let artifactoryUser: string = await TerminalInput.promptLine({\r\n      message: 'What is your Artifactory user name?'\r\n    });\r\n    this._terminal.writeLine();\r\n\r\n    artifactoryUser = artifactoryUser.trim();\r\n    if (artifactoryUser.length === 0) {\r\n      this._terminal.writeLine(Colors.red('Operation aborted because the input was empty'));\r\n      this._terminal.writeLine();\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    this._writeInstructionBlock(this._messages.locateApiKey);\r\n\r\n    let artifactoryKey: string = await TerminalInput.promptPasswordLine({\r\n      message: 'What is your Artifactory API key?'\r\n    });\r\n    this._terminal.writeLine();\r\n\r\n    artifactoryKey = artifactoryKey.trim();\r\n    if (artifactoryKey.length === 0) {\r\n      this._terminal.writeLine(Colors.red('Operation aborted because the input was empty'));\r\n      this._terminal.writeLine();\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    await this._fetchTokenAndUpdateNpmrc(artifactoryUser, artifactoryKey, packageRegistry);\r\n  }\r\n\r\n  /**\r\n   * Fetch a valid NPM token from the Artifactory service and add it to the `~/.npmrc` file,\r\n   * preserving other settings in that file.\r\n   */\r\n  private async _fetchTokenAndUpdateNpmrc(\r\n    artifactoryUser: string,\r\n    artifactoryKey: string,\r\n    packageRegistry: IArtifactoryPackageRegistryJson\r\n  ): Promise<void> {\r\n    this._terminal.writeLine('\\nFetching an NPM token from the Artifactory service...');\r\n\r\n    const webClient: WebClient = new WebClient();\r\n\r\n    webClient.addBasicAuthHeader(artifactoryUser, artifactoryKey);\r\n\r\n    let queryUrl: string = packageRegistry.registryUrl;\r\n    if (!queryUrl.endsWith('/')) {\r\n      queryUrl += '/';\r\n    }\r\n\r\n    // There doesn't seem to be a way to invoke the \"/auth\" REST endpoint without a resource name.\r\n    // Artifactory's NPM folders always seem to contain a \".npm\" folder, so we can use that to obtain\r\n    // our token.\r\n    queryUrl += `auth/.npm`;\r\n\r\n    let response: WebClientResponse;\r\n    try {\r\n      response = await webClient.fetchAsync(queryUrl);\r\n    } catch (e) {\r\n      console.log(e.toString());\r\n      return;\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        throw new Error('Authorization failed; the Artifactory user name or API key may be incorrect.');\r\n      }\r\n\r\n      throw new Error(`The Artifactory request failed:\\n  (${response.status}) ${response.statusText}`);\r\n    }\r\n\r\n    // We expect a response like this:\r\n    //\r\n    //   @.npm:registry=https://your-company.jfrog.io/your-artifacts/api/npm/npm-private/\r\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:_password=dGhlIHRva2VuIGdvZXMgaGVyZQ==\r\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:username=your.name@your-company.com\r\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:email=your.name@your-company.com\r\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:always-auth=true\r\n    const responseText: string = await response.text();\r\n    const responseLines: string[] = Text.convertToLf(responseText).trim().split('\\n');\r\n    if (responseLines.length < 2 || !responseLines[0].startsWith('@.npm:')) {\r\n      throw new Error('Unexpected response from Artifactory');\r\n    }\r\n    responseLines.shift(); // Remove the @.npm line\r\n\r\n    // These are the lines to be injected in ~/.npmrc\r\n    const linesToAdd: string[] = [];\r\n\r\n    // Start with userNpmrcLinesToAdd...\r\n    if (packageRegistry.userNpmrcLinesToAdd) {\r\n      linesToAdd.push(...packageRegistry.userNpmrcLinesToAdd);\r\n    }\r\n\r\n    // ...then append the stuff we got from the REST API, but discard any junk that isn't a proper key/value\r\n    linesToAdd.push(...responseLines.filter((x) => SetupPackageRegistry._getNpmrcKey(x) !== undefined));\r\n\r\n    const npmrcPath: string = path.join(Utilities.getHomeFolder(), '.npmrc');\r\n\r\n    this._mergeLinesIntoNpmrc(npmrcPath, linesToAdd);\r\n  }\r\n\r\n  /**\r\n   * Update the `~/.npmrc` file by adding `linesToAdd` to it.\r\n   * @remarks\r\n   *\r\n   * If the `.npmrc` file has existing content, it gets merged as follows:\r\n   * - If `linesToAdd` contains key/value pairs and the key already appears in .npmrc,\r\n   *   that line will be overwritten in place\r\n   * - If `linesToAdd` contains non-key lines (e.g. a comment) and it exactly matches a\r\n   *   line in .npmrc, then that line will be kept where it is\r\n   * - The remaining `linesToAdd` that weren't handled by one of the two rules above\r\n   *   are simply appended to the end of the file\r\n   * - Under no circumstances is a duplicate key/value added to the file; in the case of\r\n   *   duplicates, the earliest line in `linesToAdd` takes precedence\r\n   */\r\n  private _mergeLinesIntoNpmrc(npmrcPath: string, linesToAdd: readonly string[]): void {\r\n    // We'll replace entries with \"undefined\" if they get discarded\r\n    const workingLinesToAdd: (string | undefined)[] = [...linesToAdd];\r\n\r\n    // Now build a table of .npmrc keys that can be replaced if they already exist in the file.\r\n    // For example, if we are adding \"always-auth=false\" then we should delete an existing line\r\n    // that says \"always-auth=true\".\r\n    const keysToReplace: Map<string, number> = new Map(); // key --> linesToAdd index\r\n\r\n    for (let index: number = 0; index < workingLinesToAdd.length; ++index) {\r\n      const lineToAdd: string = workingLinesToAdd[index]!;\r\n\r\n      const key: string | undefined = SetupPackageRegistry._getNpmrcKey(lineToAdd);\r\n      if (key !== undefined) {\r\n        // If there are duplicate keys, the first one takes precedence.\r\n        // In particular this means \"userNpmrcLinesToAdd\" takes precedence over the REST API response\r\n        if (keysToReplace.has(key)) {\r\n          // Discard the duplicate key\r\n          workingLinesToAdd[index] = undefined;\r\n        } else {\r\n          keysToReplace.set(key, index);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._terminal.writeLine();\r\n    this._terminal.writeLine(Colors.green('Adding Artifactory token to: '), npmrcPath);\r\n\r\n    const npmrcLines: string[] = [];\r\n\r\n    if (FileSystem.exists(npmrcPath)) {\r\n      const npmrcContent: string = FileSystem.readFile(npmrcPath, { convertLineEndings: NewlineKind.Lf });\r\n      npmrcLines.push(...npmrcContent.trimRight().split('\\n'));\r\n    }\r\n\r\n    if (npmrcLines.length === 1 && npmrcLines[0] === '') {\r\n      // Edge case where split() adds a blank line to the start of the file\r\n      npmrcLines.length = 0;\r\n    }\r\n\r\n    // Make a set of existing .npmrc lines that are not key/value pairs.\r\n    const npmrcNonKeyLinesSet: Set<string> = new Set();\r\n    for (const npmrcLine of npmrcLines) {\r\n      const trimmed: string = npmrcLine.trim();\r\n      if (trimmed.length > 0) {\r\n        if (SetupPackageRegistry._getNpmrcKey(trimmed) === undefined) {\r\n          npmrcNonKeyLinesSet.add(trimmed);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Overwrite any existing lines that match a key from \"linesToAdd\"\r\n    for (let index: number = 0; index < npmrcLines.length; ++index) {\r\n      const line: string = npmrcLines[index];\r\n\r\n      const key: string | undefined = SetupPackageRegistry._getNpmrcKey(line);\r\n      if (key) {\r\n        const linesToAddIndex: number | undefined = keysToReplace.get(key);\r\n        if (linesToAddIndex !== undefined) {\r\n          npmrcLines[index] = workingLinesToAdd[linesToAddIndex] || '';\r\n\r\n          // Delete it since it's been replaced\r\n          keysToReplace.delete(key);\r\n\r\n          // Also remove it from \"linesToAdd\"\r\n          workingLinesToAdd[linesToAddIndex] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (npmrcLines.length > 0 && npmrcLines[npmrcLines.length - 1] !== '') {\r\n      // Append a blank line\r\n      npmrcLines.push('');\r\n    }\r\n\r\n    // Add any remaining values that weren't matched above\r\n    for (const lineToAdd of workingLinesToAdd) {\r\n      // If a line is undefined, that means we already used it to replace an existing line above\r\n      if (lineToAdd !== undefined) {\r\n        // If a line belongs to npmrcNonKeyLinesSet, then we should not add it because it's\r\n        // already in the .npmrc file\r\n        if (!npmrcNonKeyLinesSet.has(lineToAdd.trim())) {\r\n          npmrcLines.push(lineToAdd);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Save the result\r\n    FileSystem.writeFile(npmrcPath, npmrcLines.join('\\n').trimRight() + '\\n');\r\n  }\r\n\r\n  private static _getNpmrcKey(npmrcLine: string): string | undefined {\r\n    if (SetupPackageRegistry._isCommentLine(npmrcLine)) {\r\n      return undefined;\r\n    }\r\n    const delimiterIndex: number = npmrcLine.indexOf('=');\r\n    if (delimiterIndex < 1) {\r\n      return undefined;\r\n    }\r\n    const key: string = npmrcLine.substring(0, delimiterIndex + 1);\r\n    return key.trim();\r\n  }\r\n\r\n  private static _isCommentLine(npmrcLine: string): boolean {\r\n    return /^\\s*#/.test(npmrcLine);\r\n  }\r\n\r\n  /**\r\n   * This is a workaround for https://github.com/npm/cli/issues/2740 where the NPM tool sometimes\r\n   * mixes together JSON and terminal messages in a single STDERR stream.\r\n   *\r\n   * @remarks\r\n   * Given an input like this:\r\n   * ```\r\n   * npm ERR! 404 Note that you can also install from a\r\n   * npm ERR! 404 tarball, folder, http url, or git url.\r\n   * {\r\n   *   \"error\": {\r\n   *     \"code\": \"E404\",\r\n   *     \"summary\": \"Not Found - GET https://registry.npmjs.org/@rushstack%2fnonexistent-package - Not found\"\r\n   *   }\r\n   * }\r\n   * npm ERR! A complete log of this run can be found in:\r\n   * ```\r\n   *\r\n   * @returns the JSON section, or `undefined` if a JSON object could not be detected\r\n   */\r\n  private static _tryFindJson(dirtyOutput: string): string | undefined {\r\n    const lines: string[] = dirtyOutput.split(/\\r?\\n/g);\r\n    let startIndex: number | undefined;\r\n    let endIndex: number | undefined;\r\n\r\n    // Find the first line that starts with \"{\"\r\n    for (let i: number = 0; i < lines.length; ++i) {\r\n      const line: string = lines[i];\r\n      if (/^\\s*\\{/.test(line)) {\r\n        startIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    if (startIndex === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    // Find the last line that ends with \"}\"\r\n    for (let i: number = lines.length - 1; i >= startIndex; --i) {\r\n      const line: string = lines[i];\r\n      if (/\\}\\s*$/.test(line)) {\r\n        endIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (endIndex === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return lines.slice(startIndex, endIndex + 1).join('\\n');\r\n  }\r\n}\r\n"]}