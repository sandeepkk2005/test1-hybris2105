{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\nimport './PerspectiveSelectorComponent.scss';\r\nimport { Component, HostListener, Inject, Input } from '@angular/core';\r\nimport { ALL_PERSPECTIVE, CrossFrameEventService, EVENT_PERSPECTIVE_ADDED, EVENT_PERSPECTIVE_CHANGED, EVENT_PERSPECTIVE_REFRESHED, EVENT_SERVICE, EVENT_STRICT_PREVIEW_MODE_REQUESTED, EVENTS, IIframeClickDetectionService, IPerspectiveService, LogService, NONE_PERSPECTIVE, SeDowngradeComponent, SystemEventService, TestModeService, YJQUERY_TOKEN } from 'smarteditcommons';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"PerspectiveSelectorComponent\", {\r\n    selector: 'se-perspective-selector',\r\n    template: \"<fd-popover [(isOpen)]=\\\"isOpen\\\" [closeOnOutsideClick]=\\\"false\\\" [triggers]=\\\"['click']\\\" *ngIf=\\\"hasActivePerspective()\\\" class=\\\"se-perspective-selector\\\" [placement]=\\\"'bottom-end'\\\" [disabled]=\\\"isDisabled\\\" [options]=\\\"popperOptions\\\"><fd-popover-control><div class=\\\"se-perspective-selector__trigger\\\"><se-tooltip [isChevronVisible]=\\\"true\\\" [triggers]=\\\"['mouseenter', 'mouseleave']\\\" *ngIf=\\\"isTooltipVisible()\\\"><span se-tooltip-trigger id=\\\"perspectiveTooltip\\\" class=\\\"hyicon hyicon-info se-perspective-selector__hotkey-tooltip--icon\\\"></span><div se-tooltip-body>{{ activePerspective.descriptionI18nKey | translate }}</div></se-tooltip><button class=\\\"se-perspective-selector__btn\\\" [disabled]=\\\"isDisabled\\\">{{getActivePerspectiveName() | translate}} <span class=\\\"se-perspective-selector__btn-arrow icon-navigation-down-arrow\\\"></span></button></div></fd-popover-control><fd-popover-body><ul class=\\\"se-perspective__list fd-list-group\\\" [ngClass]=\\\"{'se-perspective__list--tooltip': isTooltipVisible()}\\\" role=\\\"menu\\\"><li *ngFor=\\\"let choice of getDisplayedPerspectives()\\\" class=\\\"fd-list-group__item se-perspective__list-item fd-has-padding-none\\\"><a class=\\\"item se-perspective__list-item-text\\\" (click)=\\\"selectPerspective($event, choice.key);\\\">{{choice.nameI18nKey | translate}}</a></li></ul></fd-popover-body></fd-popover>\"\r\n});\r\nvar /* @ngInject */ PerspectiveSelectorComponent = /** @class */ (function () {\r\n    function /* @ngInject */ PerspectiveSelectorComponent(logService, yjQuery, perspectiveService, iframeClickDetectionService, systemEventService, crossFrameEventService, testModeService) {\r\n        this.logService = logService;\r\n        this.yjQuery = yjQuery;\r\n        this.perspectiveService = perspectiveService;\r\n        this.iframeClickDetectionService = iframeClickDetectionService;\r\n        this.systemEventService = systemEventService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.testModeService = testModeService;\r\n        this.isOpen = false;\r\n        this.popperOptions = {\r\n            placement: 'bottom-start',\r\n            modifiers: {\r\n                preventOverflow: {\r\n                    enabled: true,\r\n                    escapeWithReference: true,\r\n                    boundariesElement: 'viewport'\r\n                },\r\n                applyStyle: {\r\n                    gpuAcceleration: false\r\n                }\r\n            }\r\n        };\r\n        this.isDisabled = false;\r\n        this.perspectives = [];\r\n        this.displayedPerspectives = [];\r\n        this.activePerspective = null;\r\n    }\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.onDocumentClick = function (event) {\r\n        this.onClickHandler(event);\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.activePerspective = null;\r\n        this.iframeClickDetectionService.registerCallback('perspectiveSelectorClose', function () {\r\n            return _this.closeDropdown();\r\n        });\r\n        this.unRegOverlayDisabledFn = this.systemEventService.subscribe('OVERLAY_DISABLED', function () {\r\n            return _this.closeDropdown();\r\n        });\r\n        this.unRegPerspectiveAddedFn = this.systemEventService.subscribe(EVENT_PERSPECTIVE_ADDED, function () { return _this.onPerspectiveAdded(); });\r\n        this.unRegPerspectiveChgFn = this.crossFrameEventService.subscribe(EVENT_PERSPECTIVE_CHANGED, function () { return _this.refreshPerspectives(); });\r\n        this.unRegPerspectiveRefreshFn = this.crossFrameEventService.subscribe(EVENT_PERSPECTIVE_REFRESHED, function () { return _this.refreshPerspectives(); });\r\n        this.unRegUserHasChanged = this.crossFrameEventService.subscribe(EVENTS.USER_HAS_CHANGED, function () { return _this.onPerspectiveAdded(); });\r\n        this.unRegStrictPreviewModeToggleFn = this.crossFrameEventService.subscribe(EVENT_STRICT_PREVIEW_MODE_REQUESTED, function (eventId, isDisabled) { return _this.togglePerspectiveSelector(isDisabled); });\r\n        this.onPerspectiveAdded();\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.ngOnDestroy = function () {\r\n        this.unRegOverlayDisabledFn();\r\n        this.unRegPerspectiveAddedFn();\r\n        this.unRegPerspectiveChgFn();\r\n        this.unRegPerspectiveRefreshFn();\r\n        this.unRegUserHasChanged();\r\n        this.unRegStrictPreviewModeToggleFn();\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.selectPerspective = function (event, choice) {\r\n        event.preventDefault();\r\n        try {\r\n            this.perspectiveService.switchTo(choice);\r\n            this.closeDropdown();\r\n        }\r\n        catch (e) {\r\n            this.logService.error('selectPerspective() - Cannot select perspective.', e);\r\n        }\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.getDisplayedPerspectives = function () {\r\n        return this.displayedPerspectives;\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.getActivePerspectiveName = function () {\r\n        return this.activePerspective ? this.activePerspective.nameI18nKey : '';\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.hasActivePerspective = function () {\r\n        return this.activePerspective !== null;\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.isTooltipVisible = function () {\r\n        return (!!this.activePerspective &&\r\n            !!this.activePerspective.descriptionI18nKey &&\r\n            this.checkTooltipVisibilityCondition());\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.checkTooltipVisibilityCondition = function () {\r\n        if (this.activePerspective.key !== NONE_PERSPECTIVE ||\r\n            (this.activePerspective.key === NONE_PERSPECTIVE && this.isDisabled)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.filterPerspectives = function (perspectives) {\r\n        var _this = this;\r\n        return perspectives.filter(function (perspective) {\r\n            var isActivePerspective = _this.activePerspective && perspective.key === _this.activePerspective.key;\r\n            var isAllPerspective = perspective.key === ALL_PERSPECTIVE;\r\n            return !isActivePerspective && (!isAllPerspective || _this.testModeService.isE2EMode());\r\n        });\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.closeDropdown = function () {\r\n        this.isOpen = false;\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.onPerspectiveAdded = function () {\r\n        var _this = this;\r\n        this.perspectiveService.getPerspectives().then(function (result) {\r\n            _this.perspectives = result;\r\n            _this.displayedPerspectives = _this.filterPerspectives(_this.perspectives);\r\n        });\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.refreshPerspectives = function () {\r\n        var _this = this;\r\n        this.perspectiveService.getPerspectives().then(function (result) {\r\n            _this.perspectives = result;\r\n            _this._refreshActivePerspective();\r\n            _this.displayedPerspectives = _this.filterPerspectives(_this.perspectives);\r\n        });\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype._refreshActivePerspective = function () {\r\n        this.activePerspective = this.perspectiveService.getActivePerspective();\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.onClickHandler = function (event) {\r\n        if (this.yjQuery(event.target).parents('.se-perspective-selector').length <= 0 &&\r\n            this.isOpen) {\r\n            this.closeDropdown();\r\n        }\r\n    };\r\n    /* @ngInject */ PerspectiveSelectorComponent.prototype.togglePerspectiveSelector = function (value) {\r\n        this.isDisabled = value;\r\n    };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], /* @ngInject */ PerspectiveSelectorComponent.prototype, \"isOpen\", void 0);\r\n    __decorate([\r\n        HostListener('document:click', ['$event']),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Event]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], /* @ngInject */ PerspectiveSelectorComponent.prototype, \"onDocumentClick\", null);\r\n    /* @ngInject */ PerspectiveSelectorComponent = __decorate([\r\n        SeDowngradeComponent(),\r\n        Component({\r\n            selector: 'se-perspective-selector',\r\n            template: \"<fd-popover [(isOpen)]=\\\"isOpen\\\" [closeOnOutsideClick]=\\\"false\\\" [triggers]=\\\"['click']\\\" *ngIf=\\\"hasActivePerspective()\\\" class=\\\"se-perspective-selector\\\" [placement]=\\\"'bottom-end'\\\" [disabled]=\\\"isDisabled\\\" [options]=\\\"popperOptions\\\"><fd-popover-control><div class=\\\"se-perspective-selector__trigger\\\"><se-tooltip [isChevronVisible]=\\\"true\\\" [triggers]=\\\"['mouseenter', 'mouseleave']\\\" *ngIf=\\\"isTooltipVisible()\\\"><span se-tooltip-trigger id=\\\"perspectiveTooltip\\\" class=\\\"hyicon hyicon-info se-perspective-selector__hotkey-tooltip--icon\\\"></span><div se-tooltip-body>{{ activePerspective.descriptionI18nKey | translate }}</div></se-tooltip><button class=\\\"se-perspective-selector__btn\\\" [disabled]=\\\"isDisabled\\\">{{getActivePerspectiveName() | translate}} <span class=\\\"se-perspective-selector__btn-arrow icon-navigation-down-arrow\\\"></span></button></div></fd-popover-control><fd-popover-body><ul class=\\\"se-perspective__list fd-list-group\\\" [ngClass]=\\\"{'se-perspective__list--tooltip': isTooltipVisible()}\\\" role=\\\"menu\\\"><li *ngFor=\\\"let choice of getDisplayedPerspectives()\\\" class=\\\"fd-list-group__item se-perspective__list-item fd-has-padding-none\\\"><a class=\\\"item se-perspective__list-item-text\\\" (click)=\\\"selectPerspective($event, choice.key);\\\">{{choice.nameI18nKey | translate}}</a></li></ul></fd-popover-body></fd-popover>\"\r\n        }),\r\n        __param(1, Inject(YJQUERY_TOKEN)),\r\n        __param(5, Inject(EVENT_SERVICE)),\r\n        __metadata(\"design:paramtypes\", [LogService, Function, IPerspectiveService,\r\n            IIframeClickDetectionService,\r\n            SystemEventService,\r\n            CrossFrameEventService,\r\n            TestModeService])\r\n    ], /* @ngInject */ PerspectiveSelectorComponent);\r\n    return /* @ngInject */ PerspectiveSelectorComponent;\r\n}());\r\nexport { /* @ngInject */ PerspectiveSelectorComponent };\r\n//# sourceMappingURL=PerspectiveSelectorComponent.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PerspectiveSelectorComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/perspectiveSelectorWidget/PerspectiveSelectorComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/perspectiveSelectorWidget/PerspectiveSelectorComponent.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\n/// <reference types=\"jquery\" />\r\nimport './PerspectiveSelectorComponent.scss';\r\nimport { OnDestroy, OnInit } from '@angular/core';\r\nimport { CrossFrameEventService, IIframeClickDetectionService, IPerspective, IPerspectiveService, LogService, SystemEventService, TestModeService } from 'smarteditcommons';\r\nexport declare class PerspectiveSelectorComponent implements OnInit, OnDestroy {\r\n    private logService;\r\n    private yjQuery;\r\n    private perspectiveService;\r\n    private iframeClickDetectionService;\r\n    private systemEventService;\r\n    private crossFrameEventService;\r\n    private testModeService;\r\n    isOpen: boolean;\r\n    popperOptions: {\r\n        placement: string;\r\n        modifiers: {\r\n            preventOverflow: {\r\n                enabled: boolean;\r\n                escapeWithReference: boolean;\r\n                boundariesElement: string;\r\n            };\r\n            applyStyle: {\r\n                gpuAcceleration: boolean;\r\n            };\r\n        };\r\n    };\r\n    isDisabled: boolean;\r\n    private perspectives;\r\n    private displayedPerspectives;\r\n    private unRegOverlayDisabledFn;\r\n    private unRegPerspectiveAddedFn;\r\n    private unRegPerspectiveChgFn;\r\n    private unRegUserHasChanged;\r\n    private unRegPerspectiveRefreshFn;\r\n    private unRegStrictPreviewModeToggleFn;\r\n    private activePerspective;\r\n    constructor(logService: LogService, yjQuery: JQueryStatic, perspectiveService: IPerspectiveService, iframeClickDetectionService: IIframeClickDetectionService, systemEventService: SystemEventService, crossFrameEventService: CrossFrameEventService, testModeService: TestModeService);\r\n    onDocumentClick(event: Event): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    selectPerspective(event: Event, choice: string): void;\r\n    getDisplayedPerspectives(): IPerspective[];\r\n    getActivePerspectiveName(): string;\r\n    hasActivePerspective(): boolean;\r\n    isTooltipVisible(): boolean;\r\n    private checkTooltipVisibilityCondition;\r\n    private filterPerspectives;\r\n    private closeDropdown;\r\n    private onPerspectiveAdded;\r\n    private refreshPerspectives;\r\n    private _refreshActivePerspective;\r\n    private onClickHandler;\r\n    private togglePerspectiveSelector;\r\n}\r\n"}}
