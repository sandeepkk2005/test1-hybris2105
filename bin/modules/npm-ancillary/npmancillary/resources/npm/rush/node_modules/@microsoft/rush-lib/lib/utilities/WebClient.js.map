{"version":3,"file":"WebClient.js","sourceRoot":"","sources":["../../src/utilities/WebClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,iDAAmC;AACnC,kDAAoC;AAEpC,oEAAsD;AAEtD,MAAM,qBAAqB,GAAuC,0BAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;AAmB5G,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,mDAAI,CAAA;IACJ,uDAAM,CAAA;IACN,yDAAO,CAAA;AACT,CAAC,EAJW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAIzB;AAED,MAAa,SAAS;IAQpB;QAPgB,oBAAe,GAAkB,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAE9D,WAAM,GAAuB,KAAK,CAAC;QACnC,cAAS,GAAuB,aAAa,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QAE7F,UAAK,GAAmB,cAAc,CAAC,MAAM,CAAC;IAE/B,CAAC;IAEhB,MAAM,CAAC,YAAY,CAAC,MAAqB,EAAE,MAAqB;QACrE,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kBAAkB,CAAC,QAAgB,EAAE,QAAgB;QAC1D,IAAI,CAAC,eAAe,CAAC,GAAG,CACtB,eAAe,EACf,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CACrE,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,UAAU,CACrB,GAAW,EACX,OAA6C;QAE7C,MAAM,OAAO,GAAkB,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAEnD,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAEtD,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,EAAE;YACpB,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;SAClD;QAED,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SAC3C;QACD,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACpC;QAED,IAAI,QAAQ,GAAW,EAAE,CAAC;QAE1B,QAAQ,IAAI,CAAC,KAAK,EAAE;YAClB,KAAK,cAAc,CAAC,MAAM;gBACxB,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE;oBAC3B,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;iBACpC;qBAAM,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE;oBACjC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;iBACnC;gBACD,MAAM;YAER,KAAK,cAAc,CAAC,OAAO;gBACzB,yCAAyC;gBACzC,2BAA2B;gBAC3B,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,GAAG,GAAG,CAAC;gBAClD,QAAQ,GAAG,wBAAwB,CAAC;gBACpC,MAAM;SACT;QAED,IAAI,KAAK,GAA2B,SAAS,CAAC;QAC9C,IAAI,QAAQ,EAAE;YACZ,KAAK,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;SACzC;QAED,MAAM,SAAS,GAAW,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,MAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,aAAa;QACzG,MAAM,WAAW,GAAsB;YACrC,MAAM,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI;YACrB,OAAO,EAAE,OAAO;YAChB,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,SAAS;SACnB,CAAC;QACF,MAAM,UAAU,GAAiC,OAAuC,CAAC;QACzF,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,EAAE;YACpB,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;SACpC;QAED,OAAO,MAAM,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC/C,CAAC;CACF;AAhFD,8BAgFC","sourcesContent":["import * as os from 'os';\r\nimport * as process from 'process';\r\nimport * as fetch from 'node-fetch';\r\nimport * as http from 'http';\r\nimport { Import } from '@rushstack/node-core-library';\r\n\r\nconst createHttpsProxyAgent: typeof import('https-proxy-agent') = Import.lazy('https-proxy-agent', require);\r\n\r\nexport type WebClientResponse = fetch.Response;\r\n\r\nexport interface IWebFetchOptionsBase {\r\n  timeoutMs?: number;\r\n  verb?: 'GET' | 'PUT';\r\n  headers?: fetch.Headers;\r\n}\r\n\r\nexport interface IGetFetchOptions extends IWebFetchOptionsBase {\r\n  verb: 'GET' | never;\r\n}\r\n\r\nexport interface IPutFetchOptions extends IWebFetchOptionsBase {\r\n  verb: 'PUT';\r\n  body?: Buffer;\r\n}\r\n\r\nexport enum WebClientProxy {\r\n  None,\r\n  Detect,\r\n  Fiddler\r\n}\r\n\r\nexport class WebClient {\r\n  public readonly standardHeaders: fetch.Headers = new fetch.Headers();\r\n\r\n  public accept: string | undefined = '*/*';\r\n  public userAgent: string | undefined = `rush node/${process.version} ${os.platform()} ${os.arch()}`;\r\n\r\n  public proxy: WebClientProxy = WebClientProxy.Detect;\r\n\r\n  public constructor() {}\r\n\r\n  public static mergeHeaders(target: fetch.Headers, source: fetch.Headers): void {\r\n    source.forEach((value, name) => {\r\n      target.set(name, value);\r\n    });\r\n  }\r\n\r\n  public addBasicAuthHeader(userName: string, password: string): void {\r\n    this.standardHeaders.set(\r\n      'Authorization',\r\n      'Basic ' + Buffer.from(userName + ':' + password).toString('base64')\r\n    );\r\n  }\r\n\r\n  public async fetchAsync(\r\n    url: string,\r\n    options?: IGetFetchOptions | IPutFetchOptions\r\n  ): Promise<WebClientResponse> {\r\n    const headers: fetch.Headers = new fetch.Headers();\r\n\r\n    WebClient.mergeHeaders(headers, this.standardHeaders);\r\n\r\n    if (options?.headers) {\r\n      WebClient.mergeHeaders(headers, options.headers);\r\n    }\r\n\r\n    if (this.userAgent) {\r\n      headers.set('user-agent', this.userAgent);\r\n    }\r\n    if (this.accept) {\r\n      headers.set('accept', this.accept);\r\n    }\r\n\r\n    let proxyUrl: string = '';\r\n\r\n    switch (this.proxy) {\r\n      case WebClientProxy.Detect:\r\n        if (process.env.HTTPS_PROXY) {\r\n          proxyUrl = process.env.HTTPS_PROXY;\r\n        } else if (process.env.HTTP_PROXY) {\r\n          proxyUrl = process.env.HTTP_PROXY;\r\n        }\r\n        break;\r\n\r\n      case WebClientProxy.Fiddler:\r\n        // For debugging, disable cert validation\r\n        // eslint-disable-next-line\r\n        process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\r\n        proxyUrl = 'http://localhost:8888/';\r\n        break;\r\n    }\r\n\r\n    let agent: http.Agent | undefined = undefined;\r\n    if (proxyUrl) {\r\n      agent = createHttpsProxyAgent(proxyUrl);\r\n    }\r\n\r\n    const timeoutMs: number = options?.timeoutMs !== undefined ? options.timeoutMs : 15 * 1000; // 15 seconds\r\n    const requestInit: fetch.RequestInit = {\r\n      method: options?.verb,\r\n      headers: headers,\r\n      agent: agent,\r\n      timeout: timeoutMs\r\n    };\r\n    const putOptions: IPutFetchOptions | undefined = options as IPutFetchOptions | undefined;\r\n    if (putOptions?.body) {\r\n      requestInit.body = putOptions.body;\r\n    }\r\n\r\n    return await fetch.default(url, requestInit);\r\n  }\r\n}\r\n"]}