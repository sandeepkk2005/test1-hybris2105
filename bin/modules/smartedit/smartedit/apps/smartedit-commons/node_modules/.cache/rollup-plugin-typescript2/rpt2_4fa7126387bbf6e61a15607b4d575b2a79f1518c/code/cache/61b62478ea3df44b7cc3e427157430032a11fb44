{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { stringUtils, LogService } from '@smart/utils';\r\nimport { PREVIEW_RESOURCE_URI, EXPERIENCE_STORAGE_KEY } from '../../../utils/smarteditconstants';\r\nimport { ISharedDataService } from '../../interfaces';\r\n/**\r\n * Used for HTTP error code 400 from the Preview API when the pageId is not found in the context. The request will\r\n * be replayed without the pageId.\r\n *\r\n * This can happen in a few different scenarios. For instance, you are on electronics catalog, on some custom page called XYZ.\r\n * If you use the experience selector and switch to apparel catalog, it will try to create a new preview ticket\r\n * with apparel catalog and pageId of XYZ. Since XYZ doesn't exist in apparel, it will fail. So we remove the page ID\r\n * and create a preview for homepage as a default/fallback.\r\n */\r\nvar /* @ngInject */ PreviewErrorInterceptor = /** @class */ (function () {\r\n    function /* @ngInject */ PreviewErrorInterceptor(injector, logService, sharedDataService) {\r\n        this.injector = injector;\r\n        this.logService = logService;\r\n        this.sharedDataService = sharedDataService;\r\n    }\r\n    /* @ngInject */ PreviewErrorInterceptor.prototype.predicate = function (request, response) {\r\n        return (response.status === 400 &&\r\n            request.url.indexOf(PREVIEW_RESOURCE_URI) > -1 &&\r\n            !stringUtils.isBlank(request.body.pageId) &&\r\n            this._hasUnknownIdentifierError(response.error.errors));\r\n    };\r\n    /* @ngInject */ PreviewErrorInterceptor.prototype.responseError = function (request, response) {\r\n        this.logService.info('The error 400 above on preview is expected in some scenarios, typically when switching catalogs from experience selector.');\r\n        this.logService.info('Removing the pageId [' +\r\n            request.body.pageId +\r\n            '] and creating a preview for homepage');\r\n        delete request.body.pageId;\r\n        this.sharedDataService.update(EXPERIENCE_STORAGE_KEY, function (experience) {\r\n            delete experience.pageId;\r\n            return experience;\r\n        });\r\n        this.injector.get('iframeManagerService').setCurrentLocation(null);\r\n        return this.injector.get(HttpClient).request(request).toPromise();\r\n    };\r\n    /* @ngInject */ PreviewErrorInterceptor.prototype._hasUnknownIdentifierError = function (errors) {\r\n        var unknownIdentifierErrors = errors.filter(function (error) {\r\n            return error.type === 'UnknownIdentifierError';\r\n        });\r\n        return !!unknownIdentifierErrors.length;\r\n    };\r\n    /* @ngInject */ PreviewErrorInterceptor = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [Injector,\r\n            LogService,\r\n            ISharedDataService])\r\n    ], /* @ngInject */ PreviewErrorInterceptor);\r\n    return /* @ngInject */ PreviewErrorInterceptor;\r\n}());\r\nexport { /* @ngInject */ PreviewErrorInterceptor };\r\n//# sourceMappingURL=PreviewErrorInterceptor.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/common@8.2.14_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@angular/common/http.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/smarteditconstants.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts"],"map":"{\"version\":3,\"file\":\"PreviewErrorInterceptor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/interceptors/errors/PreviewErrorInterceptor.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,UAAU,EAA6C,MAAM,sBAAsB,CAAC;AAC7F,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,WAAW,EAAuC,UAAU,EAAE,MAAM,cAAc,CAAC;AAC5F,OAAO,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,MAAM,mCAAmC,CAAC;AACjG,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAItD;;;;;;;;GAQG;AAEH;IAEI,iDACY,QAAkB,EAClB,UAAsB,EACtB,iBAAqC;QAFrC,aAAQ,GAAR,QAAQ,CAAU;QAClB,eAAU,GAAV,UAAU,CAAY;QACtB,sBAAiB,GAAjB,iBAAiB,CAAoB;IAC9C,CAAC;IACJ,2DAAS,GAAT,UAAU,OAA0C,EAAE,QAA2B;QAC7E,OAAO,CACH,QAAQ,CAAC,MAAM,KAAK,GAAG;YACvB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC9C,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;YACzC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CACzD,CAAC;IACN,CAAC;IACD,+DAAa,GAAb,UACI,OAA0C,EAC1C,QAA2B;QAE3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,2HAA2H,CAC9H,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,uBAAuB;YAClB,OAAO,CAAC,IAAY,CAAC,MAAM;YAC5B,uCAAuC,CAC9C,CAAC;QAEF,OAAQ,OAAO,CAAC,IAAY,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,sBAAsB,EAAE,UAAU,UAAU;YACtE,OAAO,UAAU,CAAC,MAAM,CAAC;YACzB,OAAO,UAAU,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,CAAuB,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;IAC5F,CAAC;IAEO,4EAA0B,GAAlC,UAAmC,MAAsB;QACrD,IAAM,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,KAAK;YACzD,OAAO,KAAK,CAAC,IAAI,KAAK,wBAAwB,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,CAAC,uBAAuB,CAAC,MAAM,CAAC;IAC5C,CAAC;IA3CL;QADC,UAAU,EAAE;yCAIa,QAAQ;YACN,UAAU;YACH,kBAAkB;+CAuCpD;IAAD,8CAAC;CAAA,AA5CD,IA4CC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/interceptors/errors/PreviewErrorInterceptor.d.ts","writeByteOrderMark":false,"text":"import { HttpErrorResponse, HttpEvent, HttpRequest } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { IHttpErrorInterceptor, LogService } from '@smart/utils';\r\nimport { ISharedDataService } from '../../interfaces';\r\nexport declare type PageIdAwareObject<T> = T & {\r\n    pageId?: number;\r\n};\r\n/**\r\n * Used for HTTP error code 400 from the Preview API when the pageId is not found in the context. The request will\r\n * be replayed without the pageId.\r\n *\r\n * This can happen in a few different scenarios. For instance, you are on electronics catalog, on some custom page called XYZ.\r\n * If you use the experience selector and switch to apparel catalog, it will try to create a new preview ticket\r\n * with apparel catalog and pageId of XYZ. Since XYZ doesn't exist in apparel, it will fail. So we remove the page ID\r\n * and create a preview for homepage as a default/fallback.\r\n */\r\nexport declare class PreviewErrorInterceptor<T = any> implements IHttpErrorInterceptor<PageIdAwareObject<T>> {\r\n    private injector;\r\n    private logService;\r\n    private sharedDataService;\r\n    constructor(injector: Injector, logService: LogService, sharedDataService: ISharedDataService);\r\n    predicate(request: HttpRequest<PageIdAwareObject<T>>, response: HttpErrorResponse): boolean;\r\n    responseError(request: HttpRequest<PageIdAwareObject<T>>, response: HttpErrorResponse): Promise<HttpEvent<PageIdAwareObject<T>>>;\r\n    private _hasUnknownIdentifierError;\r\n}\r\n"}}
