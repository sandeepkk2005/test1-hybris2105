{"code":"import { __assign, __decorate, __metadata } from \"tslib\";\r\nimport { IModalService, SeDowngradeService } from 'smarteditcommons';\r\nimport { GenericEditorModalComponent } from './components/GenericEditorModalComponent';\r\n/**\r\n * The Generic Editor Modal Service is used to open an editor modal window that contains a tabset.\r\n */\r\nvar /* @ngInject */ GenericEditorModalService = /** @class */ (function () {\r\n    function /* @ngInject */ GenericEditorModalService(modalService) {\r\n        this.modalService = modalService;\r\n    }\r\n    /**\r\n     * Function that opens an editor modal. For this method, you must specify an object to contain the edited information, and a save\r\n     * callback that will be triggered once the Save button is clicked.\r\n     */\r\n    /* @ngInject */ GenericEditorModalService.prototype.open = function (data, saveCallback, errorCallback, config) {\r\n        var modalConfig = config ? __assign({}, config) : {};\r\n        modalConfig.modalPanelClass = (\"modal-lg \" + (modalConfig.modalPanelClass || '')).trimRight();\r\n        modalConfig.escKeyCloseable = false;\r\n        var ref = this.modalService.open({\r\n            component: GenericEditorModalComponent,\r\n            data: {\r\n                data: data,\r\n                saveCallback: saveCallback,\r\n                errorCallback: errorCallback\r\n            },\r\n            config: modalConfig,\r\n            templateConfig: {\r\n                title: data.title,\r\n                isDismissButtonVisible: true,\r\n                titleSuffix: 'se.cms.editor.title.suffix'\r\n            }\r\n        });\r\n        return new Promise(function (resolve, reject) { return ref.afterClosed.subscribe(resolve, reject); });\r\n    };\r\n    /* @ngInject */ GenericEditorModalService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IModalService])\r\n    ], /* @ngInject */ GenericEditorModalService);\r\n    return /* @ngInject */ GenericEditorModalService;\r\n}());\r\nexport { /* @ngInject */ GenericEditorModalService };\r\n//# sourceMappingURL=GenericEditorModalService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@fundamental-ngx/core@0.13.2_9a9a80bb6ff375d99f90188f858ebbd5/node_modules/@fundamental-ngx/core/fundamental-ngx-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/components/GenericEditorModalComponent.ts"],"map":"{\"version\":3,\"file\":\"GenericEditorModalService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/GenericEditorModalService.ts\"],\"names\":[],\"mappings\":\";AAMA,OAAO,EAAE,aAAa,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AACrE,OAAO,EACH,2BAA2B,EAE9B,MAAM,0CAA0C,CAAC;AAclD;;GAEG;AAGH;IACI,mDAAoB,YAA2B;QAA3B,iBAAY,GAAZ,YAAY,CAAe;IAAG,CAAC;IAEnD;;;OAGG;IACI,wDAAI,GAAX,UACI,IAAyC,EACzC,YAAyD,EACzD,aAAwD,EACxD,MAAoB;QAEpB,IAAM,WAAW,GAAgB,MAAM,CAAC,CAAC,cAAM,MAAM,EAAG,CAAC,CAAC,EAAE,CAAC;QAE7D,WAAW,CAAC,eAAe,GAAG,CAAA,eAAY,WAAW,CAAC,eAAe,IAAI,EAAE,CAAE,CAAA,CAAC,SAAS,EAAE,CAAC;QAC1F,WAAW,CAAC,eAAe,GAAG,KAAK,CAAC;QAEpC,IAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAmC;YACjE,SAAS,EAAE,2BAA2B;YACtC,IAAI,EAAE;gBACF,IAAI,MAAA;gBACJ,YAAY,cAAA;gBACZ,aAAa,eAAA;aAChB;YACD,MAAM,EAAE,WAAW;YACnB,cAAc,EAAE;gBACZ,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,sBAAsB,EAAE,IAAI;gBAC5B,WAAW,EAAE,4BAA4B;aAC5C;SACJ,CAAC,CAAC;QAEH,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,EAA1C,CAA0C,CAAC,CAAC;IACxF,CAAC;IAlCL;QADC,kBAAkB,EAAE;yCAEiB,aAAa;iDAkClD;IAAD,gDAAC;CAAA,AAnCD,IAmCC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/services/GenericEditorModalService.d.ts","writeByteOrderMark":false,"text":"import { ModalConfig } from '@fundamental-ngx/core';\r\nimport { IGenericEditorModalServiceComponent } from 'cmscommons';\r\nimport { IModalService } from 'smarteditcommons';\r\nimport { GenericEditorModalComponent, GenericEditorUnrelatedErrorMessage } from './components/GenericEditorModalComponent';\r\nexport declare type GenericEditorModalComponentSaveCallback<T = any> = (item: T) => void;\r\nexport declare type GenericEditorModalComponentErrorCallback = (messages: GenericEditorUnrelatedErrorMessage[], instance: GenericEditorModalComponent) => void;\r\nexport interface IGenericEditorModalComponentData {\r\n    data: IGenericEditorModalServiceComponent;\r\n    saveCallback?: GenericEditorModalComponentSaveCallback;\r\n    errorCallback?: GenericEditorModalComponentErrorCallback;\r\n}\r\n/**\r\n * The Generic Editor Modal Service is used to open an editor modal window that contains a tabset.\r\n */\r\nexport declare class GenericEditorModalService {\r\n    private modalService;\r\n    constructor(modalService: IModalService);\r\n    /**\r\n     * Function that opens an editor modal. For this method, you must specify an object to contain the edited information, and a save\r\n     * callback that will be triggered once the Save button is clicked.\r\n     */\r\n    open<T = any>(data: IGenericEditorModalServiceComponent, saveCallback?: GenericEditorModalComponentSaveCallback<T>, errorCallback?: GenericEditorModalComponentErrorCallback, config?: ModalConfig): Promise<T>;\r\n}\r\n"}}
