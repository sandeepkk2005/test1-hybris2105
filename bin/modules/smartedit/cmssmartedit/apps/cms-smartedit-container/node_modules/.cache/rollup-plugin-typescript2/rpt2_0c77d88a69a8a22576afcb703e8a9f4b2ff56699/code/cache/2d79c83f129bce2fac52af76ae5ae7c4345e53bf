{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { cloneDeep } from 'lodash';\r\nimport { CrossFrameEventService, IRestServiceFactory, SeDowngradeService, TimerService, EVENTS } from 'smarteditcommons';\r\nvar INBOX_POLLING_PARAMS = {\r\n    INBOX_POLLING_TIMEOUT: 20000,\r\n    INBOX_POLLING_PAGESIZE: 10,\r\n    INBOX_POLLING_CURRENTPAGE: 0\r\n};\r\n/**\r\n * Used to retrieve inbox tasks.\r\n */\r\nvar /* @ngInject */ WorkflowTasksPollingService = /** @class */ (function () {\r\n    function /* @ngInject */ WorkflowTasksPollingService(timerService, restServiceFactory, crossFrameEventService) {\r\n        var _this = this;\r\n        this.timerService = timerService;\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.resourceInboxURI = '/cmssmarteditwebservices/v1/inbox/workflowtasks';\r\n        this.subscribers = [];\r\n        this.syncPollingTimer = null;\r\n        this.savedHashedTasks = [];\r\n        this.inboxRESTService = this.restServiceFactory.get(this.resourceInboxURI);\r\n        this.crossFrameEventService.subscribe(EVENTS.AUTHORIZATION_SUCCESS, function () {\r\n            return _this.initPolling();\r\n        });\r\n        this.crossFrameEventService.subscribe(EVENTS.LOGOUT, function () { return _this.stopPolling(); });\r\n        this.crossFrameEventService.subscribe(EVENTS.REAUTH_STARTED, function () { return _this.stopPolling(); });\r\n        this.initPolling();\r\n    }\r\n    /**\r\n     * Stops a polling timer.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.stopPolling = function () {\r\n        if (this.syncPollingTimer.isActive()) {\r\n            this.syncPollingTimer.stop();\r\n        }\r\n    };\r\n    /**\r\n     * Starts a polling timer.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.startPolling = function () {\r\n        if (!this.syncPollingTimer.isActive()) {\r\n            this.syncPollingTimer.restart(INBOX_POLLING_PARAMS.INBOX_POLLING_TIMEOUT);\r\n        }\r\n    };\r\n    /**\r\n     * Adds a new subscriber to the polling service. The subscriber is called with a list of new tasks and a pagination information.\r\n     *\r\n     * @param subscriber The subscriber.\r\n     * @param callOnInit Default is true, when set to false, will not call the subscriber on initialization of the polling.\r\n     *\r\n     * @returns The method that can be used to unsubscribe.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.addSubscriber = function (subscriber, callOnInit) {\r\n        var _this = this;\r\n        this.subscribers.push({\r\n            subscriber: subscriber,\r\n            callOnInit: callOnInit\r\n        });\r\n        var unsubscribeFn = function () { return _this.unsubscribe(subscriber); };\r\n        return unsubscribeFn;\r\n    };\r\n    /**\r\n     * Initializes a polling process.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.initPolling = function () {\r\n        var _this = this;\r\n        this.syncPollingTimer = this.timerService.createTimer(function () { return _this.fetchInboxTasks(false); }, INBOX_POLLING_PARAMS.INBOX_POLLING_TIMEOUT);\r\n        this.fetchInboxTasks(true);\r\n        this.startPolling();\r\n    };\r\n    /**\r\n     * Unsubscribes a subscriber.\r\n     * @param subscriber The subscriber that will be unsubscribed.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.unsubscribe = function (subscriber) {\r\n        var index = this.subscribers.findIndex(function (subs) { return subs.subscriber === subscriber; });\r\n        if (index > -1) {\r\n            this.subscribers.splice(index, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Returns tasks that have not been yet delivered to subscribers.\r\n     * @param tasks The list of retrieved tasks from the backend.\r\n     * @return The list of new tasks.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.getNewTasks = function (tasks) {\r\n        var _this = this;\r\n        var newTasks = tasks.filter(function (task) {\r\n            var hashedTask = _this.encodeTask(task);\r\n            return !_this.savedHashedTasks.includes(hashedTask);\r\n        });\r\n        return newTasks;\r\n    };\r\n    /**\r\n     * New tasks are added at the end of the array. If the array is bigger than INBOX_POLLING_PAGESIZE\r\n     * it shrinks from the beginning to the INBOX_POLLING_PAGESIZE size.\r\n     * @param newTasks The list of new tasks that will be stored in cache. Each task is encoded as base-64 string.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.saveNewHashedTasks = function (newTasks) {\r\n        var _this = this;\r\n        newTasks.forEach(function (task) { return _this.savedHashedTasks.push(_this.encodeTask(task)); });\r\n        var sizeDiff = this.savedHashedTasks.length - INBOX_POLLING_PARAMS.INBOX_POLLING_PAGESIZE;\r\n        if (sizeDiff > 0) {\r\n            for (var i = 0; i < sizeDiff; i++) {\r\n                this.savedHashedTasks.shift();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Encodes a task.\r\n     * @param task the task that will be encoded to a base-64 string.\r\n     * @return The encoded string\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.encodeTask = function (task) {\r\n        var taskClone = cloneDeep(task);\r\n        if (taskClone.action) {\r\n            delete taskClone.action.startedAgoInMillis;\r\n        }\r\n        return btoa(JSON.stringify(taskClone));\r\n    };\r\n    /**\r\n     * Retrieves the list if tasks from the backend in paginated view.\r\n     * It calls each subscriber with a list of new tasks and pagination information.\r\n     */\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.fetchInboxTasks = function (isInit) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, newTasks;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.fetchTaskList()];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!response) {\r\n                            this.stopPolling();\r\n                            return [2 /*return*/];\r\n                        }\r\n                        newTasks = this.getNewTasks(response.tasks);\r\n                        this.saveNewHashedTasks(newTasks);\r\n                        this.subscribers.forEach(function (subscriber) {\r\n                            if (!isInit || (isInit && !!subscriber.callOnInit)) {\r\n                                subscriber.subscriber(newTasks, response.pagination);\r\n                            }\r\n                        });\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ WorkflowTasksPollingService.prototype.fetchTaskList = function () {\r\n        try {\r\n            return this.inboxRESTService.get({\r\n                pageSize: INBOX_POLLING_PARAMS.INBOX_POLLING_PAGESIZE,\r\n                currentPage: INBOX_POLLING_PARAMS.INBOX_POLLING_CURRENTPAGE\r\n            });\r\n        }\r\n        catch (error) {\r\n            return;\r\n        }\r\n    };\r\n    /* @ngInject */ WorkflowTasksPollingService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [TimerService,\r\n            IRestServiceFactory,\r\n            CrossFrameEventService])\r\n    ], /* @ngInject */ WorkflowTasksPollingService);\r\n    return /* @ngInject */ WorkflowTasksPollingService;\r\n}());\r\nexport { /* @ngInject */ WorkflowTasksPollingService };\r\n//# sourceMappingURL=WorkflowTasksPollingService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/workflow/dtos/WorkflowTask.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/workflow/dtos/WorkflowTaskList.ts"],"map":"{\"version\":3,\"file\":\"WorkflowTasksPollingService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/workflow/services/WorkflowTasksPollingService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/workflow/services/WorkflowTasksPollingService.d.ts","writeByteOrderMark":false,"text":"import { CrossFrameEventService, IRestServiceFactory, Pagination, TimerService } from 'smarteditcommons';\r\nimport { WorkflowTask } from '../dtos/WorkflowTask';\r\ndeclare type WorkflowTaskSubscriber = (tasks: WorkflowTask[], pagination: Pagination) => any;\r\n/**\r\n * Used to retrieve inbox tasks.\r\n */\r\nexport declare class WorkflowTasksPollingService {\r\n    private timerService;\r\n    private restServiceFactory;\r\n    private crossFrameEventService;\r\n    private readonly resourceInboxURI;\r\n    private subscribers;\r\n    private syncPollingTimer;\r\n    private savedHashedTasks;\r\n    private inboxRESTService;\r\n    constructor(timerService: TimerService, restServiceFactory: IRestServiceFactory, crossFrameEventService: CrossFrameEventService);\r\n    /**\r\n     * Stops a polling timer.\r\n     */\r\n    stopPolling(): void;\r\n    /**\r\n     * Starts a polling timer.\r\n     */\r\n    startPolling(): void;\r\n    /**\r\n     * Adds a new subscriber to the polling service. The subscriber is called with a list of new tasks and a pagination information.\r\n     *\r\n     * @param subscriber The subscriber.\r\n     * @param callOnInit Default is true, when set to false, will not call the subscriber on initialization of the polling.\r\n     *\r\n     * @returns The method that can be used to unsubscribe.\r\n     */\r\n    addSubscriber(subscriber: WorkflowTaskSubscriber, callOnInit: boolean): () => void;\r\n    /**\r\n     * Initializes a polling process.\r\n     */\r\n    private initPolling;\r\n    /**\r\n     * Unsubscribes a subscriber.\r\n     * @param subscriber The subscriber that will be unsubscribed.\r\n     */\r\n    private unsubscribe;\r\n    /**\r\n     * Returns tasks that have not been yet delivered to subscribers.\r\n     * @param tasks The list of retrieved tasks from the backend.\r\n     * @return The list of new tasks.\r\n     */\r\n    private getNewTasks;\r\n    /**\r\n     * New tasks are added at the end of the array. If the array is bigger than INBOX_POLLING_PAGESIZE\r\n     * it shrinks from the beginning to the INBOX_POLLING_PAGESIZE size.\r\n     * @param newTasks The list of new tasks that will be stored in cache. Each task is encoded as base-64 string.\r\n     */\r\n    private saveNewHashedTasks;\r\n    /**\r\n     * Encodes a task.\r\n     * @param task the task that will be encoded to a base-64 string.\r\n     * @return The encoded string\r\n     */\r\n    private encodeTask;\r\n    /**\r\n     * Retrieves the list if tasks from the backend in paginated view.\r\n     * It calls each subscriber with a list of new tasks and pagination information.\r\n     */\r\n    private fetchInboxTasks;\r\n    private fetchTaskList;\r\n}\r\nexport {};\r\n"}}
