{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { AttributePermissionsRestService, CMSModesService, IPageService, TypePermissionsRestService } from 'cmscommons';\r\nimport { ICatalogService, ICatalogVersionPermissionService, IExperienceService, IPermissionService, ISharedDataService, SeDowngradeService, windowUtils, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\nimport { WorkflowService } from '../components/workflow/services';\r\nimport { CatalogVersionRestService } from '../dao';\r\nvar /* @ngInject */ RulesAndPermissionsRegistrationService = /** @class */ (function () {\r\n    function /* @ngInject */ RulesAndPermissionsRegistrationService(attributePermissionsRestService, catalogService, catalogVersionPermissionService, catalogVersionRestService, cMSModesService, experienceService, pageService, permissionService, sharedDataService, typePermissionsRestService, workflowService) {\r\n        this.attributePermissionsRestService = attributePermissionsRestService;\r\n        this.catalogService = catalogService;\r\n        this.catalogVersionPermissionService = catalogVersionPermissionService;\r\n        this.catalogVersionRestService = catalogVersionRestService;\r\n        this.cMSModesService = cMSModesService;\r\n        this.experienceService = experienceService;\r\n        this.pageService = pageService;\r\n        this.permissionService = permissionService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.typePermissionsRestService = typePermissionsRestService;\r\n        this.workflowService = workflowService;\r\n    }\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.register = function () {\r\n        this.registerRules();\r\n        this.registerRulesForTypeCodeFromContext();\r\n        this.registerRulesForCurrentPage();\r\n        this.registerRulesForTypeCode();\r\n        this.registerRulesForTypeAndQualifier();\r\n        this.registerPermissions();\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.onSuccess = function (results) {\r\n        return results.every(function (isValid) { return isValid; });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.onError = function () {\r\n        return false;\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.getCurrentPageActiveWorkflow = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var uuid;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!windowUtils.getGatewayTargetFrame()) {\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, this.pageService.getCurrentPageInfo()];\r\n                    case 1:\r\n                        uuid = (_a.sent()).uuid;\r\n                        return [2 /*return*/, this.workflowService.getActiveWorkflowForPageUuid(uuid)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRules = function () {\r\n        var _this = this;\r\n        this.permissionService.registerRule({\r\n            names: [\r\n                'se.write.page',\r\n                'se.write.slot',\r\n                'se.write.component',\r\n                'se.write.to.current.catalog.version'\r\n            ],\r\n            verify: function (permissionNameObjs) {\r\n                var promises = permissionNameObjs.map(function (permissionNameObject) {\r\n                    if (permissionNameObject.context) {\r\n                        return _this.catalogVersionPermissionService.hasWritePermission(permissionNameObject.context.catalogId, permissionNameObject.context.catalogVersion);\r\n                    }\r\n                    else {\r\n                        return _this.catalogVersionPermissionService.hasWritePermissionOnCurrent();\r\n                    }\r\n                });\r\n                return Promise.all(promises).then(_this.onSuccess, _this.onError);\r\n            }\r\n        });\r\n        /**\r\n         * This rule returns true if the page is in a workflow and current user is participant of this workflow\r\n         * or there is no workflow.\r\n         * Otherwise, it returns false;\r\n         */\r\n        this.permissionService.registerRule({\r\n            names: ['se.current.user.can.act.on.page.in.workflow'],\r\n            verify: function (permissionNameObjs) {\r\n                var isAvailableForCurrentPrincipal = function (workflow) {\r\n                    return workflow === null ? true : workflow.isAvailableForCurrentPrincipal;\r\n                };\r\n                var promises = permissionNameObjs.map(function (permissionNameObject) {\r\n                    if (permissionNameObject.context) {\r\n                        return _this.workflowService\r\n                            .getActiveWorkflowForPageUuid(permissionNameObject.context.pageInfo.uuid)\r\n                            .then(function (workflow) { return isAvailableForCurrentPrincipal(workflow); });\r\n                    }\r\n                    else {\r\n                        return _this.getCurrentPageActiveWorkflow().then(function (workflow) { return isAvailableForCurrentPrincipal(workflow); }, function () { return true; });\r\n                    }\r\n                });\r\n                return Promise.all(promises).then(_this.onSuccess, _this.onError);\r\n            }\r\n        });\r\n        /**\r\n         * This rule returns true if the current user is a participant of currently active step of a workflow\r\n         * or there is no workflow.\r\n         * Otherwise, it returns false;\r\n         */\r\n        this.permissionService.registerRule({\r\n            names: ['se.current.user.can.act.on.workflow.current.action'],\r\n            verify: function (permissionNameObjs) {\r\n                var isUserParticipant = function (workflow) { return __awaiter(_this, void 0, void 0, function () {\r\n                    return __generator(this, function (_a) {\r\n                        return [2 /*return*/, workflow === null\r\n                                ? true\r\n                                : this.workflowService.isUserParticipanInActiveAction(workflow.workflowCode)];\r\n                    });\r\n                }); };\r\n                var promises = permissionNameObjs.map(function (permissionNameObject) {\r\n                    if (permissionNameObject.context) {\r\n                        return _this.workflowService\r\n                            .getActiveWorkflowForPageUuid(permissionNameObject.context.pageInfo.uuid)\r\n                            .then(function (workflow) { return isUserParticipant(workflow); });\r\n                    }\r\n                    else {\r\n                        return _this.getCurrentPageActiveWorkflow().then(function (workflow) { return isUserParticipant(workflow); }, function () { return true; });\r\n                    }\r\n                });\r\n                return Promise.all(promises).then(_this.onSuccess, _this.onError);\r\n            }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.sync.catalog'],\r\n            verify: function (permissionNameObjs) {\r\n                var promises = permissionNameObjs.map(function (permissionNameObject) {\r\n                    if (permissionNameObject.context) {\r\n                        return _this.catalogVersionPermissionService.hasSyncPermission(permissionNameObject.context.catalogId, permissionNameObject.context.catalogVersion, permissionNameObject.context.targetCatalogVersion);\r\n                    }\r\n                    else {\r\n                        return _this.catalogVersionPermissionService.hasSyncPermissionFromCurrentToActiveCatalogVersion();\r\n                    }\r\n                });\r\n                return Promise.all(promises).then(_this.onSuccess, _this.onError);\r\n            }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.approval.status.page'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var approvalStatus;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];\r\n                        case 1:\r\n                            approvalStatus = (_a.sent()).approvalStatus;\r\n                            return [2 /*return*/, approvalStatus === 'APPROVED'];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: [\r\n                'se.read.page',\r\n                'se.read.slot',\r\n                'se.read.component',\r\n                'se.read.current.catalog.version'\r\n            ],\r\n            verify: function () { return _this.catalogVersionPermissionService.hasReadPermissionOnCurrent(); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.page.belongs.to.experience'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var experience;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.sharedDataService.get(EXPERIENCE_STORAGE_KEY)];\r\n                        case 1:\r\n                            experience = (_a.sent());\r\n                            return [2 /*return*/, (experience.pageContext &&\r\n                                    experience.pageContext.catalogVersionUuid ===\r\n                                        experience.catalogDescriptor.catalogVersionUuid)];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        /**\r\n         * Show the clone icon:\r\n         * - If a page belonging to an active catalog version is a primary page, whose copyToCatalogsDisabled flag is set to false and has at-least one clonable target.\r\n         * - If a page belonging to a non active catalog version has at-least one clonable target.\r\n         *\r\n         * !NOTE: Logic here is very similar to logic used in ManagePageService#isPageCloneable, so if any changes are done here it should be considered to add those changes in mentioned service as well\r\n         */\r\n        this.permissionService.registerRule({\r\n            names: ['se.cloneable.page'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var experience, pageUriContext, pageInfo, targets;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.sharedDataService.get(EXPERIENCE_STORAGE_KEY)];\r\n                        case 1:\r\n                            experience = (_a.sent());\r\n                            if (!experience.pageContext) {\r\n                                return [2 /*return*/, false];\r\n                            }\r\n                            pageUriContext = {\r\n                                CURRENT_CONTEXT_SITE_ID: experience.pageContext.siteId,\r\n                                CURRENT_CONTEXT_CATALOG: experience.pageContext.catalogId,\r\n                                CURRENT_CONTEXT_CATALOG_VERSION: experience.pageContext.catalogVersion\r\n                            };\r\n                            return [4 /*yield*/, this.pageService.getCurrentPageInfo()];\r\n                        case 2:\r\n                            pageInfo = _a.sent();\r\n                            return [4 /*yield*/, this.catalogVersionRestService.getCloneableTargets(pageUriContext)];\r\n                        case 3:\r\n                            targets = _a.sent();\r\n                            if (experience.pageContext.active) {\r\n                                return [2 /*return*/, (targets.versions.length > 0 &&\r\n                                        pageInfo.defaultPage &&\r\n                                        !pageInfo.copyToCatalogsDisabled)];\r\n                            }\r\n                            return [2 /*return*/, targets.versions.length > 0];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.content.catalog.non.active'],\r\n            verify: function () { return _this.catalogService.isContentCatalogVersionNonActive(); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.not.versioning.perspective'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var isActive;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.cMSModesService.isVersioningPerspectiveActive()];\r\n                        case 1:\r\n                            isActive = _a.sent();\r\n                            return [2 /*return*/, !isActive];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.version.page.selected'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var experience;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];\r\n                        case 1:\r\n                            experience = _a.sent();\r\n                            return [2 /*return*/, !!experience.versionId];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.version.page.not.selected'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var experience;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];\r\n                        case 1:\r\n                            experience = _a.sent();\r\n                            return [2 /*return*/, !experience.versionId];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.catalogversion.has.workflows.enabled'],\r\n            verify: function () { return _this.workflowService.areWorkflowsEnabledOnCurrentCatalogVersion(); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.current.page.has.active.workflow'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var workflow;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getCurrentPageActiveWorkflow()];\r\n                        case 1:\r\n                            workflow = _a.sent();\r\n                            return [2 /*return*/, workflow !== null];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        this.permissionService.registerRule({\r\n            names: ['se.current.page.has.no.active.workflow'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var workflow;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getCurrentPageActiveWorkflow()];\r\n                        case 1:\r\n                            workflow = _a.sent();\r\n                            return [2 /*return*/, workflow === null];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n        // Attribute Permissions\r\n        this.permissionService.registerRule({\r\n            names: ['se.has.change.permission.on.page.approval.status'],\r\n            verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                var attributeName, pageInfo, result;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            attributeName = 'approvalStatus';\r\n                            return [4 /*yield*/, this.pageService.getCurrentPageInfo()];\r\n                        case 1:\r\n                            pageInfo = _a.sent();\r\n                            return [4 /*yield*/, this.attributePermissionsRestService.hasChangePermissionOnAttributesInType(pageInfo.typeCode, [attributeName])];\r\n                        case 2:\r\n                            result = _a.sent();\r\n                            return [2 /*return*/, result[attributeName]];\r\n                    }\r\n                });\r\n            }); }\r\n        });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForTypeCodeFromContext = function () {\r\n        var _this = this;\r\n        var registerTypePermissionRuleForTypeCodeFromContext = function (ruleName, verifyRule) {\r\n            _this.permissionService.registerRule({\r\n                names: [ruleName],\r\n                verify: function (permissionNameObjs) {\r\n                    var promises = permissionNameObjs.map(function (permissionNameObject) {\r\n                        return verifyRule([permissionNameObject.context.typeCode]).then(function (updatePermission) {\r\n                            return updatePermission[permissionNameObject.context.typeCode];\r\n                        });\r\n                    });\r\n                    return Promise.all(promises).then(_this.onSuccess, _this.onError);\r\n                }\r\n            });\r\n        };\r\n        // check if the current user has change permission on the type provided part of the permission object\r\n        registerTypePermissionRuleForTypeCodeFromContext('se.has.change.permissions.on.type', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });\r\n        // check if the current user has create permission on the type provided part of the permission object\r\n        registerTypePermissionRuleForTypeCodeFromContext('se.has.create.permissions.on.type', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });\r\n        // check if the current user has remove permission on the type provided part of the permission object\r\n        registerTypePermissionRuleForTypeCodeFromContext('se.has.remove.permissions.on.type', function (types) { return _this.typePermissionsRestService.hasDeletePermissionForTypes(types); });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForCurrentPage = function () {\r\n        var _this = this;\r\n        var registerTypePermissionRuleOnCurrentPage = function (ruleName, verifyRule) {\r\n            _this.permissionService.registerRule({\r\n                names: [ruleName],\r\n                verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                    var pageInfo, permissionObject;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];\r\n                            case 1:\r\n                                pageInfo = _a.sent();\r\n                                return [4 /*yield*/, verifyRule([pageInfo.typeCode])];\r\n                            case 2:\r\n                                permissionObject = _a.sent();\r\n                                return [2 /*return*/, permissionObject[pageInfo.typeCode]];\r\n                        }\r\n                    });\r\n                }); }\r\n            });\r\n        };\r\n        // check if the current user has change permission on the page currently loaded\r\n        registerTypePermissionRuleOnCurrentPage('se.has.change.type.permissions.on.current.page', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });\r\n        // check if the current user has create permission on the page currently loaded\r\n        registerTypePermissionRuleOnCurrentPage('se.has.create.type.permissions.on.current.page', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });\r\n        // check if the current user has read permission on the page currently loaded\r\n        registerTypePermissionRuleOnCurrentPage('se.has.read.type.permissions.on.current.page', function (types) { return _this.typePermissionsRestService.hasReadPermissionForTypes(types); });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForTypeCode = function () {\r\n        var _this = this;\r\n        var registerTypePermissionRuleForTypeCode = function (ruleName, itemType, verifyRule) {\r\n            _this.permissionService.registerRule({\r\n                names: [ruleName],\r\n                verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                    var UpdatePermission;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, verifyRule([itemType])];\r\n                            case 1:\r\n                                UpdatePermission = _a.sent();\r\n                                return [2 /*return*/, UpdatePermission[itemType]];\r\n                        }\r\n                    });\r\n                }); }\r\n            });\r\n        };\r\n        // check if the current user has read/create/remove/change permission on the CMSVersion type\r\n        registerTypePermissionRuleForTypeCode('se.has.read.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasReadPermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.remove.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasDeletePermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.change.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.abstractcomponent.type', 'AbstractCMSComponent', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.change.permission.on.contentslotforpage.type', 'ContentSlotForPage', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });\r\n        // check if current user has create/change permission on the Workflow type\r\n        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.workflow.type', 'Workflow', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.change.permission.on.workflow.type', 'Workflow', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.read.permission.on.workflow.type', 'Workflow', function (types) { return _this.typePermissionsRestService.hasReadPermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.contentslot.type', 'ContentSlot', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });\r\n        registerTypePermissionRuleForTypeCode('se.has.delete.permission.on.contentslot.type', 'ContentSlot', function (types) { return _this.typePermissionsRestService.hasDeletePermissionForTypes(types); });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForTypeAndQualifier = function () {\r\n        var _this = this;\r\n        var registerAttributePermissionRuleForTypeAndQualifier = function (ruleName, itemType, qualifier, verifyRule) {\r\n            _this.permissionService.registerRule({\r\n                names: [ruleName],\r\n                verify: function () { return __awaiter(_this, void 0, void 0, function () {\r\n                    var data;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, verifyRule(itemType, [qualifier])];\r\n                            case 1:\r\n                                data = _a.sent();\r\n                                return [2 /*return*/, data[qualifier]];\r\n                        }\r\n                    });\r\n                }); }\r\n            });\r\n        };\r\n        registerAttributePermissionRuleForTypeAndQualifier('se.has.change.permission.on.workflow.status', 'Workflow', 'status', function (type, attributeNames) {\r\n            return _this.attributePermissionsRestService.hasChangePermissionOnAttributesInType(type, attributeNames);\r\n        });\r\n        registerAttributePermissionRuleForTypeAndQualifier('se.has.change.permission.on.workflow.description', 'Workflow', 'description', function (type, attributeNames) {\r\n            return _this.attributePermissionsRestService.hasChangePermissionOnAttributesInType(type, attributeNames);\r\n        });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerPermissions = function () {\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.add.component'],\r\n            rules: [\r\n                'se.write.slot',\r\n                'se.write.component',\r\n                'se.page.belongs.to.experience',\r\n                'se.has.change.type.permissions.on.current.page',\r\n                'se.current.user.can.act.on.page.in.workflow',\r\n                'se.current.user.can.act.on.workflow.current.action',\r\n                'se.has.create.permission.on.abstractcomponent.type'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.read.page'],\r\n            rules: ['se.read.page']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.edit.page'],\r\n            rules: ['se.write.page', 'se.current.user.can.act.on.page.in.workflow']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.sync.catalog'],\r\n            rules: ['se.sync.catalog']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.sync.slot.context.menu', 'se.sync.slot.indicator'],\r\n            rules: [\r\n                'se.sync.catalog',\r\n                'se.page.belongs.to.experience',\r\n                'se.current.user.can.act.on.page.in.workflow'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.sync.page'],\r\n            rules: ['se.page.belongs.to.experience', 'se.current.user.can.act.on.page.in.workflow']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.edit.navigation'],\r\n            rules: ['se.write.component']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.context.menu.remove.component'],\r\n            rules: [\r\n                'se.write.slot',\r\n                'se.page.belongs.to.experience',\r\n                'se.current.user.can.act.on.page.in.workflow',\r\n                'se.current.user.can.act.on.workflow.current.action'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.slot.context.menu.shared.icon', 'se.slot.context.menu.unshared.icon'],\r\n            rules: ['se.read.slot', 'se.current.user.can.act.on.page.in.workflow']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.slot.context.menu.visibility'],\r\n            rules: ['se.page.belongs.to.experience']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.clone.page'],\r\n            rules: ['se.cloneable.page', 'se.has.create.type.permissions.on.current.page']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.context.menu.edit.component'],\r\n            rules: [\r\n                'se.write.component',\r\n                'se.page.belongs.to.experience',\r\n                'se.current.user.can.act.on.page.in.workflow'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.context.menu.drag.and.drop.component'],\r\n            rules: [\r\n                'se.write.slot',\r\n                'se.write.component',\r\n                'se.page.belongs.to.experience',\r\n                'se.current.user.can.act.on.page.in.workflow',\r\n                'se.current.user.can.act.on.workflow.current.action',\r\n                'se.has.change.permission.on.contentslotforpage.type'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.edit.page.link', 'se.delete.page.menu'],\r\n            rules: [\r\n                'se.write.page',\r\n                'se.page.belongs.to.experience',\r\n                'se.not.versioning.perspective',\r\n                'se.has.change.type.permissions.on.current.page',\r\n                'se.current.user.can.act.on.page.in.workflow'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.shared.slot.override.options'],\r\n            rules: [\r\n                'se.write.page',\r\n                'se.page.belongs.to.experience',\r\n                'se.not.versioning.perspective',\r\n                'se.current.user.can.act.on.page.in.workflow',\r\n                'se.has.create.permission.on.contentslot.type'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.revert.to.global.or.shared.slot.link'],\r\n            rules: [\r\n                'se.write.page',\r\n                'se.page.belongs.to.experience',\r\n                'se.not.versioning.perspective',\r\n                'se.current.user.can.act.on.page.in.workflow',\r\n                'se.has.delete.permission.on.contentslot.type'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.clone.component'],\r\n            rules: [\r\n                'se.write.component',\r\n                'se.page.belongs.to.experience',\r\n                'se.current.user.can.act.on.page.in.workflow'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.edit.page.type', 'se.delete.page.type', 'se.restore.page.type'],\r\n            rules: ['se.has.change.permissions.on.type']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.clone.page.type'],\r\n            rules: ['se.has.create.permissions.on.type']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.permanently.delete.page.type'],\r\n            rules: ['se.has.remove.permissions.on.type']\r\n        });\r\n        // Version\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.version.page'],\r\n            rules: [\r\n                'se.write.page',\r\n                'se.page.belongs.to.experience',\r\n                'se.content.catalog.non.active',\r\n                'se.has.read.permission.on.version.type',\r\n                'se.has.read.type.permissions.on.current.page'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.edit.version.page'],\r\n            rules: [\r\n                'se.write.to.current.catalog.version',\r\n                'se.has.change.permission.on.version.type',\r\n                'se.current.user.can.act.on.page.in.workflow'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.create.version.page'],\r\n            rules: [\r\n                'se.version.page.not.selected',\r\n                'se.page.belongs.to.experience',\r\n                'se.has.create.permission.on.version.type',\r\n                'se.has.read.type.permissions.on.current.page'\r\n            ]\r\n        });\r\n        var rulesForVersionRollback = [\r\n            'se.version.page.selected',\r\n            'se.page.belongs.to.experience',\r\n            'se.has.read.permission.on.version.type',\r\n            'se.has.create.permission.on.version.type',\r\n            'se.has.change.type.permissions.on.current.page'\r\n        ];\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.rollback.version.page'],\r\n            rules: rulesForVersionRollback\r\n        });\r\n        this.permissionService.registerPermission({\r\n            // the page versions menu button should be visible even if a version is not selected\r\n            aliases: ['se.rollback.version.page.versions.menu'],\r\n            rules: rulesForVersionRollback.filter(function (rule) { return rule !== 'se.version.page.selected'; })\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.delete.version.page'],\r\n            rules: ['se.has.remove.permission.on.version.type']\r\n        });\r\n        // Workflow\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.start.page.workflow'],\r\n            rules: [\r\n                'se.has.create.permission.on.workflow.type',\r\n                'se.catalogversion.has.workflows.enabled',\r\n                'se.current.page.has.no.active.workflow'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.view.page.workflowMenu'],\r\n            rules: [\r\n                'se.has.read.permission.on.workflow.type',\r\n                'se.current.page.has.active.workflow'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.cancel.page.workflowMenu'],\r\n            rules: [\r\n                'se.has.change.permission.on.workflow.type',\r\n                'se.current.page.has.active.workflow',\r\n                'se.has.change.permission.on.workflow.status'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.edit.workflow.workflowMenu'],\r\n            rules: [\r\n                'se.has.change.permission.on.workflow.type',\r\n                'se.current.page.has.active.workflow',\r\n                'se.has.change.permission.on.workflow.description'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.force.page.approval'],\r\n            rules: [\r\n                'se.sync.catalog',\r\n                'se.has.change.permission.on.page.approval.status',\r\n                'se.page.belongs.to.experience'\r\n            ]\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.show.page.status'],\r\n            rules: ['se.content.catalog.non.active', 'se.page.belongs.to.experience']\r\n        });\r\n        this.permissionService.registerPermission({\r\n            aliases: ['se.act.on.page.in.workflow'],\r\n            rules: ['se.current.user.can.act.on.page.in.workflow']\r\n        });\r\n    };\r\n    /* @ngInject */ RulesAndPermissionsRegistrationService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [AttributePermissionsRestService,\r\n            ICatalogService,\r\n            ICatalogVersionPermissionService,\r\n            CatalogVersionRestService,\r\n            CMSModesService,\r\n            IExperienceService,\r\n            IPageService,\r\n            IPermissionService,\r\n            ISharedDataService,\r\n            TypePermissionsRestService,\r\n            WorkflowService])\r\n    ], /* @ngInject */ RulesAndPermissionsRegistrationService);\r\n    return /* @ngInject */ RulesAndPermissionsRegistrationService;\r\n}());\r\nexport { /* @ngInject */ RulesAndPermissionsRegistrationService };\r\n//# sourceMappingURL=RulesAndPermissionsRegistrationService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/workflow/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/workflow/services/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/dao/index.ts"],"map":"{\"version\":3,\"file\":\"RulesAndPermissionsRegistrationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/RulesAndPermissionsRegistrationService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/services/RulesAndPermissionsRegistrationService.d.ts","writeByteOrderMark":false,"text":"import { AttributePermissionsRestService, CMSModesService, IPageService, TypePermissionsRestService } from 'cmscommons';\r\nimport { ICatalogService, ICatalogVersionPermissionService, IExperienceService, IPermissionService, ISharedDataService } from 'smarteditcommons';\r\nimport { WorkflowService } from '../components/workflow/services';\r\nimport { CatalogVersionRestService } from '../dao';\r\nexport declare class RulesAndPermissionsRegistrationService {\r\n    private attributePermissionsRestService;\r\n    private catalogService;\r\n    private catalogVersionPermissionService;\r\n    private catalogVersionRestService;\r\n    private cMSModesService;\r\n    private experienceService;\r\n    private pageService;\r\n    private permissionService;\r\n    private sharedDataService;\r\n    private typePermissionsRestService;\r\n    private workflowService;\r\n    constructor(attributePermissionsRestService: AttributePermissionsRestService, catalogService: ICatalogService, catalogVersionPermissionService: ICatalogVersionPermissionService, catalogVersionRestService: CatalogVersionRestService, cMSModesService: CMSModesService, experienceService: IExperienceService, pageService: IPageService, permissionService: IPermissionService, sharedDataService: ISharedDataService, typePermissionsRestService: TypePermissionsRestService, workflowService: WorkflowService);\r\n    register(): void;\r\n    private onSuccess;\r\n    private onError;\r\n    private getCurrentPageActiveWorkflow;\r\n    private registerRules;\r\n    private registerRulesForTypeCodeFromContext;\r\n    private registerRulesForCurrentPage;\r\n    private registerRulesForTypeCode;\r\n    private registerRulesForTypeAndQualifier;\r\n    private registerPermissions;\r\n}\r\n"}}
