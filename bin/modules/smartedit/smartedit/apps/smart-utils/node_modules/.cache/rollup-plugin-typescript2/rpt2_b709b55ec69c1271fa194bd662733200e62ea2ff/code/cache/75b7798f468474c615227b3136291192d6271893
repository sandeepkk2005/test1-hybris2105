{"code":"//# sourceMappingURL=i-rest-service.factory.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/rest/i-rest-service.ts"],"map":"{\"version\":3,\"file\":\"i-rest-service.factory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/rest/i-rest-service.factory.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/rest/i-rest-service.factory.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { IRestService } from './i-rest-service';\r\n/**\r\n * @ngdoc interface\r\n * @name @smartutils.interfaces:restServiceFactory\r\n *\r\n * @description\r\n * A factory used to generate a REST service wrapper for a given resource URL, providing a means to perform HTTP\r\n * operations (GET, POST, etc) for the given resource.\r\n */\r\nexport interface IRestServiceFactory {\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:restServiceFactory#get<T>\r\n     * @methodOf @smartutils.interfaces:restServiceFactory\r\n     *\r\n     * @description\r\n     * A factory method used to create a REST service of type {@link @smartutils.interfaces:IRestService IRestService<T>}\r\n     * that points to the given resource URI.\r\n     * The returned service wraps an httpClient object. As opposed to a httpClient, the REST services retrieved from the\r\n     * restServiceFactory can only take one object argument. The object argument will automatically be split\r\n     * into a parameter object and a payload object before they are delegated to the wrapped httpClient object.\r\n     * If the domain is set, the domain is prepended to the given URI.\r\n     *\r\n     * @param {String} uri The URI of the REST service to be retrieved.\r\n     * @param {String=} identifier An optional parameter. The name of the placeholder that is appended to the end\r\n     * of the URI if the name is not already provided as part of the URI. The default value is \"identifier\".\r\n     * <pre>\r\n     * \tif identifier is \"resourceId\" and uri is \"resource/:resourceId/someValue\", the target URI will remain the same.\r\n     * \tif identifier is \"resourceId\" and uri is \"resource\", the target URI will be \"resource/:resourceId\".\r\n     * </pre>\r\n     *\r\n     * @returns {IRestService} A {@link @smartutils.interfaces:IRestService IRestService} around a {@link https://angular.io/guide/http HttpClient}\r\n     */\r\n    get<T>(uri: string, identifier?: string): IRestService<T>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:restServiceFactory#setDomain\r\n     * @methodOf @smartutils.interfaces:restServiceFactory\r\n     *\r\n     * @deprecated since 2005\r\n     *\r\n     * @description\r\n     * When working with multiple services that reference the same domain, it is best to only specify relative\r\n     * paths for the services and specify the context-wide domain in a separate location. The {@link\r\n     * @smartutils.interfaces:restServiceFactory#get get} method of the {@link\r\n     * @smartutils.interfaces:restServiceFactory restServiceFactory} will then prefix the specified service\r\n     * URIs with the domain and a forward slash.\r\n     *\r\n     * @param {String} domain The context-wide domain that all URIs will be prefixed with when services are\r\n     * created/when a service is created\r\n     *\r\n     */\r\n    setDomain?(domain: string): void;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:restServiceFactory#setBasePath\r\n     * @methodOf @smartutils.interfaces:restServiceFactory\r\n     *\r\n     * @description\r\n     * Set base path for a particular service and every request that consists of the absolute path\r\n     * will be automatically prefixed with the provided base path.\r\n     * Base path prefixes only absolute URIs and will not override requests that contain protocols.\r\n     *\r\n     * @param {String} basePath The service-wide path that will prefix all absolute URIs for the particular service.\r\n     */\r\n    setBasePath?(basePath: string): void;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:restServiceFactory#setGlobalBasePath\r\n     * @methodOf @smartutils.interfaces:restServiceFactory\r\n     *\r\n     * @description\r\n     * The global base path will prefix all services` URIs, unless the {@link\r\n     * @smartutils.interfaces:restServiceFactory#setBasePath setBasePath} method of the {@link\r\n     * @smartutils.interfaces:restServiceFactory restServiceFactory} was invoked for any\r\n     * particular service.\r\n     * Once set, the global base path cannot be overridden.\r\n     * Global base path prefixes only absolute URIs and will not override requests that contain protocols.\r\n     *\r\n     * @param {String} globalDomain The top-level domain that all URIs will be prefixed with.\r\n     */\r\n    setGlobalBasePath?(globalDomain: string): void;\r\n}\r\n"}}
