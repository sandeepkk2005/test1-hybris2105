{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { SeComponent } from 'smarteditcommons';\r\nimport { CatalogInformationService } from '../../../../genericEditor/catalog/services';\r\nimport { ProductNodeComponent } from './productNode/ProductNodeComponent';\r\nimport { ProductSelectorItemComponent } from './productSelectorItem';\r\n/**\r\n *  A component that allows users to select products from one or more catalogs.\r\n *  This component is catalog aware; the list of products displayed is dependent on\r\n *  the product catalog and catalog version selected by the user within the component.\r\n */\r\nvar /* @ngInject */ ProductSelectorComponent = /** @class */ (function () {\r\n    function /* @ngInject */ ProductSelectorComponent(catalogInformationService) {\r\n        this.catalogInformationService = catalogInformationService;\r\n        this.maxNumItems = 10;\r\n        this.productNodeComponent = ProductNodeComponent;\r\n        this.productSelectorItemComponent = ProductSelectorItemComponent;\r\n    }\r\n    /* @ngInject */ ProductSelectorComponent.prototype.$onInit = function () {\r\n        this.getCatalogs = this.catalogInformationService.makeGetProductCatalogsInformation();\r\n        this.itemsFetchStrategy = this.catalogInformationService.productsFetchStrategy;\r\n        if (this.editable === undefined) {\r\n            this.editable = true;\r\n        }\r\n    };\r\n    /* @ngInject */ ProductSelectorComponent = __decorate([\r\n        SeComponent({\r\n            selector: 'se-product-selector',\r\n            templateUrl: 'productSelectorTemplate.html',\r\n            inputs: ['id:@', 'model:=', 'qualifier', 'editable:?']\r\n        }),\r\n        __metadata(\"design:paramtypes\", [CatalogInformationService])\r\n    ], /* @ngInject */ ProductSelectorComponent);\r\n    return /* @ngInject */ ProductSelectorComponent;\r\n}());\r\nexport { /* @ngInject */ ProductSelectorComponent };\r\n//# sourceMappingURL=productSelector.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/genericEditor/catalog/services/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/legacyGenericEditor/catalog/components/productSelector/productNode/ProductNodeComponent.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/legacyGenericEditor/catalog/components/productSelector/productSelectorItem/index.ts"],"map":"{\"version\":3,\"file\":\"productSelector.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/components/legacyGenericEditor/catalog/components/productSelector/productSelector.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAgB,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC7D,OAAO,EACH,yBAAyB,EAG5B,MAAM,4CAA4C,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,oCAAoC,CAAC;AAC1E,OAAO,EAAE,4BAA4B,EAAE,MAAM,uBAAuB,CAAC;AAMrE;;;;GAIG;AAMH;IAsBI,kDAAoB,yBAAoD;QAApD,8BAAyB,GAAzB,yBAAyB,CAA2B;QANjE,gBAAW,GAAG,EAAE,CAAC;QAOpB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,4BAA4B,GAAG,4BAA4B,CAAC;IACrE,CAAC;IAED,0DAAO,GAAP;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,CAAC;QACtF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,qBAAqB,CAAC;QAE/E,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;YAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACxB;IACL,CAAC;IAlCL;QALC,WAAW,CAAC;YACT,QAAQ,EAAE,qBAAqB;YAC/B,WAAW,EAAE,8BAA8B;YAC3C,MAAM,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,CAAC;SACzD,CAAC;yCAuBiD,yBAAyB;gDAa3E;IAAD,+CAAC;CAAA,AAnCD,IAmCC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/legacyGenericEditor/catalog/components/productSelector/productSelector.d.ts","writeByteOrderMark":false,"text":"import { ISeComponent } from 'smarteditcommons';\r\nimport { CatalogInformationService, ProductCatalog, ProductsFetchStrategy } from '../../../../genericEditor/catalog/services';\r\nimport { ProductNodeComponent } from './productNode/ProductNodeComponent';\r\nimport { ProductSelectorItemComponent } from './productSelectorItem';\r\ninterface ProductModel {\r\n    products: string[];\r\n}\r\n/**\r\n *  A component that allows users to select products from one or more catalogs.\r\n *  This component is catalog aware; the list of products displayed is dependent on\r\n *  the product catalog and catalog version selected by the user within the component.\r\n */\r\nexport declare class ProductSelectorComponent implements ISeComponent {\r\n    private catalogInformationService;\r\n    /** An identifier used to track down the component in the page. */\r\n    id: string;\r\n    /**\r\n     * The object where the list of selected products will be stored. The model must contain a property with the same name as the qualifier. That property must be\r\n     * of type array and is used to store the UIDs of the products selected.\r\n     */\r\n    model: ProductModel;\r\n    /** The key of the property in the model that will hold the list of products selected. */\r\n    qualifier: string;\r\n    /**\r\n     * This property specifies whether the selector can be edited or not. If this flag is false,\r\n     * then the selector is treated as read-only; the selection cannot be modified in any way. Optional, default value is true.\r\n     */\r\n    editable: boolean;\r\n    maxNumItems: number;\r\n    getCatalogs: () => Promise<ProductCatalog[]>;\r\n    itemsFetchStrategy: ProductsFetchStrategy;\r\n    productNodeComponent: typeof ProductNodeComponent;\r\n    productSelectorItemComponent: typeof ProductSelectorItemComponent;\r\n    constructor(catalogInformationService: CatalogInformationService);\r\n    $onInit(): void;\r\n}\r\nexport {};\r\n"}}
