{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as angular from 'angular';\r\nimport { SeComponent } from 'smarteditcommons/di';\r\nimport '../genericEditor/genericEditor.scss';\r\n/**\r\n * **Deprecated since 2005, use {@link GenericEditorComponent}.**\r\n *\r\n * Component responsible for generating custom HTML CRUD form for any smarteditComponent type.\r\n *\r\n * The controller has a method that creates a new instance for the {@link GenericEditorFactoryService}\r\n * and sets the scope of smarteditComponentId and smarteditComponentType to a value that has been extracted from the original DOM element in the storefront.\r\n *\r\n * ### Parameters\r\n *\r\n * `id` - Id of the current generic editor.\r\n *\r\n * `smarteditComponentType` - The SmartEdit component type that is to be created, read, updated, or deleted.\r\n *\r\n * `smarteditComponentId` - The identifier of the SmartEdit component that is to be created, read, updated, or deleted.\r\n *\r\n * `structureApi` - The data binding to a REST Structure API that fulfills the contract described in the  {@link GenericEditorFactoryService} service. Only the Structure API or the local structure must be set.\r\n *\r\n * `structure` - The data binding to a REST Structure JSON that fulfills the contract described in the {@link GenericEditorFactoryService} service. Only the Structure API or the local structure must be set.\r\n *\r\n * `contentApi` - The REST API used to create, read, update, or delete content.\r\n *\r\n * `content` - The model for the generic editor (the initial content when the component is being edited).\r\n *\r\n * `uriContext` - is an optional parameter and is used to pass the uri Params which can be used in making\r\n *\r\n * api calls in custom widgets. It is an optional parameter and if not found, generic editor will find an experience in\r\n * sharedDataService and set this uriContext.\r\n * `submit` - It exposes the inner submit function to the invoker scope. If this parameter is set, the directive will not display an inner submit button.\r\n *\r\n * `reset` - It exposes the inner reset function to the invoker scope. If this parameter is set, the directive will not display an inner cancel button.\r\n *\r\n * `isDirty` - Indicates if the the generic editor is in a pristine state (for example: has been modified).\r\n *\r\n * `isValid` - Indicates if all of the containing forms and controls in the generic editor are valid.\r\n *\r\n * `getApi` - Exposes the generic editor's api object\r\n *\r\n * `updateCallback` - Callback called at the end of a successful submit. It is invoked with two arguments: the pristine object and the response from the server.\r\n *\r\n * `customOnSubmit` - It exposes the inner onSubmit function to the invoker scope. If the parameter is set, the inner onSubmit function is overridden by the custom function and the custom function must return a promise in the response format expected by the generic editor.\r\n *\r\n * `editorStackId` - When working with nested components, a generic editor can be opened from within another editor. This parameter is used to specify the stack of nested editors.\r\n *\r\n * @deprecated\r\n */\r\nvar /* @ngInject */ GenericEditorComponent = /** @class */ (function () {\r\n    function /* @ngInject */ GenericEditorComponent($attrs) {\r\n        this.$attrs = $attrs;\r\n    }\r\n    /* @ngInject */ GenericEditorComponent.prototype.$onInit = function () {\r\n        this.submit = this.$attrs.hasOwnProperty('submit') ? this.submit : null;\r\n        this.reset = this.$attrs.hasOwnProperty('reset') ? this.reset : null;\r\n        this.isDirty = this.$attrs.hasOwnProperty('isDirty') ? this.isDirty : null;\r\n        this.isValid = this.$attrs.hasOwnProperty('isValid') ? this.isValid : null;\r\n    };\r\n    /* @ngInject */ GenericEditorComponent = __decorate([\r\n        SeComponent({\r\n            templateUrl: 'genericEditorComponentTemplate.html',\r\n            inputs: [\r\n                'id:=',\r\n                'smarteditComponentId:=',\r\n                'smarteditComponentType:=?',\r\n                'contentApi:=',\r\n                'content:=',\r\n                'uriContext',\r\n                'submit:=?',\r\n                'reset:=?',\r\n                'isDirty:=?',\r\n                'isValid:=?',\r\n                'getApi:&?',\r\n                'customOnSubmit:=?',\r\n                'structureApi',\r\n                'structure',\r\n                'updateCallback',\r\n                'editorStackId'\r\n            ]\r\n        }),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], /* @ngInject */ GenericEditorComponent);\r\n    return /* @ngInject */ GenericEditorComponent;\r\n}());\r\nexport { /* @ngInject */ GenericEditorComponent };\r\n//# sourceMappingURL=GenericEditorComponent.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"GenericEditorComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/legacyGenericEditor/GenericEditorComponent.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,qCAAqC,CAAC;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AAsBH;IAMI,gDAAoB,MAA2B;QAA3B,WAAM,GAAN,MAAM,CAAqB;IAAG,CAAC;IAEnD,wDAAO,GAAP;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QACxE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QACrE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAC3E,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/E,CAAC;IAbL;QArBC,WAAW,CAAC;YACT,WAAW,EAAE,qCAAqC;YAClD,MAAM,EAAE;gBACJ,MAAM;gBACN,wBAAwB;gBACxB,2BAA2B;gBAC3B,cAAc;gBACd,WAAW;gBACX,YAAY;gBACZ,WAAW;gBACX,UAAU;gBACV,YAAY;gBACZ,YAAY;gBACZ,WAAW;gBACX,mBAAmB;gBACnB,cAAc;gBACd,WAAW;gBACX,gBAAgB;gBAChB,eAAe;aAClB;SACJ,CAAC;;8CAeD;IAAD,6CAAC;CAAA,AAdD,IAcC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/legacyGenericEditor/GenericEditorComponent.d.ts","writeByteOrderMark":false,"text":"import * as angular from 'angular';\r\nimport '../genericEditor/genericEditor.scss';\r\n/**\r\n * **Deprecated since 2005, use {@link GenericEditorComponent}.**\r\n *\r\n * Component responsible for generating custom HTML CRUD form for any smarteditComponent type.\r\n *\r\n * The controller has a method that creates a new instance for the {@link GenericEditorFactoryService}\r\n * and sets the scope of smarteditComponentId and smarteditComponentType to a value that has been extracted from the original DOM element in the storefront.\r\n *\r\n * ### Parameters\r\n *\r\n * `id` - Id of the current generic editor.\r\n *\r\n * `smarteditComponentType` - The SmartEdit component type that is to be created, read, updated, or deleted.\r\n *\r\n * `smarteditComponentId` - The identifier of the SmartEdit component that is to be created, read, updated, or deleted.\r\n *\r\n * `structureApi` - The data binding to a REST Structure API that fulfills the contract described in the  {@link GenericEditorFactoryService} service. Only the Structure API or the local structure must be set.\r\n *\r\n * `structure` - The data binding to a REST Structure JSON that fulfills the contract described in the {@link GenericEditorFactoryService} service. Only the Structure API or the local structure must be set.\r\n *\r\n * `contentApi` - The REST API used to create, read, update, or delete content.\r\n *\r\n * `content` - The model for the generic editor (the initial content when the component is being edited).\r\n *\r\n * `uriContext` - is an optional parameter and is used to pass the uri Params which can be used in making\r\n *\r\n * api calls in custom widgets. It is an optional parameter and if not found, generic editor will find an experience in\r\n * sharedDataService and set this uriContext.\r\n * `submit` - It exposes the inner submit function to the invoker scope. If this parameter is set, the directive will not display an inner submit button.\r\n *\r\n * `reset` - It exposes the inner reset function to the invoker scope. If this parameter is set, the directive will not display an inner cancel button.\r\n *\r\n * `isDirty` - Indicates if the the generic editor is in a pristine state (for example: has been modified).\r\n *\r\n * `isValid` - Indicates if all of the containing forms and controls in the generic editor are valid.\r\n *\r\n * `getApi` - Exposes the generic editor's api object\r\n *\r\n * `updateCallback` - Callback called at the end of a successful submit. It is invoked with two arguments: the pristine object and the response from the server.\r\n *\r\n * `customOnSubmit` - It exposes the inner onSubmit function to the invoker scope. If the parameter is set, the inner onSubmit function is overridden by the custom function and the custom function must return a promise in the response format expected by the generic editor.\r\n *\r\n * `editorStackId` - When working with nested components, a generic editor can be opened from within another editor. This parameter is used to specify the stack of nested editors.\r\n *\r\n * @deprecated\r\n */\r\nexport declare class GenericEditorComponent {\r\n    private $attrs;\r\n    submit: () => void;\r\n    reset: () => void;\r\n    isDirty: () => boolean;\r\n    isValid: () => boolean;\r\n    constructor($attrs: angular.IAttributes);\r\n    $onInit(): void;\r\n}\r\n"}}
