{"version":3,"file":"RushVersionSelector.js","sourceRoot":"","sources":["../src/RushVersionSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\n\r\nimport { LockFile } from '@rushstack/node-core-library';\r\nimport { Utilities } from '@microsoft/rush-lib/lib/utilities/Utilities';\r\nimport { _LastInstallFlag, _RushGlobalFolder, ILaunchOptions } from '@microsoft/rush-lib';\r\n\r\nimport { RushCommandSelector } from './RushCommandSelector';\r\nimport { MinimalRushConfiguration } from './MinimalRushConfiguration';\r\n\r\nconst MAX_INSTALL_ATTEMPTS: number = 3;\r\n\r\nexport class RushVersionSelector {\r\n  private _rushGlobalFolder: _RushGlobalFolder;\r\n  private _currentPackageVersion: string;\r\n\r\n  public constructor(currentPackageVersion: string) {\r\n    this._rushGlobalFolder = new _RushGlobalFolder();\r\n    this._currentPackageVersion = currentPackageVersion;\r\n  }\r\n\r\n  public async ensureRushVersionInstalledAsync(\r\n    version: string,\r\n    configuration: MinimalRushConfiguration | undefined,\r\n    executeOptions: ILaunchOptions\r\n  ): Promise<void> {\r\n    const isLegacyRushVersion: boolean = semver.lt(version, '4.0.0');\r\n    const expectedRushPath: string = path.join(this._rushGlobalFolder.nodeSpecificPath, `rush-${version}`);\r\n\r\n    const installMarker: _LastInstallFlag = new _LastInstallFlag(expectedRushPath, {\r\n      node: process.versions.node\r\n    });\r\n\r\n    if (!installMarker.isValid()) {\r\n      // Need to install Rush\r\n      console.log(`Rush version ${version} is not currently installed. Installing...`);\r\n\r\n      const resourceName: string = `rush-${version}`;\r\n\r\n      console.log(`Trying to acquire lock for ${resourceName}`);\r\n\r\n      const lock: LockFile = await LockFile.acquire(expectedRushPath, resourceName);\r\n      if (installMarker.isValid()) {\r\n        console.log('Another process performed the installation.');\r\n      } else {\r\n        Utilities.installPackageInDirectory({\r\n          directory: expectedRushPath,\r\n          packageName: isLegacyRushVersion ? '@microsoft/rush' : '@microsoft/rush-lib',\r\n          version: version,\r\n          tempPackageTitle: 'rush-local-install',\r\n          maxInstallAttempts: MAX_INSTALL_ATTEMPTS,\r\n          // This is using a local configuration to install a package in a shared global location.\r\n          // Generally that's a bad practice, but in this case if we can successfully install\r\n          // the package at all, we can reasonably assume it's good for all the repositories.\r\n          // In particular, we'll assume that two different NPM registries cannot have two\r\n          // different implementations of the same version of the same package.\r\n          // This was needed for: https://github.com/microsoft/rushstack/issues/691\r\n          commonRushConfigFolder: configuration ? configuration.commonRushConfigFolder : undefined,\r\n          suppressOutput: true\r\n        });\r\n\r\n        console.log(`Successfully installed Rush version ${version} in ${expectedRushPath}.`);\r\n\r\n        // If we've made it here without exception, write the flag file\r\n        installMarker.create();\r\n\r\n        lock.release();\r\n      }\r\n    }\r\n\r\n    if (semver.lt(version, '3.0.20')) {\r\n      // In old versions, requiring the entry point invoked the command-line parser immediately,\r\n      // so fail if \"rushx\" was used\r\n      RushCommandSelector.failIfNotInvokedAsRush(version);\r\n      require(path.join(expectedRushPath, 'node_modules', '@microsoft', 'rush', 'lib', 'rush'));\r\n    } else if (semver.lt(version, '4.0.0')) {\r\n      // In old versions, requiring the entry point invoked the command-line parser immediately,\r\n      // so fail if \"rushx\" was used\r\n      RushCommandSelector.failIfNotInvokedAsRush(version);\r\n      require(path.join(expectedRushPath, 'node_modules', '@microsoft', 'rush', 'lib', 'start'));\r\n    } else {\r\n      // For newer rush-lib, RushCommandSelector can test whether \"rushx\" is supported or not\r\n      const rushCliEntrypoint: {} = require(path.join(\r\n        expectedRushPath,\r\n        'node_modules',\r\n        '@microsoft',\r\n        'rush-lib',\r\n        'lib',\r\n        'index'\r\n      ));\r\n      RushCommandSelector.execute(this._currentPackageVersion, rushCliEntrypoint, executeOptions);\r\n    }\r\n  }\r\n}\r\n"]}