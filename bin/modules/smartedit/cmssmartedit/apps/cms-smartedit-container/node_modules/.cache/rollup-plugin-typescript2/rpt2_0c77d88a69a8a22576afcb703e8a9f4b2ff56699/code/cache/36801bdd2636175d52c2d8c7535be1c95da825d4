{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { SeComponent } from 'smarteditcommons';\r\nimport { CatalogInformationService } from '../../../../genericEditor/catalog/services/CatalogInformationService';\r\nimport { CategoryNodeComponent } from './categoryNode';\r\nimport { CategorySelectorItemComponent } from './categorySelectorItem';\r\n/**\r\n * A component that allows users to select categories from one or more catalogs.\r\n * This component is catalog aware; the list of categories displayed is dependent on\r\n * the product catalog and catalog version selected by the user within the component.\r\n */\r\nvar /* @ngInject */ CategorySelectorComponent = /** @class */ (function () {\r\n    function /* @ngInject */ CategorySelectorComponent(catalogInformationService) {\r\n        this.catalogInformationService = catalogInformationService;\r\n        this.categoryNodeComponent = CategoryNodeComponent;\r\n        this.categorySelectorItemComponent = CategorySelectorItemComponent;\r\n    }\r\n    /* @ngInject */ CategorySelectorComponent.prototype.$onInit = function () {\r\n        this.getCatalogs = this.catalogInformationService.makeGetProductCatalogsInformation();\r\n        this.itemsFetchStrategy = this.catalogInformationService.categoriesFetchStrategy;\r\n        if (this.editable === undefined) {\r\n            this.editable = true;\r\n        }\r\n    };\r\n    /* @ngInject */ CategorySelectorComponent = __decorate([\r\n        SeComponent({\r\n            selector: 'se-category-selector',\r\n            templateUrl: 'categorySelectorTemplate.html',\r\n            inputs: ['id:@', 'model:=', 'qualifier', 'editable:?']\r\n        }),\r\n        __metadata(\"design:paramtypes\", [CatalogInformationService])\r\n    ], /* @ngInject */ CategorySelectorComponent);\r\n    return /* @ngInject */ CategorySelectorComponent;\r\n}());\r\nexport { /* @ngInject */ CategorySelectorComponent };\r\n//# sourceMappingURL=categorySelector.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/genericEditor/catalog/services/CatalogInformationService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/legacyGenericEditor/catalog/components/categorySelector/categoryNode/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/legacyGenericEditor/catalog/components/categorySelector/categorySelectorItem/index.ts"],"map":"{\"version\":3,\"file\":\"categorySelector.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/components/legacyGenericEditor/catalog/components/categorySelector/categorySelector.ts\"],\"names\":[],\"mappings\":\";AAIA,OAAO,EAAgB,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC7D,OAAO,EACH,yBAAyB,EAG5B,MAAM,sEAAsE,CAAC;AAC9E,OAAO,EAAE,qBAAqB,EAAE,MAAM,gBAAgB,CAAC;AACvD,OAAO,EAAE,6BAA6B,EAAE,MAAM,wBAAwB,CAAC;AAEvE;;;;GAIG;AAMH;IAmBI,mDAAoB,yBAAoD;QAApD,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpE,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;IACvE,CAAC;IAED,2DAAO,GAAP;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,CAAC;QACtF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC;QAEjF,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;YAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACxB;IACL,CAAC;IA/BL;QALC,WAAW,CAAC;YACT,QAAQ,EAAE,sBAAsB;YAChC,WAAW,EAAE,+BAA+B;YAC5C,MAAM,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,CAAC;SACzD,CAAC;yCAoBiD,yBAAyB;iDAa3E;IAAD,gDAAC;CAAA,AAhCD,IAgCC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/legacyGenericEditor/catalog/components/categorySelector/categorySelector.d.ts","writeByteOrderMark":false,"text":"import { CMSItem } from 'cmscommons';\r\nimport { ISeComponent } from 'smarteditcommons';\r\nimport { CatalogInformationService, ProductCatalog, CategoriesFetchStrategy } from '../../../../genericEditor/catalog/services/CatalogInformationService';\r\nimport { CategoryNodeComponent } from './categoryNode';\r\nimport { CategorySelectorItemComponent } from './categorySelectorItem';\r\n/**\r\n * A component that allows users to select categories from one or more catalogs.\r\n * This component is catalog aware; the list of categories displayed is dependent on\r\n * the product catalog and catalog version selected by the user within the component.\r\n */\r\nexport declare class CategorySelectorComponent implements ISeComponent {\r\n    private catalogInformationService;\r\n    /** An identifier used to track down the component in the page. */\r\n    id: string;\r\n    /**\r\n     * The object where the list of selected categories will be stored.\r\n     * The model must contain a property with the same name as the qualifier.\r\n     * That property must be of type array and is used to store the UIDs of the categories selected.\r\n     */\r\n    model: CMSItem;\r\n    /** The key of the property in the model that will hold the list of categories selected. */\r\n    qualifier: string;\r\n    /** A flag that specifies whether the component can be modified or not. If the component cannot be modified, then the categories selected are read-only. Optional, default value is true. */\r\n    editable: boolean;\r\n    categoryNodeComponent: typeof CategoryNodeComponent;\r\n    categorySelectorItemComponent: typeof CategorySelectorItemComponent;\r\n    getCatalogs: () => Promise<ProductCatalog[]>;\r\n    itemsFetchStrategy: CategoriesFetchStrategy;\r\n    constructor(catalogInformationService: CatalogInformationService);\r\n    $onInit(): void;\r\n}\r\n"}}
