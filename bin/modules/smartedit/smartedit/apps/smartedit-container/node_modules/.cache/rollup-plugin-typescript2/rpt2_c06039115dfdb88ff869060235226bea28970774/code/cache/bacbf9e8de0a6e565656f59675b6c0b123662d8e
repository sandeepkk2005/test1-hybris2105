{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { EVENTS, ICatalogVersionPermissionService, IExperienceService, ISharedDataService, LogService, SystemEventService, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\n/**\r\n * Validates if user has permission on current catalog.\r\n *\r\n * Implemented by Route Guards.\r\n */\r\nvar /* @ngInject */ CatalogAwareRouteResolverHelper = /** @class */ (function () {\r\n    function /* @ngInject */ CatalogAwareRouteResolverHelper(logService, route, systemEventService, experienceService, sharedDataService, catalogVersionPermissionService) {\r\n        this.logService = logService;\r\n        this.route = route;\r\n        this.systemEventService = systemEventService;\r\n        this.experienceService = experienceService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.catalogVersionPermissionService = catalogVersionPermissionService;\r\n    }\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper_1 = /* @ngInject */ CatalogAwareRouteResolverHelper;\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     *\r\n     * Convert to instance method after 2105 deprecation period has been exceeded.\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.executeAndCheckCatalogPermissions = function (catalogVersionPermissionService, logService, experienceService, systemEventService, operation) {\r\n        return operation().then(function () {\r\n            return catalogVersionPermissionService.hasReadPermissionOnCurrent().then(function (hasReadPermission) {\r\n                if (!hasReadPermission) {\r\n                    logService.info('no permission to access the storefront view with this experience');\r\n                    return Promise.reject();\r\n                }\r\n                return experienceService\r\n                    .hasCatalogVersionChanged()\r\n                    .then(function (hasCatalogVersionChanged) {\r\n                    if (hasCatalogVersionChanged) {\r\n                        systemEventService.publishAsync(EVENTS.EXPERIENCE_UPDATE);\r\n                    }\r\n                    return true;\r\n                });\r\n            }, function () {\r\n                logService.info('failed to evaluate permissions to access the storefront view with this experience');\r\n                return Promise.reject();\r\n            });\r\n        }, function (error) {\r\n            logService.error('could not retrieve experience from storage or route params', error);\r\n            throw new Error(error);\r\n        });\r\n    };\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.checkExperienceIsSet = function (experienceService, sharedDataService) {\r\n        return new Promise(function (resolve, reject) {\r\n            experienceService.getCurrentExperience().then(function (experience) {\r\n                if (!experience) {\r\n                    return reject();\r\n                }\r\n                // next line to preserve in-memory features throughout the app\r\n                sharedDataService.set(EXPERIENCE_STORAGE_KEY, experience);\r\n                return resolve(experience);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.buildExperienceFromRoute = function (experienceService, params) {\r\n        return experienceService.buildAndSetExperience(params).then(function (experience) {\r\n            if (!experience) {\r\n                return Promise.reject();\r\n            }\r\n            return experience;\r\n        });\r\n    };\r\n    /**\r\n     * Checks presence of a stored experience.\r\n     *\r\n     * It will reject if the user doesn't have a read permission to the current catalog version.\r\n     * Consumer can redirect current user to the Landing Page by handling the rejection.\r\n     *\r\n     * If the user has read permission for the catalog version then EVENTS.EXPERIENCE_UPDATE is sent, but only when the experience has been changed.\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.prototype.storefrontResolve = function () {\r\n        var _this = this;\r\n        return this.executeAndCheckCatalogPermissions(function () { return _this.checkExperienceIsSet(); });\r\n    };\r\n    /**\r\n     * Initializes new experience based on route params.\r\n     *\r\n     * It will reject if the user doesn't have a read permission to the current catalog version.\r\n     * Consumer can redirect current user to the Landing Page by handling the rejection.\r\n     *\r\n     * If the user has read permission for the catalog version then EVENTS.EXPERIENCE_UPDATE is sent, but only when the experience has been changed.\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.prototype.experienceFromPathResolve = function (params) {\r\n        var _this = this;\r\n        return this.executeAndCheckCatalogPermissions(function () { return _this.buildExperienceFromRoute(params); });\r\n    };\r\n    /**\r\n     * Runs operation that sets the experience and then resolves to true if the user has read permissions on current catalog.\r\n     *\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.prototype.executeAndCheckCatalogPermissions = function (operation) {\r\n        return /* @ngInject */ CatalogAwareRouteResolverHelper_1.executeAndCheckCatalogPermissions(this.catalogVersionPermissionService, this.logService, this.experienceService, this.systemEventService, operation);\r\n    };\r\n    /**\r\n     * Resolves with the existing experience if it is set, otherwise rejects.\r\n     *\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.prototype.checkExperienceIsSet = function () {\r\n        return /* @ngInject */ CatalogAwareRouteResolverHelper_1.checkExperienceIsSet(this.experienceService, this.sharedDataService);\r\n    };\r\n    /**\r\n     * Creates and sets an experience based on active route params.\r\n     *\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper.prototype.buildExperienceFromRoute = function (params) {\r\n        return /* @ngInject */ CatalogAwareRouteResolverHelper_1.buildExperienceFromRoute(this.experienceService, params || this.route.snapshot.params);\r\n    };\r\n    var /* @ngInject */ CatalogAwareRouteResolverHelper_1;\r\n    /* @ngInject */ CatalogAwareRouteResolverHelper = /* @ngInject */ CatalogAwareRouteResolverHelper_1 = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            ActivatedRoute,\r\n            SystemEventService,\r\n            IExperienceService,\r\n            ISharedDataService,\r\n            ICatalogVersionPermissionService])\r\n    ], /* @ngInject */ CatalogAwareRouteResolverHelper);\r\n    return /* @ngInject */ CatalogAwareRouteResolverHelper;\r\n}());\r\nexport { /* @ngInject */ CatalogAwareRouteResolverHelper };\r\n//# sourceMappingURL=CatalogAwareRouteResolverHelper.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/router@8.2.14_e9fbe5720e9434eb9ae0f6720f1ca3f4/node_modules/@angular/router/router.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/ExperienceServiceOuter.ts"],"map":"{\"version\":3,\"file\":\"CatalogAwareRouteResolverHelper.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/resolvers/CatalogAwareRouteResolverHelper.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/resolvers/CatalogAwareRouteResolverHelper.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\n/// <reference types=\"angular-mocks\" />\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ICatalogVersionPermissionService, IExperience, IExperienceParams, IExperienceService, ISharedDataService, LogService, SystemEventService } from 'smarteditcommons';\r\n/**\r\n * Validates if user has permission on current catalog.\r\n *\r\n * Implemented by Route Guards.\r\n */\r\nexport declare class CatalogAwareRouteResolverHelper {\r\n    private logService;\r\n    private route;\r\n    private systemEventService;\r\n    private experienceService;\r\n    private sharedDataService;\r\n    private catalogVersionPermissionService;\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     *\r\n     * Convert to instance method after 2105 deprecation period has been exceeded.\r\n     */\r\n    static executeAndCheckCatalogPermissions(catalogVersionPermissionService: ICatalogVersionPermissionService, logService: LogService | angular.ILogService, experienceService: IExperienceService, systemEventService: SystemEventService, operation: () => Promise<any>): Promise<boolean>;\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    static checkExperienceIsSet(experienceService: IExperienceService, sharedDataService: ISharedDataService): Promise<IExperience>;\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    static buildExperienceFromRoute(experienceService: IExperienceService, params: IExperienceParams): Promise<IExperience>;\r\n    constructor(logService: LogService, route: ActivatedRoute, systemEventService: SystemEventService, experienceService: IExperienceService, sharedDataService: ISharedDataService, catalogVersionPermissionService: ICatalogVersionPermissionService);\r\n    /**\r\n     * Checks presence of a stored experience.\r\n     *\r\n     * It will reject if the user doesn't have a read permission to the current catalog version.\r\n     * Consumer can redirect current user to the Landing Page by handling the rejection.\r\n     *\r\n     * If the user has read permission for the catalog version then EVENTS.EXPERIENCE_UPDATE is sent, but only when the experience has been changed.\r\n     */\r\n    storefrontResolve(): Promise<boolean>;\r\n    /**\r\n     * Initializes new experience based on route params.\r\n     *\r\n     * It will reject if the user doesn't have a read permission to the current catalog version.\r\n     * Consumer can redirect current user to the Landing Page by handling the rejection.\r\n     *\r\n     * If the user has read permission for the catalog version then EVENTS.EXPERIENCE_UPDATE is sent, but only when the experience has been changed.\r\n     */\r\n    experienceFromPathResolve(params?: IExperienceParams): Promise<boolean>;\r\n    /**\r\n     * Runs operation that sets the experience and then resolves to true if the user has read permissions on current catalog.\r\n     *\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    private executeAndCheckCatalogPermissions;\r\n    /**\r\n     * Resolves with the existing experience if it is set, otherwise rejects.\r\n     *\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    private checkExperienceIsSet;\r\n    /**\r\n     * Creates and sets an experience based on active route params.\r\n     *\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    private buildExperienceFromRoute;\r\n}\r\n"}}
