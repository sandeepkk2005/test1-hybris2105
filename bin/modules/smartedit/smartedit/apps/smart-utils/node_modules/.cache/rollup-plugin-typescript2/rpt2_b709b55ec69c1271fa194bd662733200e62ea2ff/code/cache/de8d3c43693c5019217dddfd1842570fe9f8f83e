{"code":"/**\r\n * @ngdoc interface\r\n * @name @smartutils.interfaces:IStorageService\r\n * @description\r\n * Interface for StorageService\r\n */\r\nvar IStorageService = /** @class */ (function () {\r\n    function IStorageService() {\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#isInitialized\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method is used to determine if the storage service has been initialized properly. It\r\n     * makes sure that the smartedit-sessions cookie is available in the browser.\r\n     *\r\n     * @returns {Boolean} Indicates if the storage service was properly initialized.\r\n     */\r\n    IStorageService.prototype.isInitialized = function () {\r\n        'proxyFunction';\r\n        return Promise.resolve(false);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#storeAuthToken\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method creates and stores a new key/value entry. It associates an authentication token with a\r\n     * URI.\r\n     *\r\n     * @param {String} authURI The URI that identifies the resource(s) to be authenticated with the authToken. Will be used as a key.\r\n     * @param {String} auth The token to be used to authenticate the user in the provided URI.\r\n     */\r\n    IStorageService.prototype.storeAuthToken = function (authURI, auth) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#getAuthToken\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method is used to retrieve the authToken associated with the provided URI.\r\n     *\r\n     * @param {String} authURI The URI for which the associated authToken is to be retrieved.\r\n     * @returns {String} The authToken used to authenticate the current user in the provided URI.\r\n     */\r\n    IStorageService.prototype.getAuthToken = function (authURI) {\r\n        'proxyFunction';\r\n        return Promise.resolve(undefined);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#removeAuthToken\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * Removes the authToken associated with the provided URI.\r\n     *\r\n     * @param {String} authURI The URI for which its authToken is to be removed.\r\n     */\r\n    IStorageService.prototype.removeAuthToken = function (authURI) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#removeAllAuthTokens\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method removes all authURI/authToken key/pairs from the storage service.\r\n     */\r\n    IStorageService.prototype.removeAllAuthTokens = function () {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#getValueFromLocalStorage\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * Retrieves the value stored in the cookie identified by the provided name.\r\n     */\r\n    IStorageService.prototype.getValueFromLocalStorage = function (cookieName, isEncoded) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    IStorageService.prototype.setValueInLocalStorage = function (cookieName, value, encode) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#setItem\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method is used to store the item.\r\n     *\r\n     * @param {String} key The key of the item.\r\n     * @param {any} value The value of the item.\r\n     */\r\n    IStorageService.prototype.setItem = function (key, value) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#getItem\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * Retrieves the value for a given key.\r\n     *\r\n     * @param {String} key The key of the item.\r\n     *\r\n     * @returns {Promise<any>} A promise that resolves to the item value.\r\n     */\r\n    IStorageService.prototype.getItem = function (key) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    return IStorageService;\r\n}());\r\nexport { IStorageService };\r\n//# sourceMappingURL=i-storage.service.js.map","references":[],"map":"{\"version\":3,\"file\":\"i-storage.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/interfaces/i-storage.service.ts\"],\"names\":[],\"mappings\":\"AAqBA;;;;;GAKG;AACH;IAAA;IAgIA,CAAC;IA/HG;;;;;;;;;;OAUG;IACH,uCAAa,GAAb;QACI,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,wCAAc,GAAd,UAAe,OAAe,EAAE,IAAgB;QAC5C,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;OAUG;IACH,sCAAY,GAAZ,UAAa,OAAe;QACxB,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;;OASG;IACH,yCAAe,GAAf,UAAgB,OAAe;QAC3B,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;OAOG;IACH,6CAAmB,GAAnB;QACI,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;OAOG;IACH,kDAAwB,GAAxB,UAAyB,UAAkB,EAAE,SAAkB;QAC3D,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,gDAAsB,GAAtB,UAAuB,UAAkB,EAAE,KAAU,EAAE,MAAe;QAClE,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;OAUG;IACH,iCAAO,GAAP,UAAQ,GAAW,EAAE,KAAU;QAC3B,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;;OAWG;IACH,iCAAO,GAAP,UAAQ,GAAW;QACf,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IACL,sBAAC;AAAD,CAAC,AAhID,IAgIC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/interfaces/i-storage.service.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * @ngdoc interface\r\n * @name @smartutils.interfaces:IAuthToken\r\n * @description\r\n * Interface for Auth token\r\n */\r\nexport interface IAuthToken {\r\n    access_token: string;\r\n    expires_in?: number;\r\n    refresh_token?: string;\r\n    scope?: string;\r\n    token_type: string;\r\n}\r\n/**\r\n * @ngdoc interface\r\n * @name @smartutils.interfaces:IStorageService\r\n * @description\r\n * Interface for StorageService\r\n */\r\nexport declare abstract class IStorageService {\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#isInitialized\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method is used to determine if the storage service has been initialized properly. It\r\n     * makes sure that the smartedit-sessions cookie is available in the browser.\r\n     *\r\n     * @returns {Boolean} Indicates if the storage service was properly initialized.\r\n     */\r\n    isInitialized(): Promise<boolean>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#storeAuthToken\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method creates and stores a new key/value entry. It associates an authentication token with a\r\n     * URI.\r\n     *\r\n     * @param {String} authURI The URI that identifies the resource(s) to be authenticated with the authToken. Will be used as a key.\r\n     * @param {String} auth The token to be used to authenticate the user in the provided URI.\r\n     */\r\n    storeAuthToken(authURI: string, auth: IAuthToken): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#getAuthToken\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method is used to retrieve the authToken associated with the provided URI.\r\n     *\r\n     * @param {String} authURI The URI for which the associated authToken is to be retrieved.\r\n     * @returns {String} The authToken used to authenticate the current user in the provided URI.\r\n     */\r\n    getAuthToken(authURI: string): Promise<IAuthToken | undefined>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#removeAuthToken\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * Removes the authToken associated with the provided URI.\r\n     *\r\n     * @param {String} authURI The URI for which its authToken is to be removed.\r\n     */\r\n    removeAuthToken(authURI: string): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#removeAllAuthTokens\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method removes all authURI/authToken key/pairs from the storage service.\r\n     */\r\n    removeAllAuthTokens(): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#getValueFromLocalStorage\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * Retrieves the value stored in the cookie identified by the provided name.\r\n     */\r\n    getValueFromLocalStorage(cookieName: string, isEncoded: boolean): Promise<any>;\r\n    setValueInLocalStorage(cookieName: string, value: any, encode: boolean): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#setItem\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * This method is used to store the item.\r\n     *\r\n     * @param {String} key The key of the item.\r\n     * @param {any} value The value of the item.\r\n     */\r\n    setItem(key: string, value: any): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.interfaces:IStorageService#getItem\r\n     * @methodOf @smartutils.interfaces:IStorageService\r\n     *\r\n     * @description\r\n     * Retrieves the value for a given key.\r\n     *\r\n     * @param {String} key The key of the item.\r\n     *\r\n     * @returns {Promise<any>} A promise that resolves to the item value.\r\n     */\r\n    getItem(key: string): Promise<any>;\r\n}\r\n"}}
