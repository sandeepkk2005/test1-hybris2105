{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { workflowCompletedEvictionTag, workflowCreatedEvictionTag, workflowTasksMenuOpenedEvictionTag, CMSModesService } from 'cmscommons';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { pageChangeEvictionTag, perspectiveChangedEvictionTag, rarelyChangingContent, Cached, CrossFrameEventService, ICatalogService, IExperienceService, IPerspectiveService, IRestServiceFactory, ISharedDataService, SystemEventService, SeDowngradeService, EVENT_PERSPECTIVE_REFRESHED, EVENT_PERSPECTIVE_CHANGED, PAGE_CONTEXT_CATALOG, PAGE_CONTEXT_CATALOG_VERSION, windowUtils } from 'smarteditcommons';\r\nimport { WorkflowTasksPollingService } from '../../workflow/services/WorkflowTasksPollingService';\r\nimport { CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, OPEN_PAGE_WORKFLOW_MENU } from '../constants';\r\nimport { WorkflowActionStatus, WorkflowOperations, WorkflowStatus } from '../dtos';\r\nexport var OpenPageWorkflowMenu;\r\n(function (OpenPageWorkflowMenu) {\r\n    OpenPageWorkflowMenu[\"Default\"] = \"Default\";\r\n    OpenPageWorkflowMenu[\"SwitchPerspective\"] = \"SwitchPerspective\";\r\n})(OpenPageWorkflowMenu || (OpenPageWorkflowMenu = {}));\r\n/**\r\n * This service is used to manage workflows.\r\n */\r\nvar /* @ngInject */ WorkflowService = /** @class */ (function () {\r\n    function /* @ngInject */ WorkflowService(restServiceFactory, crossFrameEventService, systemEventService, sharedDataService, perspectiveService, catalogService, experienceService, workflowTasksPollingService) {\r\n        var _this = this;\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.systemEventService = systemEventService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.perspectiveService = perspectiveService;\r\n        this.catalogService = catalogService;\r\n        this.experienceService = experienceService;\r\n        this.workflowTasksPollingService = workflowTasksPollingService;\r\n        this.workflowTasksCountSubject = new BehaviorSubject(0);\r\n        this.resourceWorkflowURI = \"/cmswebservices/v1/catalogs/\" + PAGE_CONTEXT_CATALOG + \"/versions/\" + PAGE_CONTEXT_CATALOG_VERSION + \"/workflows\";\r\n        this.resourceWorkflowActionsURI = \"/cmswebservices/v1/catalogs/\" + PAGE_CONTEXT_CATALOG + \"/versions/\" + PAGE_CONTEXT_CATALOG_VERSION + \"/workflows/:workflowCode/actions\";\r\n        this.resourceWorkflowTemplateURI = \"/cmswebservices/v1/catalogs/\" + PAGE_CONTEXT_CATALOG + \"/versions/\" + PAGE_CONTEXT_CATALOG_VERSION + \"/workflowtemplates\";\r\n        this.resourceWorkflowOperationsURI = \"/cmswebservices/v1/catalogs/\" + PAGE_CONTEXT_CATALOG + \"/versions/\" + PAGE_CONTEXT_CATALOG_VERSION + \"/workflows/:workflowCode/operations\";\r\n        this.resourceWorkflowActionCommentsURI = \"/cmswebservices/v1/catalogs/\" + PAGE_CONTEXT_CATALOG + \"/versions/\" + PAGE_CONTEXT_CATALOG_VERSION + \"/workflows/:workflowCode/actions/:actionCode/comments\";\r\n        this.resourceWorkflowEditableItemsURI = \"/cmssmarteditwebservices/v1/catalogs/\" + PAGE_CONTEXT_CATALOG + \"/versions/\" + PAGE_CONTEXT_CATALOG_VERSION + \"/workfloweditableitems\";\r\n        this.resourceWorkflowInboxTasksURI = \"/cmssmarteditwebservices/v1/inbox/workflowtasks\";\r\n        this.workflowRESTService = this.restServiceFactory.get(this.resourceWorkflowURI);\r\n        this.workflowTemplateRESTService = this.restServiceFactory.get(this.resourceWorkflowTemplateURI);\r\n        this.workflowActionsRESTService = this.restServiceFactory.get(this.resourceWorkflowActionsURI);\r\n        this.workflowInboxTasksRESTService = this.restServiceFactory.get(this.resourceWorkflowInboxTasksURI);\r\n        this.workflowEditableItemsRESTService = this.restServiceFactory.get(this.resourceWorkflowEditableItemsURI);\r\n        this.crossFrameEventService.subscribe(EVENT_PERSPECTIVE_REFRESHED, function () {\r\n            return _this.openPageWorkflowMenu();\r\n        });\r\n        this.crossFrameEventService.subscribe(EVENT_PERSPECTIVE_CHANGED, function () {\r\n            return _this.openPageWorkflowMenu();\r\n        });\r\n        this.workflowTasksPollingService.addSubscriber(function (tasks, pagination) {\r\n            var totalNumberOfTasks = pagination.totalCount || 0;\r\n            _this.updateWorkflowTasksCount(totalNumberOfTasks);\r\n        }, true);\r\n    }\r\n    /**\r\n     * Fetch workflow search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params\r\n     * @param queryParams.pageSize number of items in the page\r\n     * @param queryParams.currentPage current page number\r\n     * @param queryParams.attachments comma separated list of attachment id\r\n     * @param queryParams.status comma separated list of workflow status\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getWorkflows = function (queryParams) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var workflowList;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.workflowRESTService.get(queryParams)];\r\n                    case 1:\r\n                        workflowList = _a.sent();\r\n                        return [2 /*return*/, workflowList.workflows];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetch workflow templates search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params.\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow template search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getWorkflowTemplates = function (queryParams) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var workflowTemplateList;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.workflowTemplateRESTService.get(queryParams)];\r\n                    case 1:\r\n                        workflowTemplateList = _a.sent();\r\n                        return [2 /*return*/, workflowTemplateList.templates];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetch all actions for a given workflow code.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getAllActionsForWorkflowCode = function (workflowCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var workflow;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.workflowActionsRESTService.get({\r\n                            workflowCode: workflowCode\r\n                        })];\r\n                    case 1:\r\n                        workflow = _a.sent();\r\n                        return [2 /*return*/, workflow.actions];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Cancels the workflow. Shows the confirmation message before sending the request.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.cancelWorflow = function (workflow) {\r\n        this.workflowOperationsRESTService = this.restServiceFactory.get(this.resourceWorkflowOperationsURI.replace(':workflowCode', workflow.workflowCode));\r\n        return this.workflowOperationsRESTService.save({\r\n            operation: WorkflowOperations.CANCEL\r\n        });\r\n    };\r\n    /**\r\n     * Returns a workflow template using its code.\r\n     *\r\n     * @returns A promise that resolves with the workflow template result, if the request is successful. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getWorkflowTemplateByCode = function (code) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var workflowTemplates, workflow;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getWorkflowTemplates({})];\r\n                    case 1:\r\n                        workflowTemplates = _a.sent();\r\n                        workflow = workflowTemplates.find(function (wf) { return wf.code === code; });\r\n                        return [2 /*return*/, workflow];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method determines whether the current catalog version (the one in the current experience) has workflows\r\n     * enabled. A catalog version has workflows enabled if it has at least one workflow template assigned to it.\r\n     *\r\n     * @returns A promise that resolves to a boolean. It will be true, if the workflow is\r\n     * enabled for the current catalog version. False, otherwise.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.areWorkflowsEnabledOnCurrentCatalogVersion = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var workflowTemplates;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getWorkflowTemplates({})];\r\n                    case 1:\r\n                        workflowTemplates = _a.sent();\r\n                        return [2 /*return*/, workflowTemplates && workflowTemplates.length > 0];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetch an active workflow for a page uuid.\r\n     *\r\n     * @returns A promise that resolves with the workflow object\r\n     * or null, if the request is sucessful and there is no active workflow for provided page uuid.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getActiveWorkflowForPageUuid = function (pageUuid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var workflows;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getWorkflows({\r\n                            pageSize: 1,\r\n                            currentPage: 0,\r\n                            attachment: pageUuid,\r\n                            statuses: WorkflowStatus.RUNNING + ',' + WorkflowStatus.PAUSED\r\n                        })];\r\n                    case 1:\r\n                        workflows = _a.sent();\r\n                        return [2 /*return*/, workflows[0] === undefined ? null : workflows[0]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Verifies whether the page is in a workflow or not.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with boolean value.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.isPageInWorkflow = function (page) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getActiveWorkflowForPageUuid(page.uuid)];\r\n                    case 1: return [2 /*return*/, !!(_a.sent())];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Verifies whether the use is a participant of a current active action.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a boolean. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.isUserParticipanInActiveAction = function (workflowCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var activeActions;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getActiveActionsForWorkflowCode(workflowCode)];\r\n                    case 1:\r\n                        activeActions = _a.sent();\r\n                        return [2 /*return*/, activeActions.length > 0];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetch all active actions for a given workflow code and for the current user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of active actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getActiveActionsForWorkflowCode = function (workflowCode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var actions;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getAllActionsForWorkflowCode(workflowCode)];\r\n                    case 1:\r\n                        actions = _a.sent();\r\n                        return [2 /*return*/, actions.filter(function (action) {\r\n                                return action.isCurrentUserParticipant &&\r\n                                    (WorkflowActionStatus.IN_PROGRESS === action.status.toLowerCase() ||\r\n                                        WorkflowActionStatus.PAUSED === action.status.toLowerCase());\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetch a page of comments for a given workflow action and some pageable data.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available comments for a given workflow and workflow action. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getCommentsForWorkflowAction = function (workflowCode, workflowActionCode, payload) {\r\n        this.workflowActionCommentsRESTService = this.restServiceFactory.get(this.resourceWorkflowActionCommentsURI\r\n            .replace(':workflowCode', workflowCode)\r\n            .replace(':actionCode', workflowActionCode));\r\n        return this.workflowActionCommentsRESTService.page(payload);\r\n    };\r\n    /**\r\n     * Fetches a page of workflow inbox tasks active for a given user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a page of workflow inbox tasks for a given user. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getWorkflowInboxTasks = function (payload) {\r\n        return this.workflowInboxTasksRESTService.page(payload);\r\n    };\r\n    /** The total number of active workflow tasks. */\r\n    /* @ngInject */ WorkflowService.prototype.getTotalNumberOfActiveWorkflowTasks = function () {\r\n        return this.workflowTasksCountSubject.asObservable();\r\n    };\r\n    /* @ngInject */ WorkflowService.prototype.updateWorkflowTasksCount = function (count) {\r\n        this.workflowTasksCountSubject.next(count);\r\n    };\r\n    /**\r\n     * Returns information about whether each item is editable or not. It also returns a workflow code where item is editable.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a list of objects where each object\r\n     * contains information about whether each item is editable or not. If the request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getWorkflowEditableItems = function (itemUids) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.workflowEditableItemsRESTService.get({\r\n                            itemUids: itemUids\r\n                        })];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        return [2 /*return*/, data.editableItems];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns a resource uri for workflows.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getResourceWorkflowURI = function () {\r\n        return this.resourceWorkflowURI;\r\n    };\r\n    /**\r\n     * Returns a resource uri for workflow operations.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.getResourceWorkflowOperationsURI = function () {\r\n        return this.resourceWorkflowOperationsURI;\r\n    };\r\n    /**\r\n     * Opens the page workflow menu. If the current perspective is not basic or advanced, it will switch to advanced perspective and then opens the menu.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.openPageWorkflowMenu = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data, activePerspective;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.sharedDataService.get(OPEN_PAGE_WORKFLOW_MENU)];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        if (!(data === OpenPageWorkflowMenu.Default)) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, this.perspectiveService.getActivePerspectiveKey()];\r\n                    case 2:\r\n                        activePerspective = _a.sent();\r\n                        if (!(activePerspective === CMSModesService.BASIC_PERSPECTIVE_KEY ||\r\n                            activePerspective === CMSModesService.ADVANCED_PERSPECTIVE_KEY)) return [3 /*break*/, 3];\r\n                        this.systemEventService.publish(CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, true);\r\n                        this.sharedDataService.remove(OPEN_PAGE_WORKFLOW_MENU);\r\n                        return [3 /*break*/, 5];\r\n                    case 3: return [4 /*yield*/, this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.SwitchPerspective)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        this.perspectiveService.switchTo(CMSModesService.ADVANCED_PERSPECTIVE_KEY);\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        if (data === OpenPageWorkflowMenu.SwitchPerspective) {\r\n                            this.systemEventService.publish(CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, true);\r\n                            this.sharedDataService.remove(OPEN_PAGE_WORKFLOW_MENU);\r\n                        }\r\n                        _a.label = 7;\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Loads the experience by building experience params from the given Workflow Task and then opens the page workflow menu.\r\n     * If the current experience is same as the experience params from the given workflow task, it just opens the page workflow menu.\r\n     * Otherwise, it loads the experience and then opens the page workflow menu.\r\n     */\r\n    /* @ngInject */ WorkflowService.prototype.loadExperienceAndOpenPageWorkflowMenu = function (task) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var defaultSite, experienceParams, isEqual;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!task) return [3 /*break*/, 7];\r\n                        return [4 /*yield*/, this.catalogService.getDefaultSiteForContentCatalog(task.attachments[0].catalogId)];\r\n                    case 1:\r\n                        defaultSite = _a.sent();\r\n                        experienceParams = {\r\n                            siteId: defaultSite.uid,\r\n                            catalogId: task.attachments[0].catalogId,\r\n                            catalogVersion: task.attachments[0].catalogVersion,\r\n                            pageId: task.attachments[0].pageUid\r\n                        };\r\n                        if (!!!windowUtils.getGatewayTargetFrame()) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, this.experienceService.compareWithCurrentExperience(experienceParams)];\r\n                    case 2:\r\n                        isEqual = _a.sent();\r\n                        if (!isEqual) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.Default)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        this.openPageWorkflowMenu();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        this._loadExperience(experienceParams);\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        this._loadExperience(experienceParams);\r\n                        _a.label = 7;\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ WorkflowService.prototype._loadExperience = function (experience) {\r\n        var _this = this;\r\n        this.experienceService.loadExperience(experience).then(function () {\r\n            _this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.Default);\r\n        });\r\n    };\r\n    __decorate([\r\n        Cached({\r\n            actions: [rarelyChangingContent],\r\n            tags: [\r\n                pageChangeEvictionTag,\r\n                perspectiveChangedEvictionTag,\r\n                workflowTasksMenuOpenedEvictionTag,\r\n                workflowCompletedEvictionTag,\r\n                workflowCreatedEvictionTag\r\n            ]\r\n        }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ WorkflowService.prototype, \"getWorkflows\", null);\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [pageChangeEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ WorkflowService.prototype, \"getWorkflowTemplates\", null);\r\n    __decorate([\r\n        Cached({\r\n            actions: [rarelyChangingContent],\r\n            tags: [\r\n                pageChangeEvictionTag,\r\n                workflowTasksMenuOpenedEvictionTag,\r\n                workflowCompletedEvictionTag,\r\n                workflowCreatedEvictionTag\r\n            ]\r\n        }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ WorkflowService.prototype, \"getAllActionsForWorkflowCode\", null);\r\n    /* @ngInject */ WorkflowService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n            CrossFrameEventService,\r\n            SystemEventService,\r\n            ISharedDataService,\r\n            IPerspectiveService,\r\n            ICatalogService,\r\n            IExperienceService,\r\n            WorkflowTasksPollingService])\r\n    ], /* @ngInject */ WorkflowService);\r\n    return /* @ngInject */ WorkflowService;\r\n}());\r\nexport { /* @ngInject */ WorkflowService };\r\n//# sourceMappingURL=WorkflowService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/workflow/services/WorkflowTasksPollingService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/workflow/constants.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/workflow/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"WorkflowService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/workflow/services/WorkflowService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/workflow/services/WorkflowService.d.ts","writeByteOrderMark":false,"text":"import { ICMSPage } from 'cmscommons';\r\nimport { Observable } from 'rxjs';\r\nimport { CrossFrameEventService, ICatalogService, IExperienceService, IPerspectiveService, IRestServiceFactory, ISharedDataService, Page, Pageable, SearchParams, SystemEventService } from 'smarteditcommons';\r\nimport { WorkflowTasksPollingService } from '../../workflow/services/WorkflowTasksPollingService';\r\nimport { Workflow, WorkflowAction, WorkflowActionComment, WorkflowEditableItem, WorkflowTask, WorkflowTemplate } from '../dtos';\r\nexport declare enum OpenPageWorkflowMenu {\r\n    Default = \"Default\",\r\n    SwitchPerspective = \"SwitchPerspective\"\r\n}\r\nexport interface WorkflowActionCommentPage extends Page<WorkflowActionComment> {\r\n    comments: WorkflowActionComment[];\r\n}\r\nexport interface WorkflowTaskPage extends Page<WorkflowTask> {\r\n    tasks: WorkflowTask[];\r\n}\r\n/**\r\n * This service is used to manage workflows.\r\n */\r\nexport declare class WorkflowService {\r\n    private restServiceFactory;\r\n    private crossFrameEventService;\r\n    private systemEventService;\r\n    private sharedDataService;\r\n    private perspectiveService;\r\n    private catalogService;\r\n    private experienceService;\r\n    private workflowTasksPollingService;\r\n    private resourceWorkflowURI;\r\n    private resourceWorkflowOperationsURI;\r\n    private resourceWorkflowTemplateURI;\r\n    private resourceWorkflowActionsURI;\r\n    private resourceWorkflowActionCommentsURI;\r\n    private resourceWorkflowEditableItemsURI;\r\n    private resourceWorkflowInboxTasksURI;\r\n    private workflowRESTService;\r\n    private workflowActionsRESTService;\r\n    private workflowOperationsRESTService;\r\n    private workflowTemplateRESTService;\r\n    private workflowActionCommentsRESTService;\r\n    private workflowEditableItemsRESTService;\r\n    private workflowInboxTasksRESTService;\r\n    private workflowTasksCountSubject;\r\n    constructor(restServiceFactory: IRestServiceFactory, crossFrameEventService: CrossFrameEventService, systemEventService: SystemEventService, sharedDataService: ISharedDataService, perspectiveService: IPerspectiveService, catalogService: ICatalogService, experienceService: IExperienceService, workflowTasksPollingService: WorkflowTasksPollingService);\r\n    /**\r\n     * Fetch workflow search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params\r\n     * @param queryParams.pageSize number of items in the page\r\n     * @param queryParams.currentPage current page number\r\n     * @param queryParams.attachments comma separated list of attachment id\r\n     * @param queryParams.status comma separated list of workflow status\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflows(queryParams: SearchParams): Promise<Workflow[]>;\r\n    /**\r\n     * Fetch workflow templates search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params.\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow template search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowTemplates(queryParams: SearchParams): Promise<WorkflowTemplate[]>;\r\n    /**\r\n     * Fetch all actions for a given workflow code.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getAllActionsForWorkflowCode(workflowCode: string): Promise<WorkflowAction[]>;\r\n    /**\r\n     * Cancels the workflow. Shows the confirmation message before sending the request.\r\n     */\r\n    cancelWorflow(workflow: Workflow): Promise<Workflow>;\r\n    /**\r\n     * Returns a workflow template using its code.\r\n     *\r\n     * @returns A promise that resolves with the workflow template result, if the request is successful. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowTemplateByCode(code: string): Promise<WorkflowTemplate>;\r\n    /**\r\n     * This method determines whether the current catalog version (the one in the current experience) has workflows\r\n     * enabled. A catalog version has workflows enabled if it has at least one workflow template assigned to it.\r\n     *\r\n     * @returns A promise that resolves to a boolean. It will be true, if the workflow is\r\n     * enabled for the current catalog version. False, otherwise.\r\n     */\r\n    areWorkflowsEnabledOnCurrentCatalogVersion(): Promise<boolean>;\r\n    /**\r\n     * Fetch an active workflow for a page uuid.\r\n     *\r\n     * @returns A promise that resolves with the workflow object\r\n     * or null, if the request is sucessful and there is no active workflow for provided page uuid.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    getActiveWorkflowForPageUuid(pageUuid: string): Promise<Workflow>;\r\n    /**\r\n     * Verifies whether the page is in a workflow or not.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with boolean value.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    isPageInWorkflow(page: ICMSPage): Promise<boolean>;\r\n    /**\r\n     * Verifies whether the use is a participant of a current active action.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a boolean. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    isUserParticipanInActiveAction(workflowCode: string): Promise<boolean>;\r\n    /**\r\n     * Fetch all active actions for a given workflow code and for the current user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of active actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getActiveActionsForWorkflowCode(workflowCode: string): Promise<WorkflowAction[]>;\r\n    /**\r\n     * Fetch a page of comments for a given workflow action and some pageable data.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available comments for a given workflow and workflow action. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getCommentsForWorkflowAction(workflowCode: string, workflowActionCode: string, payload: Pageable): Promise<WorkflowActionCommentPage>;\r\n    /**\r\n     * Fetches a page of workflow inbox tasks active for a given user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a page of workflow inbox tasks for a given user. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowInboxTasks(payload: Pageable): Promise<WorkflowTaskPage>;\r\n    /** The total number of active workflow tasks. */\r\n    getTotalNumberOfActiveWorkflowTasks(): Observable<number>;\r\n    updateWorkflowTasksCount(count: number): void;\r\n    /**\r\n     * Returns information about whether each item is editable or not. It also returns a workflow code where item is editable.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a list of objects where each object\r\n     * contains information about whether each item is editable or not. If the request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowEditableItems(itemUids: string[]): Promise<WorkflowEditableItem[]>;\r\n    /**\r\n     * Returns a resource uri for workflows.\r\n     */\r\n    getResourceWorkflowURI(): string;\r\n    /**\r\n     * Returns a resource uri for workflow operations.\r\n     */\r\n    getResourceWorkflowOperationsURI(): string;\r\n    /**\r\n     * Opens the page workflow menu. If the current perspective is not basic or advanced, it will switch to advanced perspective and then opens the menu.\r\n     */\r\n    openPageWorkflowMenu(): Promise<void>;\r\n    /**\r\n     * Loads the experience by building experience params from the given Workflow Task and then opens the page workflow menu.\r\n     * If the current experience is same as the experience params from the given workflow task, it just opens the page workflow menu.\r\n     * Otherwise, it loads the experience and then opens the page workflow menu.\r\n     */\r\n    loadExperienceAndOpenPageWorkflowMenu(task: WorkflowTask): Promise<void>;\r\n    private _loadExperience;\r\n}\r\n"}}
