{"code":"import { __decorate, __extends, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject, Injector } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { rarelyChangingContent, BrowserService, Cached, EVENT_SERVICE, IStorageService, LanguageService as SmartutilsLanguageService, LogService, LANGUAGE_SERVICE_CONSTANTS, PromiseUtils, RestServiceFactory } from '@smart/utils';\r\nimport { SeDowngradeService } from '../../di';\r\nvar /* @ngInject */ LanguageService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ LanguageService, _super);\r\n    function /* @ngInject */ LanguageService(logService, translateService, promiseUtils, eventService, browserService, storageService, injector, languageServiceConstants) {\r\n        var _this = _super.call(this, logService, translateService, promiseUtils, eventService, browserService, storageService, injector, languageServiceConstants) || this;\r\n        _this.logService = logService;\r\n        _this.translateService = translateService;\r\n        _this.promiseUtils = promiseUtils;\r\n        _this.eventService = eventService;\r\n        _this.browserService = browserService;\r\n        _this.storageService = storageService;\r\n        _this.injector = injector;\r\n        _this.languageServiceConstants = languageServiceConstants;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Fetches a list of language descriptors for the specified storefront site UID.\r\n     * The object containing the list of sites is fetched using REST calls to the cmswebservices languages API.\r\n     */\r\n    /* @ngInject */ LanguageService.prototype.getLanguagesForSite = function (siteUID) {\r\n        var _this = this;\r\n        return this.languageRestService\r\n            .get({\r\n            siteUID: siteUID\r\n        })\r\n            .then(function (languagesList) { return languagesList.languages; }, function (error) {\r\n            _this.logService.error('LanguageService.getLanguagesForSite() - Error loading languages');\r\n            return Promise.reject(error);\r\n        });\r\n    };\r\n    Object.defineProperty(/* @ngInject */ LanguageService.prototype, \"languageRestService\", {\r\n        get: function () {\r\n            return this.injector\r\n                .get(RestServiceFactory)\r\n                .get(this.languageServiceConstants.LANGUAGE_RESOURCE_URI);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ LanguageService.prototype, \"getLanguagesForSite\", null);\r\n    /* @ngInject */ LanguageService = __decorate([\r\n        SeDowngradeService(),\r\n        __param(3, Inject(EVENT_SERVICE)),\r\n        __param(7, Inject(LANGUAGE_SERVICE_CONSTANTS)),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            TranslateService,\r\n            PromiseUtils, Object, BrowserService,\r\n            IStorageService,\r\n            Injector, Object])\r\n    ], /* @ngInject */ LanguageService);\r\n    return /* @ngInject */ LanguageService;\r\n}(SmartutilsLanguageService));\r\nexport { /* @ngInject */ LanguageService };\r\n//# sourceMappingURL=LanguageService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate/core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"LanguageService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/language/LanguageService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EACH,qBAAqB,EACrB,cAAc,EACd,MAAM,EACN,aAAa,EAKb,eAAe,EACf,eAAe,IAAI,yBAAyB,EAC5C,UAAU,EACV,0BAA0B,EAC1B,YAAY,EACZ,kBAAkB,EACrB,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAG9C;IAAqC,mDAAyB;IAC1D,yCACc,UAAsB,EACtB,gBAAkC,EAClC,YAA0B,EACH,YAA2B,EAClD,cAA8B,EAC9B,cAA+B,EAC/B,QAAkB,EAElB,wBAAmD;QATjE,YAWI,kBACI,UAAU,EACV,gBAAgB,EAChB,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,cAAc,EACd,QAAQ,EACR,wBAAwB,CAC3B,SACJ;QApBa,gBAAU,GAAV,UAAU,CAAY;QACtB,sBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,kBAAY,GAAZ,YAAY,CAAc;QACH,kBAAY,GAAZ,YAAY,CAAe;QAClD,oBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAc,GAAd,cAAc,CAAiB;QAC/B,cAAQ,GAAR,QAAQ,CAAU;QAElB,8BAAwB,GAAxB,wBAAwB,CAA2B;;IAYjE,CAAC;IACD;;;OAGG;IAEH,6DAAmB,GAAnB,UAAoB,OAAe;QADnC,iBAeC;QAbG,OAAO,IAAI,CAAC,mBAAmB;aAC1B,GAAG,CAAC;YACD,OAAO,SAAA;SACV,CAAC;aACD,IAAI,CACD,UAAC,aAAa,IAAK,OAAA,aAAa,CAAC,SAAS,EAAvB,CAAuB,EAC1C,UAAC,KAAU;YACP,KAAI,CAAC,UAAU,CAAC,KAAK,CACjB,iEAAiE,CACpE,CAAC;YACF,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CACJ,CAAC;IACV,CAAC;IAED,sBAAc,gEAAmB;aAAjC;YACI,OAAO,IAAI,CAAC,QAAQ;iBACf,GAAG,CAAqB,kBAAkB,CAAC;iBAC3C,GAAG,CAA6B,IAAI,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,CAAC;QAC9F,CAAC;;;OAAA;IApBD;QADC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC;;;;8EAe5C;IA1CL;QADC,kBAAkB,EAAE;QAMZ,WAAA,MAAM,CAAC,aAAa,CAAC,CAAA;QAIrB,WAAA,MAAM,CAAC,0BAA0B,CAAC,CAAA;yCAPb,UAAU;YACJ,gBAAgB;YACpB,YAAY,UAEV,cAAc;YACd,eAAe;YACrB,QAAQ;uCAyCnC;IAAD,sCAAC;CAAA,AAjDD,CAAqC,yBAAyB,GAiD7D\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/language/LanguageService.d.ts","writeByteOrderMark":false,"text":"import { Injector } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BrowserService, IEventService, ILanguage, ILanguageServiceConstants, IRestService, IStorageService, LanguageService as SmartutilsLanguageService, LogService, PromiseUtils } from '@smart/utils';\r\nexport declare class LanguageService extends SmartutilsLanguageService {\r\n    protected logService: LogService;\r\n    protected translateService: TranslateService;\r\n    protected promiseUtils: PromiseUtils;\r\n    protected eventService: IEventService;\r\n    protected browserService: BrowserService;\r\n    protected storageService: IStorageService;\r\n    protected injector: Injector;\r\n    protected languageServiceConstants: ILanguageServiceConstants;\r\n    constructor(logService: LogService, translateService: TranslateService, promiseUtils: PromiseUtils, eventService: IEventService, browserService: BrowserService, storageService: IStorageService, injector: Injector, languageServiceConstants: ILanguageServiceConstants);\r\n    /**\r\n     * Fetches a list of language descriptors for the specified storefront site UID.\r\n     * The object containing the list of sites is fetched using REST calls to the cmswebservices languages API.\r\n     */\r\n    getLanguagesForSite(siteUID: string): Promise<ILanguage[]>;\r\n    protected get languageRestService(): IRestService<{\r\n        languages: ILanguage[];\r\n    }>;\r\n}\r\n"}}
