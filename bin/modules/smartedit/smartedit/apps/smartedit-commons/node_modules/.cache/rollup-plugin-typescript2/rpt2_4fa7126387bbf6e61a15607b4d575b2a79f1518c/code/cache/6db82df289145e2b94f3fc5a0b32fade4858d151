{"code":"/**\r\n * **Deprecated since 2005, use {@link TreeDragAndDropEvent}.**\r\n *\r\n * A plain JSON object, representing the event triggered when dragging and dropping nodes in the {@link YtreeComponent}.\r\n *\r\n * @deprecated\r\n */\r\nvar YTreeDndEvent = /** @class */ (function () {\r\n    function YTreeDndEvent(\r\n    /**\r\n     * The node being dragged\r\n     */\r\n    sourceNode, \r\n    /**\r\n     * Array of siblings nodes to the location drop location\r\n     */\r\n    destinationNodes, \r\n    /**\r\n     * The index at which node was dropped amongst its siblings\r\n     */\r\n    position, \r\n    /**\r\n     * The  UI handle of the parent node of the source element\r\n     */\r\n    sourceParentHandle, \r\n    /**\r\n     * The UI handle of the targeted parent element\r\n     */\r\n    targetParentHandle) {\r\n        this.sourceNode = sourceNode;\r\n        this.destinationNodes = destinationNodes;\r\n        this.position = position;\r\n        this.sourceParentHandle = sourceParentHandle;\r\n        this.targetParentHandle = targetParentHandle;\r\n    }\r\n    return YTreeDndEvent;\r\n}());\r\nexport { YTreeDndEvent };\r\n//# sourceMappingURL=types.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/dropdown/dropdownMenu/IDropdownMenuItem.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/tree/types.ts\"],\"names\":[],\"mappings\":\"AAMA;;;;;;GAMG;AACH;IACI;IACI;;OAEG;IACI,UAAoB;IAC3B;;OAEG;IACI,gBAA0B;IACjC;;OAEG;IACI,QAAgB;IACvB;;OAEG;IACI,kBAAwB;IAC/B;;OAEG;IACI,kBAAwB;QAhBxB,eAAU,GAAV,UAAU,CAAU;QAIpB,qBAAgB,GAAhB,gBAAgB,CAAU;QAI1B,aAAQ,GAAR,QAAQ,CAAQ;QAIhB,uBAAkB,GAAlB,kBAAkB,CAAM;QAIxB,uBAAkB,GAAlB,kBAAkB,CAAM;IAChC,CAAC;IACR,oBAAC;AAAD,CAAC,AAvBD,IAuBC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/tree/types.d.ts","writeByteOrderMark":false,"text":"import * as angular from 'angular';\r\nimport { IDropdownMenuItem } from '../dropdown/dropdownMenu/IDropdownMenuItem';\r\n/**\r\n * **Deprecated since 2005, use {@link TreeDragAndDropEvent}.**\r\n *\r\n * A plain JSON object, representing the event triggered when dragging and dropping nodes in the {@link YtreeComponent}.\r\n *\r\n * @deprecated\r\n */\r\nexport declare class YTreeDndEvent {\r\n    /**\r\n     * The node being dragged\r\n     */\r\n    sourceNode: TreeNode;\r\n    /**\r\n     * Array of siblings nodes to the location drop location\r\n     */\r\n    destinationNodes: TreeNode;\r\n    /**\r\n     * The index at which node was dropped amongst its siblings\r\n     */\r\n    position: number;\r\n    /**\r\n     * The  UI handle of the parent node of the source element\r\n     */\r\n    sourceParentHandle?: any;\r\n    /**\r\n     * The UI handle of the targeted parent element\r\n     */\r\n    targetParentHandle?: any;\r\n    constructor(\r\n    /**\r\n     * The node being dragged\r\n     */\r\n    sourceNode: TreeNode, \r\n    /**\r\n     * Array of siblings nodes to the location drop location\r\n     */\r\n    destinationNodes: TreeNode, \r\n    /**\r\n     * The index at which node was dropped amongst its siblings\r\n     */\r\n    position: number, \r\n    /**\r\n     * The  UI handle of the parent node of the source element\r\n     */\r\n    sourceParentHandle?: any, \r\n    /**\r\n     * The UI handle of the targeted parent element\r\n     */\r\n    targetParentHandle?: any);\r\n}\r\n/**\r\n * **Deprecated since 2005, use {@link TreeDragAndDropOptions}.**\r\n *\r\n * A JSON object holding callbacks related to nodes drag and drop functionality in the {@link YtreeComponent}.\r\n * Each callback exposes the {@link YTreeDndEvent}.\r\n *\r\n * @deprecated\r\n */\r\nexport interface TreeDragOptions {\r\n    /**\r\n     * Callback function executed after the node is dropped.\r\n     */\r\n    onDropCallback: (event: YTreeDndEvent) => void;\r\n    /**\r\n     * Callback function executed before drop. Return true allows drop, false rejects, and an object {confirmDropI18nKey: 'key'} opens a confirmation modal.\r\n     */\r\n    beforeDropCallback: (event: YTreeDndEvent) => void;\r\n    /**\r\n     * Callback function executed when hovering over droppable slots, return true to allow, return false to block.\r\n     */\r\n    acceptDropCallback: (event: YTreeDndEvent) => void;\r\n    allowDropCallback: (event: YTreeDndEvent) => void;\r\n}\r\nexport interface ITreeService {\r\n    fetchChildren(parent: TreeNode): angular.IPromise<TreeNode[]>;\r\n    saveNode(parent: TreeNode): angular.IPromise<TreeNode>;\r\n    removeNode(node: TreeNode): angular.IPromise<void>;\r\n}\r\n/**\r\n * A plain JSON object, representing the node of a tree managed by the {@link YtreeComponent}.\r\n */\r\nexport interface TreeNode {\r\n    /**\r\n     * Boolean specifying whether the retrieved node has children. This is read only and ignored upon saving.\r\n     */\r\n    hasChildren: boolean;\r\n    /**\r\n     * The non localized node name. Required upon posting.\r\n     */\r\n    name: string;\r\n    parent: TreeNode;\r\n    /**\r\n     * The unique identifier of the parent node for the given catalog. Required upon posting.\r\n     */\r\n    parentUid: string;\r\n    position: number;\r\n    itemType: string;\r\n    /**\r\n     * The unique identifier of a node for the given catalog. Optional upon posting.\r\n     */\r\n    uid: string;\r\n    uuid: string;\r\n    nodes?: TreeNode[];\r\n    initiated?: boolean;\r\n    mouseHovered?: boolean;\r\n    isExpanded?: boolean;\r\n}\r\nexport interface TreeNgModel extends angular.INgModelController {\r\n    collapsed: boolean;\r\n    toggle: () => void;\r\n    $parentNodeScope: any;\r\n}\r\nexport interface ITreeDndOptions {\r\n    dragEnabled: boolean;\r\n    dragDelay: number;\r\n}\r\nexport interface TreeDndOptionsCallbacks {\r\n    dropped?: (event: any) => void;\r\n    beforeDrop?: (event: any) => void;\r\n    accept?: (sourceNodeScope: any, destNodesScope: any, destIndex: any) => void;\r\n}\r\nexport interface TreeConfiguration {\r\n    treeClass: string;\r\n    hiddenClass: string;\r\n    nodesClass: string;\r\n    nodeClass: string;\r\n    handleClass: string;\r\n    placeholderClass: string;\r\n    dragClass: string;\r\n    dragThreshold: number;\r\n    levelThreshold: number;\r\n    defaultCollapsed: boolean;\r\n    dragDelay: number;\r\n}\r\nexport interface TreeActions {\r\n    getDropdownItems(): IDropdownMenuItem[];\r\n    fetchData(nodeData: TreeNode): Promise<TreeNode>;\r\n    fetchData(treeService: ITreeService, nodeData: TreeNode): Promise<TreeNode>;\r\n    removeItem(handle: TreeNgModel): void;\r\n    removeItem(treeService: ITreeService, handle: TreeNgModel): void;\r\n    moveUp(handle: TreeNgModel): void;\r\n    moveUp(treeService: ITreeService, handle: TreeNgModel): void;\r\n    moveDown(treeService: ITreeService, handle: TreeNgModel): void;\r\n    moveDown(handle: TreeNgModel): void;\r\n    isMoveUpAllowed(treeService: ITreeService, handle: TreeNgModel): boolean;\r\n    isMoveUpAllowed(handle: TreeNgModel): boolean;\r\n    isMoveDownAllowed(treeService: ITreeService, handle: TreeNgModel): boolean;\r\n    isMoveDownAllowed(handle: TreeNgModel): boolean;\r\n    performUpdate(): void;\r\n    refreshList(): void;\r\n}\r\nexport interface NavigationNodeEntry {\r\n    id: string;\r\n    name: string;\r\n    itemType: string;\r\n}\r\nexport interface NavigationNode extends TreeNode {\r\n    id: string;\r\n    nodes: NavigationNode[];\r\n    entries?: NavigationNodeEntry[];\r\n    parent: NavigationNode;\r\n}\r\nexport interface TreeNodeWithLevel extends TreeNode {\r\n    level: number;\r\n    formattedLevel: string;\r\n}\r\n"}}
