{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { UpgradeModule } from '@angular/upgrade/static';\r\nimport { SeDowngradeService } from 'smarteditcommons/di';\r\n/**\r\n * Used to determine whether smartedit is running in a e2e (test) mode\r\n */\r\n/** @internal */\r\nvar /* @ngInject */ TestModeService = /** @class */ (function () {\r\n    function /* @ngInject */ TestModeService(upgrade) {\r\n        this.upgrade = upgrade;\r\n        this.TEST_KEY = 'e2eMode';\r\n    }\r\n    /* @ngInject */ TestModeService_1 = /* @ngInject */ TestModeService;\r\n    /**\r\n     * Returns true if smartedit is running in e2e (test) mode, otherwise false.\r\n     */\r\n    /* @ngInject */ TestModeService.prototype.isE2EMode = function () {\r\n        return this.isE2EModeLegacy() || this.isE2EModeNg();\r\n    };\r\n    /* @ngInject */ TestModeService.prototype.isE2EModeNg = function () {\r\n        try {\r\n            return this.upgrade.injector.get(/* @ngInject */ TestModeService_1.TEST_TOKEN);\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    /* @ngInject */ TestModeService.prototype.isE2EModeLegacy = function () {\r\n        return (this.upgrade.$injector &&\r\n            this.upgrade.$injector.has(this.TEST_KEY) &&\r\n            this.upgrade.$injector.get(this.TEST_KEY));\r\n    };\r\n    var /* @ngInject */ TestModeService_1;\r\n    // Constants\r\n    /* @ngInject */ TestModeService.TEST_TOKEN = new InjectionToken('TEST_KEY_TOKEN');\r\n    /* @ngInject */ TestModeService = /* @ngInject */ TestModeService_1 = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [UpgradeModule])\r\n    ], /* @ngInject */ TestModeService);\r\n    return /* @ngInject */ TestModeService;\r\n}());\r\nexport { /* @ngInject */ TestModeService };\r\n//# sourceMappingURL=TestModeService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/upgrade@8.2.14_d2ff5303d1bb22207cb4aaa9bb380a83/node_modules/@angular/upgrade/static.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"TestModeService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/TestModeService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAC/C,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAExD,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AAEzD;;GAEG;AACH,gBAAgB;AAEhB;IAQI,yCAAoB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;QAFzB,aAAQ,GAAW,SAAS,CAAC;IAED,CAAC;;IAE9C;;OAEG;IACI,mDAAS,GAAhB;QACI,OAAO,IAAI,CAAC,eAAe,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;IACxD,CAAC;IAEO,qDAAW,GAAnB;QACI,IAAI;YACA,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,iCAAe,CAAC,UAAU,CAAC,CAAC;SAChE;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAEO,yDAAe,GAAvB;QACI,OAAO,CACH,IAAI,CAAC,OAAO,CAAC,SAAS;YACtB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC5C,CAAC;IACN,CAAC;;IA9BD,YAAY;IACW,0CAAU,GAA4B,IAAI,cAAc,CAC3E,gBAAgB,CACnB,CAAC;IAJN;QADC,kBAAkB,EAAE;yCASY,aAAa;uCAwB7C;IAAD,sCAAC;CAAA,AAhCD,IAgCC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/TestModeService.d.ts","writeByteOrderMark":false,"text":"import { InjectionToken } from '@angular/core';\r\nimport { UpgradeModule } from '@angular/upgrade/static';\r\n/**\r\n * Used to determine whether smartedit is running in a e2e (test) mode\r\n */\r\n/** @internal */\r\nexport declare class TestModeService {\r\n    private upgrade;\r\n    static readonly TEST_TOKEN: InjectionToken<boolean>;\r\n    private readonly TEST_KEY;\r\n    constructor(upgrade: UpgradeModule);\r\n    /**\r\n     * Returns true if smartedit is running in e2e (test) mode, otherwise false.\r\n     */\r\n    isE2EMode(): boolean;\r\n    private isE2EModeNg;\r\n    private isE2EModeLegacy;\r\n}\r\n"}}
