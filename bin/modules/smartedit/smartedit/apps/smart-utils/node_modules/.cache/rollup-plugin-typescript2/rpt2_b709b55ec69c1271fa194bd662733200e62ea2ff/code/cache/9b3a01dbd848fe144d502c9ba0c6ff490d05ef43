{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport * as lodash from 'lodash';\r\nimport { from } from 'rxjs';\r\nimport { PromiseUtils } from '../../utils';\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:httpErrorInterceptorService\r\n *\r\n * @description\r\n * The httpErrorInterceptorService provides the functionality to add custom HTTP error interceptors.\r\n * An interceptor can be an {Object} or an Angular Factory and must be represented by a pair of functions:\r\n * - predicate(request, response) {Function} that must return true if the response is associated to the interceptor. Important: The predicate must be designed to fulfill a specific function. It must not be defined for generic use.\r\n * - responseError(request, response) {Function} function called if the current response error matches the predicate. It must return a {Promise} with the resolved or rejected response.\r\n *\r\n * Each time an HTTP request fails, the service iterates through all registered interceptors. It sequentially calls the responseError function for all interceptors that have a predicate returning true for the current response error. If an interceptor modifies the response, the next interceptor that is called will have the modified response.\r\n * The last interceptor added to the service will be the first interceptor called. This makes it possible to override default interceptors.\r\n * If an interceptor resolves the response, the service service stops the iteration.\r\n */\r\nvar HttpErrorInterceptorService = /** @class */ (function () {\r\n    function HttpErrorInterceptorService(injector, promiseUtils) {\r\n        this.injector = injector;\r\n        this.promiseUtils = promiseUtils;\r\n        this._errorInterceptors = [];\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:httpErrorInterceptorService#addInterceptor\r\n     * @methodOf @smartutils.services:httpErrorInterceptorService\r\n     *\r\n     * @description\r\n     * Add a new error interceptor\r\n     *\r\n     * @param {Object|String} interceptor The interceptor {Object} or angular Factory\r\n     *\r\n     * @returns {Function} Function to call to unregister the interceptor from the service\r\n     *\r\n     * @example\r\n     * ```js\r\n     *      // Add a new interceptor with an instance of IHttpErrorInterceptor:\r\n     *      var unregisterCustomInterceptor = httpErrorInterceptorService.addInterceptor({\r\n     *          predicate: function(request, response) {\r\n     *              return response.status === 400;\r\n     *          },\r\n     *          responseError: function(request, response) {\r\n     *              alertService.showDanger({\r\n     *                  message: response.message\r\n     *              });\r\n     *              return Promise.reject(response);// FIXME: update doc\r\n     *          }\r\n     *      });\r\n     *\r\n     *      // Add an interceptor with a class of IHttpErrorInterceptor:\r\n     *      var unregisterCustomInterceptor = httpErrorInterceptorService.addInterceptor(CustomErrorInterceptor);\r\n     *\r\n     *      // Unregister the interceptor:\r\n     *      unregisterCustomInterceptor();\r\n     * ```\r\n     */\r\n    HttpErrorInterceptorService.prototype.addInterceptors = function (interceptorClasses) {\r\n        var _this = this;\r\n        interceptorClasses.forEach(function (InterceptorClass) {\r\n            _this.addInterceptor(InterceptorClass);\r\n        });\r\n    };\r\n    HttpErrorInterceptorService.prototype.addInterceptor = function (_interceptor) {\r\n        var _this = this;\r\n        var interceptor;\r\n        if (_interceptor.predicate ||\r\n            _interceptor.responseError) {\r\n            interceptor = _interceptor;\r\n        }\r\n        else {\r\n            interceptor = this.injector.get(_interceptor);\r\n        }\r\n        this._validateInterceptor(interceptor);\r\n        this._errorInterceptors.unshift(interceptor);\r\n        return function () {\r\n            _this._errorInterceptors.splice(_this._errorInterceptors.indexOf(interceptor), 1);\r\n        };\r\n    };\r\n    HttpErrorInterceptorService.prototype.responseError = function (request, response) {\r\n        var matchingErrorInterceptors = this._errorInterceptors.filter(function (errorInterceptor) { return errorInterceptor.predicate(request, response) === true; });\r\n        var _interceptorsDeferred = this.promiseUtils.defer();\r\n        if (matchingErrorInterceptors.length) {\r\n            this._iterateErrorInterceptors(request.clone(), lodash.cloneDeep(response), matchingErrorInterceptors, _interceptorsDeferred);\r\n        }\r\n        else {\r\n            _interceptorsDeferred.reject(response);\r\n        }\r\n        return from(_interceptorsDeferred.promise);\r\n    };\r\n    HttpErrorInterceptorService.prototype._iterateErrorInterceptors = function (request, response, interceptors, _interceptorsDeferred, idx) {\r\n        if (idx === void 0) { idx = 0; }\r\n        if (idx === interceptors.length) {\r\n            _interceptorsDeferred.reject(response);\r\n        }\r\n        else {\r\n            var iterateFn_1 = this._iterateErrorInterceptors.bind(this);\r\n            // FIXME: fully convert this part to Observable chaining\r\n            Promise.resolve(interceptors[idx].responseError(request, response)).then(function (interceptedResponse) {\r\n                _interceptorsDeferred.resolve(interceptedResponse);\r\n            }, function (interceptedResponse) {\r\n                iterateFn_1(request, interceptedResponse, interceptors, _interceptorsDeferred, ++idx);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Validate if the provided interceptor respects the Interface (predicate and responseError functions are mandatory).\r\n     * @param {Object|String} interceptor The interceptor {Object} or angular Factory\r\n     */\r\n    HttpErrorInterceptorService.prototype._validateInterceptor = function (interceptor) {\r\n        if (!interceptor.predicate || typeof interceptor.predicate !== 'function') {\r\n            throw new Error('httpErrorInterceptorService.addInterceptor.error.interceptor.has.no.predicate');\r\n        }\r\n        if (!interceptor.responseError || typeof interceptor.responseError !== 'function') {\r\n            throw new Error('httpErrorInterceptorService.addInterceptor.error.interceptor.has.no.responseError');\r\n        }\r\n    };\r\n    HttpErrorInterceptorService = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [Injector, PromiseUtils])\r\n    ], HttpErrorInterceptorService);\r\n    return HttpErrorInterceptorService;\r\n}());\r\nexport { HttpErrorInterceptorService };\r\n//# sourceMappingURL=http-error-interceptor.service.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/common@8.2.14_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@angular/common/http.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/types/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/interceptors/i-http-error.interceptor.ts"],"map":"{\"version\":3,\"file\":\"http-error-interceptor.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interceptors/http-error-interceptor.service.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/interceptors/http-error-interceptor.service.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { HttpErrorResponse, HttpEvent, HttpRequest } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Class } from '../../types';\r\nimport { PromiseUtils } from '../../utils';\r\nimport { IHttpErrorInterceptor } from './i-http-error.interceptor';\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:httpErrorInterceptorService\r\n *\r\n * @description\r\n * The httpErrorInterceptorService provides the functionality to add custom HTTP error interceptors.\r\n * An interceptor can be an {Object} or an Angular Factory and must be represented by a pair of functions:\r\n * - predicate(request, response) {Function} that must return true if the response is associated to the interceptor. Important: The predicate must be designed to fulfill a specific function. It must not be defined for generic use.\r\n * - responseError(request, response) {Function} function called if the current response error matches the predicate. It must return a {Promise} with the resolved or rejected response.\r\n *\r\n * Each time an HTTP request fails, the service iterates through all registered interceptors. It sequentially calls the responseError function for all interceptors that have a predicate returning true for the current response error. If an interceptor modifies the response, the next interceptor that is called will have the modified response.\r\n * The last interceptor added to the service will be the first interceptor called. This makes it possible to override default interceptors.\r\n * If an interceptor resolves the response, the service service stops the iteration.\r\n */\r\nexport declare class HttpErrorInterceptorService {\r\n    private injector;\r\n    private promiseUtils;\r\n    private _errorInterceptors;\r\n    constructor(injector: Injector, promiseUtils: PromiseUtils);\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:httpErrorInterceptorService#addInterceptor\r\n     * @methodOf @smartutils.services:httpErrorInterceptorService\r\n     *\r\n     * @description\r\n     * Add a new error interceptor\r\n     *\r\n     * @param {Object|String} interceptor The interceptor {Object} or angular Factory\r\n     *\r\n     * @returns {Function} Function to call to unregister the interceptor from the service\r\n     *\r\n     * @example\r\n     * ```js\r\n     *      // Add a new interceptor with an instance of IHttpErrorInterceptor:\r\n     *      var unregisterCustomInterceptor = httpErrorInterceptorService.addInterceptor({\r\n     *          predicate: function(request, response) {\r\n     *              return response.status === 400;\r\n     *          },\r\n     *          responseError: function(request, response) {\r\n     *              alertService.showDanger({\r\n     *                  message: response.message\r\n     *              });\r\n     *              return Promise.reject(response);// FIXME: update doc\r\n     *          }\r\n     *      });\r\n     *\r\n     *      // Add an interceptor with a class of IHttpErrorInterceptor:\r\n     *      var unregisterCustomInterceptor = httpErrorInterceptorService.addInterceptor(CustomErrorInterceptor);\r\n     *\r\n     *      // Unregister the interceptor:\r\n     *      unregisterCustomInterceptor();\r\n     * ```\r\n     */\r\n    addInterceptors(interceptorClasses: (Class<IHttpErrorInterceptor> | IHttpErrorInterceptor)[]): void;\r\n    addInterceptor(_interceptor: Class<IHttpErrorInterceptor> | IHttpErrorInterceptor): () => void;\r\n    responseError<T>(request: HttpRequest<T>, response: HttpErrorResponse): Observable<HttpEvent<T>>;\r\n    private _iterateErrorInterceptors;\r\n    /**\r\n     * @ignore\r\n     * Validate if the provided interceptor respects the Interface (predicate and responseError functions are mandatory).\r\n     * @param {Object|String} interceptor The interceptor {Object} or angular Factory\r\n     */\r\n    private _validateInterceptor;\r\n}\r\n"}}
