{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { ISettingsService } from '../../interfaces';\r\nimport { promiseUtils } from '../../utils';\r\nimport { FileReaderService } from '../file-reader';\r\nvar FileMimeTypeService = /** @class */ (function () {\r\n    function FileMimeTypeService(fileReaderService, settingsService) {\r\n        this.fileReaderService = fileReaderService;\r\n        this.settingsService = settingsService;\r\n    }\r\n    FileMimeTypeService.prototype.isFileMimeTypeValid = function (file) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var _a, mimeTypesError, mimeTypes;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, promiseUtils.attempt(this.settingsService.getStringList('smartedit.validImageMimeTypeCodes'))];\r\n                    case 1:\r\n                        _a = _b.sent(), mimeTypesError = _a.error, mimeTypes = _a.data;\r\n                        if (mimeTypesError) {\r\n                            reject(false);\r\n                            return [2 /*return*/];\r\n                        }\r\n                        this.fileReaderService.read(file, {\r\n                            onLoadEnd: function (ev) {\r\n                                if (!_this.validateMimeTypeFromFile(ev.target.result, mimeTypes)) {\r\n                                    reject();\r\n                                    return;\r\n                                }\r\n                                resolve(true);\r\n                            },\r\n                            onError: function () {\r\n                                reject();\r\n                            }\r\n                        });\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    /**\r\n     *  Mimetype is valid when starting bytes of the file are matching the Mimetype byte pattern.\r\n     *  For example. 89 50 4E 47 is a png file, so if the first 4 bytes are 89504E47 it is recognized as a png file.\r\n     *\r\n     *  Read more on File Signatures and Image Type Pattern Matching\r\n     *  - https://en.wikipedia.org/wiki/List_of_file_signatures\r\n     *  - https://mimesniff.spec.whatwg.org/#image-type-pattern-matching-algorithm\r\n     */\r\n    FileMimeTypeService.prototype.validateMimeTypeFromFile = function (loadedFile, mimeTypes) {\r\n        var fileAsBytes = new Uint8Array(loadedFile).subarray(0, 8);\r\n        var header = fileAsBytes.reduce(function (head, byte) {\r\n            var byteAsStr = byte.toString(16);\r\n            if (byteAsStr.length === 1) {\r\n                byteAsStr = '0' + byteAsStr;\r\n            }\r\n            head += byteAsStr;\r\n            return head;\r\n        }, '');\r\n        return mimeTypes.some(function (mimeTypeCode) { return header.toLowerCase().indexOf(mimeTypeCode.toLowerCase()) === 0; });\r\n    };\r\n    FileMimeTypeService = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [FileReaderService,\r\n            ISettingsService])\r\n    ], FileMimeTypeService);\r\n    return FileMimeTypeService;\r\n}());\r\nexport { FileMimeTypeService };\r\n//# sourceMappingURL=file-mime-type.service.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/interfaces/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/services/file-reader/index.ts"],"map":"{\"version\":3,\"file\":\"file-mime-type.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/file-mime-type/file-mime-type.service.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAGnD;IACI,6BACY,iBAAoC,EACpC,eAAiC;QADjC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,oBAAe,GAAf,eAAe,CAAkB;IAC1C,CAAC;IAEG,iDAAmB,GAA1B,UAA2B,IAAiB;QAA5C,iBAyBC;QAxBG,OAAO,IAAI,OAAO,CAAC,UAAO,OAAO,EAAE,MAAM;;;;;4BACc,qBAAM,YAAY,CAAC,OAAO,CACzE,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,mCAAmC,CAAC,CAC1E,EAAA;;wBAFK,KAA6C,SAElD,EAFc,cAAc,WAAA,EAAQ,SAAS,UAAA;wBAG9C,IAAI,cAAc,EAAE;4BAChB,MAAM,CAAC,KAAK,CAAC,CAAC;4BACd,sBAAO;yBACV;wBAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE;4BAC9B,SAAS,EAAE,UAAC,EAAE;gCACV,IACI,CAAC,KAAI,CAAC,wBAAwB,CAAC,EAAE,CAAC,MAAM,CAAC,MAAqB,EAAE,SAAS,CAAC,EAC5E;oCACE,MAAM,EAAE,CAAC;oCACT,OAAO;iCACV;gCACD,OAAO,CAAC,IAAI,CAAC,CAAC;4BAClB,CAAC;4BACD,OAAO,EAAE;gCACL,MAAM,EAAE,CAAC;4BACb,CAAC;yBACJ,CAAC,CAAC;;;;aACN,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACK,sDAAwB,GAAhC,UAAiC,UAAuB,EAAE,SAAmB;QACzE,IAAM,WAAW,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9D,IAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI;YACzC,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAClC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,SAAS,GAAG,GAAG,GAAG,SAAS,CAAC;aAC/B;YACD,IAAI,IAAI,SAAS,CAAC;YAClB,OAAO,IAAI,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,SAAS,CAAC,IAAI,CACjB,UAAC,YAAY,IAAK,OAAA,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,EAA9D,CAA8D,CACnF,CAAC;IACN,CAAC;IAvDQ,mBAAmB;QAD/B,UAAU,EAAE;yCAGsB,iBAAiB;YACnB,gBAAgB;OAHpC,mBAAmB,CAwD/B;IAAD,0BAAC;CAAA,AAxDD,IAwDC;SAxDY,mBAAmB\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/services/file-mime-type/file-mime-type.service.d.ts","writeByteOrderMark":false,"text":"import { ISettingsService } from '../../interfaces';\r\nimport { FileReaderService } from '../file-reader';\r\nexport declare class FileMimeTypeService {\r\n    private fileReaderService;\r\n    private settingsService;\r\n    constructor(fileReaderService: FileReaderService, settingsService: ISettingsService);\r\n    isFileMimeTypeValid(file: File | Blob): Promise<boolean>;\r\n    /**\r\n     *  Mimetype is valid when starting bytes of the file are matching the Mimetype byte pattern.\r\n     *  For example. 89 50 4E 47 is a png file, so if the first 4 bytes are 89504E47 it is recognized as a png file.\r\n     *\r\n     *  Read more on File Signatures and Image Type Pattern Matching\r\n     *  - https://en.wikipedia.org/wiki/List_of_file_signatures\r\n     *  - https://mimesniff.spec.whatwg.org/#image-type-pattern-matching-algorithm\r\n     */\r\n    private validateMimeTypeFromFile;\r\n}\r\n"}}
