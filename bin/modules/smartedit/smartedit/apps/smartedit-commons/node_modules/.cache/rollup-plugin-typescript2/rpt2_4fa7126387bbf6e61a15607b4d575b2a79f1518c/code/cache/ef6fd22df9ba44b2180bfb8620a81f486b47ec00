{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Directive, EventEmitter, Input, Output } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, finalize, tap } from 'rxjs/operators';\r\n/**\r\n * Directive solely responsible for handling the submitting of its current data state to\r\n * an onSave input method and notifying of success and failure.\r\n *\r\n * ### Example\r\n *\r\n *      <form\r\n *          [contentManager]=\"{onSave: editor.submit$}\"\r\n *          (onSuccess)=\"editor.onSuccess($event)\"\r\n *          (onError)=\"editor.onFailure($event)\"\r\n *      >\r\n *      </form>\r\n *\r\n * @param option object containing the onSave method of type (data: T) => Observable<T>\r\n * @param onSuccess outputs the successful result of onSave invocation\r\n * @param onError outputs the failing result of onSave invocation\r\n */\r\nvar ContentManager = /** @class */ (function () {\r\n    function ContentManager() {\r\n        /**\r\n         * Called when a saving is a success.\r\n         */\r\n        this.onSuccess = new EventEmitter();\r\n        /**\r\n         * Called when there is an error after saving.\r\n         */\r\n        this.onError = new EventEmitter();\r\n        /**\r\n         * Submitting state of the manager.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.submitting = false;\r\n    }\r\n    Object.defineProperty(ContentManager.prototype, \"option\", {\r\n        set: function (option) {\r\n            this._onSave = option.onSave;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ContentManager.prototype.save = function () {\r\n        var _this = this;\r\n        this.submitting = true;\r\n        return this._onSave().pipe(finalize(function () { return (_this.submitting = false); }), tap(function (content) {\r\n            _this.onSuccess.emit(content);\r\n        }), catchError(function (err) {\r\n            _this.onError.emit(err);\r\n            return throwError(err);\r\n        }));\r\n    };\r\n    __decorate([\r\n        Input('contentManager'),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], ContentManager.prototype, \"option\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", Object)\r\n    ], ContentManager.prototype, \"onSuccess\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", Object)\r\n    ], ContentManager.prototype, \"onError\", void 0);\r\n    ContentManager = __decorate([\r\n        Directive({\r\n            selector: '[contentManager]'\r\n        })\r\n    ], ContentManager);\r\n    return ContentManager;\r\n}());\r\nexport { ContentManager };\r\n//# sourceMappingURL=ContentManager.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts"],"map":"{\"version\":3,\"file\":\"ContentManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/genericEditor/components/ContentManager.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvE,OAAO,EAAE,UAAU,EAAc,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAE3D;;;;;;;;;;;;;;;;GAgBG;AAKH;IAAA;QAMI;;WAEG;QAEH,cAAS,GAAG,IAAI,YAAY,EAAK,CAAC;QAElC;;WAEG;QAEH,YAAO,GAAG,IAAI,YAAY,EAAO,CAAC;QAElC;;;;WAIG;QACH,eAAU,GAAG,KAAK,CAAC;IAoBvB,CAAC;IAzCG,sBAAI,kCAAM;aAAV,UAAW,MAAuC;YAC9C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;QACjC,CAAC;;;OAAA;IAyBD,6BAAI,GAAJ;QAAA,iBAaC;QAZG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CACtB,QAAQ,CAAC,cAAM,OAAA,CAAC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,EAAzB,CAAyB,CAAC,EACzC,GAAG,CAAC,UAAC,OAAO;YACR,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC,CAAC,EACF,UAAU,CAAC,UAAC,GAAG;YACX,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAxCD;QADC,KAAK,CAAC,gBAAgB,CAAC;;;gDAGvB;IAMD;QADC,MAAM,EAAE;;qDACyB;IAMlC;QADC,MAAM,EAAE;;mDACyB;IAhBzB,cAAc;QAH1B,SAAS,CAAC;YACP,QAAQ,EAAE,kBAAkB;SAC/B,CAAC;OACW,cAAc,CA2C1B;IAAD,qBAAC;CAAA,AA3CD,IA2CC;SA3CY,cAAc\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/genericEditor/components/ContentManager.d.ts","writeByteOrderMark":false,"text":"import { EventEmitter } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * Directive solely responsible for handling the submitting of its current data state to\r\n * an onSave input method and notifying of success and failure.\r\n *\r\n * ### Example\r\n *\r\n *      <form\r\n *          [contentManager]=\"{onSave: editor.submit$}\"\r\n *          (onSuccess)=\"editor.onSuccess($event)\"\r\n *          (onError)=\"editor.onFailure($event)\"\r\n *      >\r\n *      </form>\r\n *\r\n * @param option object containing the onSave method of type (data: T) => Observable<T>\r\n * @param onSuccess outputs the successful result of onSave invocation\r\n * @param onError outputs the failing result of onSave invocation\r\n */\r\nexport declare class ContentManager<T> {\r\n    set option(option: {\r\n        onSave: () => Observable<T>;\r\n    });\r\n    /**\r\n     * Called when a saving is a success.\r\n     */\r\n    onSuccess: EventEmitter<T>;\r\n    /**\r\n     * Called when there is an error after saving.\r\n     */\r\n    onError: EventEmitter<any>;\r\n    /**\r\n     * Submitting state of the manager.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    submitting: boolean;\r\n    /**\r\n     *  @internal\r\n     */\r\n    private _onSave;\r\n    save(): Observable<T>;\r\n}\r\n"}}
