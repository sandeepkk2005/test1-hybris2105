{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as angular from 'angular';\r\nimport { SeInjectable } from '../../di';\r\n/**\r\n * Contains some {@link YPopupOverlayDirective} helper functions for calculating positions and sizes on the DOM\r\n */\r\nvar /* @ngInject */ YPopupOverlayUtilsDOMCalculations = /** @class */ (function () {\r\n    function /* @ngInject */ YPopupOverlayUtilsDOMCalculations($window, $document) {\r\n        this.$window = $window;\r\n        this.$document = $document;\r\n    }\r\n    /**\r\n     * Modifies the input rectangle to be absolutely positioned horizontally in the viewport.<br />\r\n     * Does not modify vertical positioning.\r\n     */\r\n    /* @ngInject */ YPopupOverlayUtilsDOMCalculations.prototype.adjustHorizontalToBeInViewport = function (absPosition) {\r\n        // HORIZONTAL POSITION / SIZE\r\n        // if width of popup is wider then viewport, set it full width\r\n        if (absPosition.width >= this.$window.innerWidth) {\r\n            absPosition.left = 0;\r\n            absPosition.width = this.$window.innerWidth;\r\n        }\r\n        else {\r\n            var scrollWidth = this.getScrollBarWidth(); // maybe replace this with proper calculated value but im not sure if its worth the cpu cost\r\n            // var scrollWidth = getScrollBarWidth();\r\n            // if right edge of popup would be off the viewport on the right, then\r\n            // move it left until right edge of popup is on right side of viewport\r\n            if (absPosition.left - this.$window.pageXOffset + absPosition.width >=\r\n                this.$window.innerWidth - scrollWidth) {\r\n                absPosition.left = this.$window.innerWidth - absPosition.width - scrollWidth;\r\n            }\r\n            // if left edge is off the viewport to left, move to left edge\r\n            if (absPosition.left - this.$window.pageXOffset <= 0) {\r\n                absPosition.left = this.$window.pageXOffset;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calculates the preferred position of the overlay, based on the size and position of the anchor\r\n     * and the size of the overlay element\r\n     *\r\n     * ### Parameters\r\n     *\r\n     * `anchorBoundingClientRect` - A bounding rectangle representing the overlay's anchor\r\n     *\r\n     * `anchorBoundingClientRect.top` - The top of the anchor, absolutely positioned\r\n     *\r\n     * `anchorBoundingClientRect.right` - The right of the anchor, absolutely positioned\r\n     *\r\n     * `anchorBoundingClientRect.bottom` - The bottom of the anchor, absolutely positioned\r\n     *\r\n     * `anchorBoundingClientRect.left` - The left of the anchor, absolutely positioned\r\n     *\r\n     * `targetWidth` - The width of the overlay element\r\n     *\r\n     * `targetHeight` - The height of the overlay element\r\n     *\r\n     * `[targetValign='bottom']` - The preferred vertical alignment, either 'top' or 'bottom'\r\n     *\r\n     * `[targetHalign='right']` - The preferred horizontal alignment, either 'left' or 'right'\r\n     *\r\n     * @returns A new size and position for the overlay\r\n     */\r\n    /* @ngInject */ YPopupOverlayUtilsDOMCalculations.prototype.calculatePreferredPosition = function (anchorBoundingClientRect, targetWidth, targetHeight, targetValign, targetHalign) {\r\n        var scrollX = this.$window.pageXOffset;\r\n        var scrollY = this.$window.pageYOffset;\r\n        var position = {\r\n            width: targetWidth,\r\n            height: targetHeight,\r\n            top: 0,\r\n            left: 0\r\n        };\r\n        switch (targetValign) {\r\n            case 'top':\r\n                position.top = anchorBoundingClientRect.top + scrollY - targetHeight;\r\n                break;\r\n            case 'bottom':\r\n            /* falls through */\r\n            default:\r\n                position.top = anchorBoundingClientRect.bottom + scrollY;\r\n        }\r\n        switch (targetHalign) {\r\n            case 'left':\r\n                position.left = anchorBoundingClientRect.right + scrollX - targetWidth;\r\n                break;\r\n            case 'right':\r\n            /* falls through */\r\n            default:\r\n                position.left = anchorBoundingClientRect.left + scrollX;\r\n        }\r\n        return position;\r\n    };\r\n    /* @ngInject */ YPopupOverlayUtilsDOMCalculations.prototype.getScrollBarWidth = function () {\r\n        var isScrollHeightExceedingClientHeight = this.$document[0].body.scrollHeight > this.$document[0].body.clientHeight;\r\n        if (!isScrollHeightExceedingClientHeight) {\r\n            return 0;\r\n        }\r\n        var inner = this.$document[0].createElement('p');\r\n        var outer = this.$document[0].createElement('div');\r\n        inner.style.width = '100%';\r\n        inner.style.height = '200px';\r\n        outer.style.position = 'absolute';\r\n        outer.style.top = '0px';\r\n        outer.style.left = '0px';\r\n        outer.style.visibility = 'hidden';\r\n        outer.style.width = '200px';\r\n        outer.style.height = '150px';\r\n        outer.style.overflow = 'hidden';\r\n        outer.appendChild(inner);\r\n        this.$document[0].body.appendChild(outer);\r\n        var w1 = inner.offsetWidth;\r\n        var w2 = outer.clientWidth;\r\n        outer.style.overflow = 'scroll';\r\n        this.$document[0].body.removeChild(outer);\r\n        return w1 - w2;\r\n    };\r\n    /* @ngInject */ YPopupOverlayUtilsDOMCalculations = __decorate([\r\n        SeInjectable(),\r\n        __metadata(\"design:paramtypes\", [Object, Object])\r\n    ], /* @ngInject */ YPopupOverlayUtilsDOMCalculations);\r\n    return /* @ngInject */ YPopupOverlayUtilsDOMCalculations;\r\n}());\r\nexport { /* @ngInject */ YPopupOverlayUtilsDOMCalculations };\r\n//# sourceMappingURL=yPopupOverlayUtilsDOMCalculations.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"yPopupOverlayUtilsDOMCalculations.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/directives/yPopupOverlay/yPopupOverlayUtilsDOMCalculations.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/directives/yPopupOverlay/yPopupOverlayUtilsDOMCalculations.d.ts","writeByteOrderMark":false,"text":"import * as angular from 'angular';\r\n/**\r\n * A rectangle object representing the size and absolutely positioned location of the overlay.\r\n */\r\nexport interface YPopupOveryayPosition {\r\n    /** The width of the overlay element */\r\n    width: number;\r\n    height: number;\r\n    top: number;\r\n    /** The left side of the overlay element */\r\n    left: number;\r\n}\r\n/**\r\n * Contains some {@link YPopupOverlayDirective} helper functions for calculating positions and sizes on the DOM\r\n */\r\nexport declare class YPopupOverlayUtilsDOMCalculations {\r\n    private $window;\r\n    private $document;\r\n    constructor($window: angular.IWindowService, $document: angular.IDocumentService);\r\n    /**\r\n     * Modifies the input rectangle to be absolutely positioned horizontally in the viewport.<br />\r\n     * Does not modify vertical positioning.\r\n     */\r\n    adjustHorizontalToBeInViewport(absPosition: YPopupOveryayPosition): void;\r\n    /**\r\n     * Calculates the preferred position of the overlay, based on the size and position of the anchor\r\n     * and the size of the overlay element\r\n     *\r\n     * ### Parameters\r\n     *\r\n     * `anchorBoundingClientRect` - A bounding rectangle representing the overlay's anchor\r\n     *\r\n     * `anchorBoundingClientRect.top` - The top of the anchor, absolutely positioned\r\n     *\r\n     * `anchorBoundingClientRect.right` - The right of the anchor, absolutely positioned\r\n     *\r\n     * `anchorBoundingClientRect.bottom` - The bottom of the anchor, absolutely positioned\r\n     *\r\n     * `anchorBoundingClientRect.left` - The left of the anchor, absolutely positioned\r\n     *\r\n     * `targetWidth` - The width of the overlay element\r\n     *\r\n     * `targetHeight` - The height of the overlay element\r\n     *\r\n     * `[targetValign='bottom']` - The preferred vertical alignment, either 'top' or 'bottom'\r\n     *\r\n     * `[targetHalign='right']` - The preferred horizontal alignment, either 'left' or 'right'\r\n     *\r\n     * @returns A new size and position for the overlay\r\n     */\r\n    calculatePreferredPosition(anchorBoundingClientRect: ClientRect, targetWidth: number, targetHeight: number, targetValign: 'top' | 'bottom', targetHalign: 'left' | 'right'): YPopupOveryayPosition;\r\n    private getScrollBarWidth;\r\n}\r\n"}}
