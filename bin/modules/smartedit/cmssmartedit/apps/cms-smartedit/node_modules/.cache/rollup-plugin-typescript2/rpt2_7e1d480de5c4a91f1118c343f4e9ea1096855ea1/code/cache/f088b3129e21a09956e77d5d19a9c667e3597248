{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { COMPONENT_CREATED_EVENT, COMPONENT_REMOVED_EVENT, COMPONENT_UPDATED_EVENT, IPageContentSlotsComponentsRestService } from 'cmscommons';\r\nimport { ComponentHandlerService } from 'smartedit';\r\nimport { CrossFrameEventService, IPageInfoService, LogService, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * The slot visibility service provides methods to manage all backend calls and loads an internal\r\n * structure that provides the necessary data to the slot visibility button and slot visibility component.\r\n */\r\nvar /* @ngInject */ SlotVisibilityService = /** @class */ (function () {\r\n    function /* @ngInject */ SlotVisibilityService(crossFrameEventService, componentHandlerService, logService, pageInfoService, pageContentSlotsComponentsRestService) {\r\n        var _this = this;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.componentHandlerService = componentHandlerService;\r\n        this.logService = logService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.pageContentSlotsComponentsRestService = pageContentSlotsComponentsRestService;\r\n        this.crossFrameEventService.subscribe(COMPONENT_CREATED_EVENT, function () {\r\n            return _this.clearComponentsCache();\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_UPDATED_EVENT, function () {\r\n            return _this.clearComponentsCache();\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_REMOVED_EVENT, function () {\r\n            return _this.clearComponentsCache();\r\n        });\r\n    }\r\n    /**\r\n     * Returns the list of hidden components for a given slotId\r\n     *\r\n     * @param slotId the slot id\r\n     *\r\n     * @returns A promise that resolves to a list of hidden components for the slotId\r\n     */\r\n    /* @ngInject */ SlotVisibilityService.prototype.getHiddenComponents = function (slotId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var slots, filteredSlots;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getSlotToComponentsMap()];\r\n                    case 1:\r\n                        slots = _a.sent();\r\n                        filteredSlots = this.filterVisibleComponents(slots);\r\n                        return [2 /*return*/, filteredSlots[slotId] || []];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reloads and cache's the pagesContentSlotsComponents for the current page in context.\r\n     * this method can be called when ever a component is added or modified to the slot so that the pagesContentSlotsComponents is re-evaluated.\r\n     *\r\n     * @returns A promise that resolves to the contentSlot - Components [] map for the page in context.\r\n     */\r\n    /* @ngInject */ SlotVisibilityService.prototype.reloadSlotsInfo = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageUid, exception_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.pageInfoService.getPageUID()];\r\n                    case 1:\r\n                        pageUid = _a.sent();\r\n                        this.pageContentSlotsComponentsRestService.clearCache();\r\n                        return [2 /*return*/, this.pageContentSlotsComponentsRestService.getSlotsToComponentsMapForPageUid(pageUid)];\r\n                    case 2:\r\n                        exception_1 = _a.sent();\r\n                        this.logService.error('SlotVisibilityService::reloadSlotsInfo - failed call to pageInfoService.getPageUID');\r\n                        throw exception_1;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Function that filters the given SlotsToComponentsMap to return only those components that are hidden in the storefront.\r\n     * @param allSlotsToComponentsMap object containing slotId - components list.\r\n     *\r\n     * @return allSlotsToComponentsMap object containing slotId - components list.\r\n     */\r\n    /* @ngInject */ SlotVisibilityService.prototype.filterVisibleComponents = function (allSlotsToComponentsMap) {\r\n        var _this = this;\r\n        Object.keys(allSlotsToComponentsMap).forEach(function (slotId) {\r\n            var jQueryComponents = _this.componentHandlerService.getOriginalComponentsWithinSlot(slotId);\r\n            var componentsOnDOM = jQueryComponents\r\n                .get()\r\n                .map(function (component) { return _this.componentHandlerService.getId(component); });\r\n            var hiddenComponents = allSlotsToComponentsMap[slotId].filter(function (component) { return !componentsOnDOM.includes(component.uid); });\r\n            allSlotsToComponentsMap[slotId] = hiddenComponents;\r\n        });\r\n        return allSlotsToComponentsMap;\r\n    };\r\n    /**\r\n     * Function to load slot to component map for the current page in context\r\n     */\r\n    /* @ngInject */ SlotVisibilityService.prototype.getSlotToComponentsMap = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageUid, exception_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.pageInfoService.getPageUID()];\r\n                    case 1:\r\n                        pageUid = _a.sent();\r\n                        return [2 /*return*/, this.pageContentSlotsComponentsRestService.getSlotsToComponentsMapForPageUid(pageUid)];\r\n                    case 2:\r\n                        exception_2 = _a.sent();\r\n                        this.logService.error('SlotVisibilityService::getSlotToComponentsMap - failed call to pageInfoService.getPageUID');\r\n                        throw exception_2;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SlotVisibilityService.prototype.clearComponentsCache = function () {\r\n        this.pageContentSlotsComponentsRestService.clearCache();\r\n    };\r\n    /* @ngInject */ SlotVisibilityService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [CrossFrameEventService,\r\n            ComponentHandlerService,\r\n            LogService,\r\n            IPageInfoService,\r\n            IPageContentSlotsComponentsRestService])\r\n    ], /* @ngInject */ SlotVisibilityService);\r\n    return /* @ngInject */ SlotVisibilityService;\r\n}());\r\nexport { /* @ngInject */ SlotVisibilityService };\r\n//# sourceMappingURL=SlotVisibilityService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SlotVisibilityService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotVisibilityService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/services/SlotVisibilityService.d.ts","writeByteOrderMark":false,"text":"import { ICMSComponent, IPageContentSlotsComponentsRestService } from 'cmscommons';\r\nimport { ComponentHandlerService } from 'smartedit';\r\nimport { CrossFrameEventService, IPageInfoService, LogService, TypedMap } from 'smarteditcommons';\r\n/**\r\n * The slot visibility service provides methods to manage all backend calls and loads an internal\r\n * structure that provides the necessary data to the slot visibility button and slot visibility component.\r\n */\r\nexport declare class SlotVisibilityService {\r\n    private crossFrameEventService;\r\n    private componentHandlerService;\r\n    private logService;\r\n    private pageInfoService;\r\n    private pageContentSlotsComponentsRestService;\r\n    constructor(crossFrameEventService: CrossFrameEventService, componentHandlerService: ComponentHandlerService, logService: LogService, pageInfoService: IPageInfoService, pageContentSlotsComponentsRestService: IPageContentSlotsComponentsRestService);\r\n    /**\r\n     * Returns the list of hidden components for a given slotId\r\n     *\r\n     * @param slotId the slot id\r\n     *\r\n     * @returns A promise that resolves to a list of hidden components for the slotId\r\n     */\r\n    getHiddenComponents(slotId: string): Promise<ICMSComponent[]>;\r\n    /**\r\n     * Reloads and cache's the pagesContentSlotsComponents for the current page in context.\r\n     * this method can be called when ever a component is added or modified to the slot so that the pagesContentSlotsComponents is re-evaluated.\r\n     *\r\n     * @returns A promise that resolves to the contentSlot - Components [] map for the page in context.\r\n     */\r\n    reloadSlotsInfo(): Promise<TypedMap<ICMSComponent[]>>;\r\n    /**\r\n     * Function that filters the given SlotsToComponentsMap to return only those components that are hidden in the storefront.\r\n     * @param allSlotsToComponentsMap object containing slotId - components list.\r\n     *\r\n     * @return allSlotsToComponentsMap object containing slotId - components list.\r\n     */\r\n    private filterVisibleComponents;\r\n    /**\r\n     * Function to load slot to component map for the current page in context\r\n     */\r\n    private getSlotToComponentsMap;\r\n    private clearComponentsCache;\r\n}\r\n"}}
