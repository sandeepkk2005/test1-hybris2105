{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:authenticationService\r\n *\r\n * @description\r\n * The authenticationService is used to authenticate and logout from SmartEdit.\r\n * It also allows the management of entry points used to authenticate the different resources in the application.\r\n *\r\n */\r\nvar IAuthenticationService = /** @class */ (function () {\r\n    function IAuthenticationService() {\r\n        this.reauthInProgress = {};\r\n        this.initialized = false;\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#authenticate\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Authenticates the current SmartEdit user against the entry point assigned to the requested resource. If no\r\n     * suitable entry point is found, the resource will be authenticated against the\r\n     * {@link resourceLocationsModule.object:DEFAULT_AUTHENTICATION_ENTRY_POINT DEFAULT_AUTHENTICATION_ENTRY_POINT}\r\n     *\r\n     * @param {String} resource The URI identifying the resource to access.\r\n     * @returns {Promise} A promise that resolves if the authentication is successful.\r\n     */\r\n    IAuthenticationService.prototype.authenticate = function (resource) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#logout\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * The logout method removes all stored authentication tokens and redirects to the\r\n     * landing page.\r\n     *\r\n     */\r\n    IAuthenticationService.prototype.logout = function () {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    // abstract onLogout(_onLogout: () => void): void;\r\n    // abstract onUserHasChanged(_onUserHasChanged: () => void): void;\r\n    IAuthenticationService.prototype.isReAuthInProgress = function (entryPoint) {\r\n        'proxyFunction';\r\n        return Promise.resolve(false);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#setReAuthInProgress\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Used to indicate that the user is currently within a re-authentication flow for the given entry point.\r\n     * This flow is entered by default through authentication token expiry.\r\n     *\r\n     * @param {String} entryPoint The entry point which the user must be re-authenticated against.\r\n     *\r\n     */\r\n    IAuthenticationService.prototype.setReAuthInProgress = function (entryPoint) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#filterEntryPoints\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Will retrieve all relevant authentication entry points for a given resource.\r\n     * A relevant entry point is an entry value of the authenticationMap found in {@link @smartutils.sharedDataService sharedDataService}.The key used in that map is a regular expression matching the resource.\r\n     * When no entry point is found, the method returns the {@link resourceLocationsModule.object:DEFAULT_AUTHENTICATION_ENTRY_POINT DEFAULT_AUTHENTICATION_ENTRY_POINT}\r\n     * @param {string} resource The URL for which a relevant authentication entry point must be found.\r\n     */\r\n    IAuthenticationService.prototype.filterEntryPoints = function (resource) {\r\n        'proxyFunction';\r\n        return Promise.resolve([]);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService##isAuthEntryPoint\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Indicates if the resource URI provided is one of the registered authentication entry points.\r\n     *\r\n     * @param {String} resource The URI to compare\r\n     * @returns {Boolean} Flag that will be true if the resource URI provided is an authentication entry point.\r\n     */\r\n    IAuthenticationService.prototype.isAuthEntryPoint = function (resource) {\r\n        'proxyFunction';\r\n        return Promise.resolve(false);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService##isAuthenticated\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Indicates if the resource URI provided maps to a registered authentication entry point and the associated entry point has an authentication token.\r\n     *\r\n     * @param {String} resource The URI to compare\r\n     * @returns {Boolean} Flag that will be true if the resource URI provided maps to an authentication entry point which has an authentication token.\r\n     */\r\n    IAuthenticationService.prototype.isAuthenticated = function (url) {\r\n        'proxyFunction';\r\n        return Promise.resolve(false);\r\n    };\r\n    return IAuthenticationService;\r\n}());\r\nexport { IAuthenticationService };\r\n//# sourceMappingURL=i-authentication-service.js.map","references":[],"map":"{\"version\":3,\"file\":\"i-authentication-service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/interfaces/i-authentication-service.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH;;;GAGG;AACH;;;;;;;;GAQG;AACH;IAAA;QACc,qBAAgB,GAAsB,EAAE,CAAC;QACzC,gBAAW,GAAG,KAAK,CAAC;IA2GlC,CAAC;IA1GG;;;;;;;;;;;;OAYG;IACH,6CAAY,GAAZ,UAAa,QAAgB;QACzB,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;;;OASG;IACH,uCAAM,GAAN;QACI,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,kDAAkD;IAElD,kEAAkE;IAElE,mDAAkB,GAAlB,UAAmB,UAAkB;QACjC,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,oDAAmB,GAAnB,UAAoB,UAAkB;QAClC,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;OAUG;IACH,kDAAiB,GAAjB,UAAkB,QAAgB;QAC9B,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;;;;;OAUG;IACH,iDAAgB,GAAhB,UAAiB,QAAgB;QAC7B,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;;;OAUG;IACH,gDAAe,GAAf,UAAgB,GAAW;QACvB,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IACL,6BAAC;AAAD,CAAC,AA7GD,IA6GC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/interfaces/i-authentication-service.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:authenticationService\r\n *\r\n * @description\r\n * The authenticationService is used to authenticate and logout from SmartEdit.\r\n * It also allows the management of entry points used to authenticate the different resources in the application.\r\n *\r\n */\r\nexport declare abstract class IAuthenticationService {\r\n    protected reauthInProgress: IReAuthInProgress;\r\n    protected initialized: boolean;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#authenticate\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Authenticates the current SmartEdit user against the entry point assigned to the requested resource. If no\r\n     * suitable entry point is found, the resource will be authenticated against the\r\n     * {@link resourceLocationsModule.object:DEFAULT_AUTHENTICATION_ENTRY_POINT DEFAULT_AUTHENTICATION_ENTRY_POINT}\r\n     *\r\n     * @param {String} resource The URI identifying the resource to access.\r\n     * @returns {Promise} A promise that resolves if the authentication is successful.\r\n     */\r\n    authenticate(resource: string): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#logout\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * The logout method removes all stored authentication tokens and redirects to the\r\n     * landing page.\r\n     *\r\n     */\r\n    logout(): Promise<void>;\r\n    isReAuthInProgress(entryPoint: string): Promise<boolean>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#setReAuthInProgress\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Used to indicate that the user is currently within a re-authentication flow for the given entry point.\r\n     * This flow is entered by default through authentication token expiry.\r\n     *\r\n     * @param {String} entryPoint The entry point which the user must be re-authenticated against.\r\n     *\r\n     */\r\n    setReAuthInProgress(entryPoint: string): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService#filterEntryPoints\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Will retrieve all relevant authentication entry points for a given resource.\r\n     * A relevant entry point is an entry value of the authenticationMap found in {@link @smartutils.sharedDataService sharedDataService}.The key used in that map is a regular expression matching the resource.\r\n     * When no entry point is found, the method returns the {@link resourceLocationsModule.object:DEFAULT_AUTHENTICATION_ENTRY_POINT DEFAULT_AUTHENTICATION_ENTRY_POINT}\r\n     * @param {string} resource The URL for which a relevant authentication entry point must be found.\r\n     */\r\n    filterEntryPoints(resource: string): Promise<string[]>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService##isAuthEntryPoint\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Indicates if the resource URI provided is one of the registered authentication entry points.\r\n     *\r\n     * @param {String} resource The URI to compare\r\n     * @returns {Boolean} Flag that will be true if the resource URI provided is an authentication entry point.\r\n     */\r\n    isAuthEntryPoint(resource: string): Promise<boolean>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:authenticationService##isAuthenticated\r\n     * @methodOf @smartutils.services:authenticationService\r\n     *\r\n     * @description\r\n     * Indicates if the resource URI provided maps to a registered authentication entry point and the associated entry point has an authentication token.\r\n     *\r\n     * @param {String} resource The URI to compare\r\n     * @returns {Boolean} Flag that will be true if the resource URI provided maps to an authentication entry point which has an authentication token.\r\n     */\r\n    isAuthenticated(url: string): Promise<boolean>;\r\n}\r\nexport interface IReAuthInProgress {\r\n    [endPoint: string]: boolean;\r\n}\r\n"}}
