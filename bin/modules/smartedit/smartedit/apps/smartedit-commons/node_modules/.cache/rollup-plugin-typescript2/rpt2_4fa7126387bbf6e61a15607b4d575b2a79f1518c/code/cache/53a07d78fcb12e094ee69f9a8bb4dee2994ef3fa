{"code":"import { __decorate, __extends, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { ChangeDetectorRef, Directive, Inject, Input, SimpleChange, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { IPermissionService, LogService, SystemEventService } from '../../services';\r\nimport { HasOperationPermissionBaseDirective } from './HasOperationPermissionBaseDirective';\r\n/**\r\n * An Authorization structural directive that conditionally will remove elements from the DOM if the user does not have authorization defined\r\n * by the input parameter permission keys.\r\n *\r\n * This directive makes use of the {@link IPermissionService} service to validate\r\n * if the current user has access to the given permission set.\r\n *\r\n * It takes a comma-separated list of permission names or an array of permission name objects structured as follows:\r\n *\r\n * ### Example\r\n *\r\n * 1. String\r\n * 'se-edit-page'\r\n *\r\n * 2. Object\r\n *\r\n *          {\r\n *              names: [\"permission1\", \"permission2\"],\r\n *              context: {\r\n *                  data: \"with the context property, extra data can be included to check a permission when the Rule.verify function is called\"\r\n *              }\r\n *          }\r\n */\r\nvar HasOperationPermissionDirective = /** @class */ (function (_super) {\r\n    __extends(HasOperationPermissionDirective, _super);\r\n    function HasOperationPermissionDirective(templateRef, viewContainerRef, systemEventService, permissionService, logService, cdr) {\r\n        var _this = _super.call(this, systemEventService, permissionService, logService) || this;\r\n        _this.templateRef = templateRef;\r\n        _this.viewContainerRef = viewContainerRef;\r\n        _this.cdr = cdr;\r\n        _this.hasView = false;\r\n        _this.isPermissionGrantedHandler = _this.getIsPermissionGrantedHandler();\r\n        return _this;\r\n    }\r\n    HasOperationPermissionDirective.prototype.ngOnInit = function () {\r\n        _super.prototype.ngOnInit.call(this);\r\n    };\r\n    HasOperationPermissionDirective.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, {\r\n            hasOperationPermission: new SimpleChange(changes.seHasOperationPermission.previousValue, changes.seHasOperationPermission.currentValue, changes.seHasOperationPermission.firstChange)\r\n        });\r\n    };\r\n    HasOperationPermissionDirective.prototype.ngOnDestroy = function () {\r\n        _super.prototype.ngOnDestroy.call(this);\r\n    };\r\n    HasOperationPermissionDirective.prototype.getIsPermissionGrantedHandler = function () {\r\n        var _this = this;\r\n        return function (isPermissionGranted) {\r\n            _this.updateView(isPermissionGranted);\r\n        };\r\n    };\r\n    HasOperationPermissionDirective.prototype.updateView = function (isPermissionGranted) {\r\n        if (isPermissionGranted && !this.hasView) {\r\n            this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            this.hasView = true;\r\n        }\r\n        else if (!isPermissionGranted && this.hasView) {\r\n            this.viewContainerRef.clear();\r\n        }\r\n        this.cdr.markForCheck();\r\n    };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], HasOperationPermissionDirective.prototype, \"seHasOperationPermission\", void 0);\r\n    HasOperationPermissionDirective = __decorate([\r\n        Directive({ selector: '[seHasOperationPermission]' }),\r\n        __param(3, Inject(IPermissionService)),\r\n        __metadata(\"design:paramtypes\", [TemplateRef,\r\n            ViewContainerRef,\r\n            SystemEventService,\r\n            IPermissionService,\r\n            LogService,\r\n            ChangeDetectorRef])\r\n    ], HasOperationPermissionDirective);\r\n    return HasOperationPermissionDirective;\r\n}(HasOperationPermissionBaseDirective));\r\nexport { HasOperationPermissionDirective };\r\n//# sourceMappingURL=HasOperationPermissionDirective.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/directives/hasOperationPermission/HasOperationPermissionBaseDirective.ts"],"map":"{\"version\":3,\"file\":\"HasOperationPermissionDirective.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/directives/hasOperationPermission/HasOperationPermissionDirective.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EACH,iBAAiB,EACjB,SAAS,EACT,MAAM,EACN,KAAK,EAIL,YAAY,EAEZ,WAAW,EACX,gBAAgB,EACnB,MAAM,eAAe,CAAC;AAEvB,OAAO,EACH,kBAAkB,EAClB,UAAU,EAEV,kBAAkB,EACrB,MAAM,gBAAgB,CAAC;AACxB,OAAO,EACH,mCAAmC,EAEtC,MAAM,uCAAuC,CAAC;AAE/C;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAEH;IACY,mDAAmC;IAO3C,yCACY,WAA6B,EAC7B,gBAAkC,EAC1C,kBAAsC,EACV,iBAAqC,EACjE,UAAsB,EACd,GAAsB;QANlC,YAQI,kBAAM,kBAAkB,EAAE,iBAAiB,EAAE,UAAU,CAAC,SAE3D;QATW,iBAAW,GAAX,WAAW,CAAkB;QAC7B,sBAAgB,GAAhB,gBAAgB,CAAkB;QAIlC,SAAG,GAAH,GAAG,CAAmB;QAR1B,aAAO,GAAG,KAAK,CAAC;QAWpB,KAAI,CAAC,0BAA0B,GAAG,KAAI,CAAC,6BAA6B,EAAE,CAAC;;IAC3E,CAAC;IAED,kDAAQ,GAAR;QACI,iBAAM,QAAQ,WAAE,CAAC;IACrB,CAAC;IAED,qDAAW,GAAX,UAAY,OAAsB;QAC9B,iBAAM,WAAW,YAAC;YACd,sBAAsB,EAAE,IAAI,YAAY,CACpC,OAAO,CAAC,wBAAwB,CAAC,aAAa,EAC9C,OAAO,CAAC,wBAAwB,CAAC,YAAY,EAC7C,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAC/C;SACJ,CAAC,CAAC;IACP,CAAC;IAED,qDAAW,GAAX;QACI,iBAAM,WAAW,WAAE,CAAC;IACxB,CAAC;IAEO,uEAA6B,GAArC;QAAA,iBAIC;QAHG,OAAO,UAAC,mBAA4B;YAChC,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;QACzC,CAAC,CAAC;IACN,CAAC;IAEO,oDAAU,GAAlB,UAAmB,mBAA4B;QAC3C,IAAI,mBAAmB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACtC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;aAAM,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7C,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;SACjC;QACD,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC5B,CAAC;IAhDQ;QAAR,KAAK,EAAE;;qFAAiE;IAJhE,+BAA+B;QAD3C,SAAS,CAAC,EAAE,QAAQ,EAAE,4BAA4B,EAAE,CAAC;QAa7C,WAAA,MAAM,CAAC,kBAAkB,CAAC,CAAA;yCAHN,WAAW;YACN,gBAAgB;YACtB,kBAAkB;YACS,kBAAkB;YACrD,UAAU;YACT,iBAAiB;OAdzB,+BAA+B,CAqD3C;IAAD,sCAAC;CAAA,AArDD,CACY,mCAAmC,GAoD9C;SArDY,+BAA+B\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/directives/hasOperationPermission/HasOperationPermissionDirective.d.ts","writeByteOrderMark":false,"text":"import { ChangeDetectorRef, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { IPermissionService, LogService, MultiNamePermissionContext, SystemEventService } from '../../services';\r\nimport { HasOperationPermissionBaseDirective } from './HasOperationPermissionBaseDirective';\r\n/**\r\n * An Authorization structural directive that conditionally will remove elements from the DOM if the user does not have authorization defined\r\n * by the input parameter permission keys.\r\n *\r\n * This directive makes use of the {@link IPermissionService} service to validate\r\n * if the current user has access to the given permission set.\r\n *\r\n * It takes a comma-separated list of permission names or an array of permission name objects structured as follows:\r\n *\r\n * ### Example\r\n *\r\n * 1. String\r\n * 'se-edit-page'\r\n *\r\n * 2. Object\r\n *\r\n *          {\r\n *              names: [\"permission1\", \"permission2\"],\r\n *              context: {\r\n *                  data: \"with the context property, extra data can be included to check a permission when the Rule.verify function is called\"\r\n *              }\r\n *          }\r\n */\r\nexport declare class HasOperationPermissionDirective extends HasOperationPermissionBaseDirective implements OnInit, OnDestroy, OnChanges {\r\n    private templateRef;\r\n    private viewContainerRef;\r\n    private cdr;\r\n    /** A comma-separated list of permission names or an array of permission name objects. */\r\n    seHasOperationPermission: string | MultiNamePermissionContext[];\r\n    private hasView;\r\n    constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef, systemEventService: SystemEventService, permissionService: IPermissionService, logService: LogService, cdr: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private getIsPermissionGrantedHandler;\r\n    private updateView;\r\n}\r\n"}}
