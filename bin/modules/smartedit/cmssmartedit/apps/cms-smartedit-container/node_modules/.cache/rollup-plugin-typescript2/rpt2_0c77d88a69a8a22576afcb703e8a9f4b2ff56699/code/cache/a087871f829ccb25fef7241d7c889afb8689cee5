{"code":"import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CmsitemsRestService, ComponentService, IContextAwareEditableItemService, IEditorModalService } from 'cmscommons';\r\nimport { isNil } from 'lodash';\r\nimport { stringUtils, GatewayProxied, GenericEditorStackService, IRenderService, SeDowngradeService } from 'smarteditcommons';\r\nimport { GenericEditorModalService } from './GenericEditorModalService';\r\nvar /* @ngInject */ EditorModalService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ EditorModalService, _super);\r\n    function /* @ngInject */ EditorModalService(genericEditorModalService, componentService, renderService, contextAwareEditableItemService, cmsitemsRestService, translateService, genericEditorStackService) {\r\n        var _this = _super.call(this) || this;\r\n        _this.genericEditorModalService = genericEditorModalService;\r\n        _this.componentService = componentService;\r\n        _this.renderService = renderService;\r\n        _this.contextAwareEditableItemService = contextAwareEditableItemService;\r\n        _this.cmsitemsRestService = cmsitemsRestService;\r\n        _this.translateService = translateService;\r\n        _this.genericEditorStackService = genericEditorStackService;\r\n        return _this;\r\n    }\r\n    /* @ngInject */ EditorModalService.prototype.openAndRerenderSlot = function (componentType, componentUuid, targetedQualifier, saveCallback, editorStackId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var componentAttributes, attributes, componentData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        componentAttributes = {\r\n                            smarteditComponentType: componentType,\r\n                            smarteditComponentUuid: componentUuid\r\n                        };\r\n                        return [4 /*yield*/, this.preloadContent(componentUuid, componentAttributes)];\r\n                    case 1:\r\n                        attributes = _a.sent();\r\n                        componentData = this.createComponentData(attributes, {\r\n                            targetedQualifier: targetedQualifier\r\n                        }, editorStackId || stringUtils.generateIdentifier());\r\n                        return [2 /*return*/, this.markAndOpenGenericEditor(componentData, saveCallback)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ EditorModalService.prototype.open = function (componentAttributes, targetSlotId, position, targetedQualifier, saveCallback, editorStackId, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var attributes, componentData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.preloadContent(componentAttributes.smarteditComponentUuid, componentAttributes)];\r\n                    case 1:\r\n                        attributes = _a.sent();\r\n                        componentData = this.createComponentData(attributes, {\r\n                            slotId: targetSlotId,\r\n                            position: position,\r\n                            targetedQualifier: targetedQualifier\r\n                        }, editorStackId || stringUtils.generateIdentifier());\r\n                        return [2 /*return*/, this.markAndOpenGenericEditor(componentData, saveCallback, config)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ EditorModalService.prototype.openGenericEditor = function (data, saveCallback, errorCallback, config) {\r\n        return this.genericEditorModalService.open(data, saveCallback, errorCallback, config);\r\n    };\r\n    /**\r\n     * Loads content of the item by uuid and populates the content attribute of componentAttributes object only if it's not already provided.\r\n     */\r\n    /* @ngInject */ EditorModalService.prototype.preloadContent = function (uuid, componentAttributes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var component;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getContentByUuid(uuid)];\r\n                    case 1:\r\n                        component = _a.sent();\r\n                        if (component !== null && isNil(componentAttributes.content)) {\r\n                            componentAttributes.content = component;\r\n                        }\r\n                        return [2 /*return*/, componentAttributes];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Opens generic editor.\r\n     *\r\n     * @param componentData Object that contains all parameters for generic editor.\r\n     * Note: if the componentUuid is not provided the generic editor will be opened for creation.\r\n     *\r\n     * @param saveCallback the save callback that is triggered after submit.\r\n     */\r\n    /* @ngInject */ EditorModalService.prototype.markAndOpenGenericEditor = function (componentData, saveCallback, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.markComponentAsShared(componentData.content, componentData)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, this.genericEditorModalService.open(componentData, function (item) {\r\n                                if (saveCallback) {\r\n                                    saveCallback(item);\r\n                                }\r\n                                if (componentData.editorStackId) {\r\n                                    var topEditor = _this.genericEditorStackService.getEditorsStack(componentData.editorStackId)[0];\r\n                                    var uuid = topEditor.component.uuid;\r\n                                    _this.componentService\r\n                                        .getSlotsForComponent(uuid)\r\n                                        .then(function (slotIds) {\r\n                                        _this.renderService.renderSlots(slotIds);\r\n                                    });\r\n                                }\r\n                            }, null, config)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves a content object by its uuid. If the uuid is undefined, null is returned.\r\n     */\r\n    /* @ngInject */ EditorModalService.prototype.getContentByUuid = function (uuid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (!isNil(uuid)) {\r\n                    return [2 /*return*/, this.cmsitemsRestService.getById(uuid)];\r\n                }\r\n                return [2 /*return*/, null];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Verifies whether the component is shared in workflow context. If yes, then makes the component readonly and adds a message that the component\r\n     * is used in different workflow. If no, checks whether the component is shared in page context and adds a message about it.\r\n     */\r\n    /* @ngInject */ EditorModalService.prototype.markComponentAsShared = function (componentContent, modelServiceParameters) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var componentIsEditable;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!(componentContent === null || componentContent === void 0 ? void 0 : componentContent.uid)) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, this.contextAwareEditableItemService.isItemEditable(componentContent.uid)];\r\n                    case 1:\r\n                        componentIsEditable = _a.sent();\r\n                        modelServiceParameters.readOnlyMode = !componentIsEditable;\r\n                        if (modelServiceParameters.readOnlyMode) {\r\n                            this.addComponentInfoMessage('se.cms.component.workflow.shared.component', modelServiceParameters);\r\n                        }\r\n                        else if (this.componentIsShared(componentContent)) {\r\n                            this.addComponentInfoMessage('se.cms.component.shared.component', modelServiceParameters);\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Verifies whether the component is shared or not by checking the slots attribute of the component payload.\r\n     */\r\n    /* @ngInject */ EditorModalService.prototype.componentIsShared = function (componentContent) {\r\n        var _a;\r\n        return ((_a = componentContent.slots) === null || _a === void 0 ? void 0 : _a.length) > 1;\r\n    };\r\n    /**\r\n     * Adds a message to a messages attribute of IGenericEditorModalServiceComponent. If the attribute is undefined then the new one is created.\r\n     */\r\n    /* @ngInject */ EditorModalService.prototype.addComponentInfoMessage = function (message, modelServiceParameters) {\r\n        modelServiceParameters.messages = modelServiceParameters.messages || [];\r\n        modelServiceParameters.messages.push({\r\n            type: 'info',\r\n            message: this.translateService.instant(message)\r\n        });\r\n    };\r\n    /* @ngInject */ EditorModalService.prototype.prepareContentForCreate = function (content, componentType, catalogVersionUuid, slotId, position) {\r\n        var preparedContent = content ? Object.assign({}, content) : {};\r\n        preparedContent.position = !stringUtils.isBlank(preparedContent.position)\r\n            ? preparedContent.position\r\n            : position;\r\n        preparedContent.slotId = preparedContent.slotId || slotId;\r\n        preparedContent.typeCode = preparedContent.typeCode || componentType;\r\n        preparedContent.itemtype = preparedContent.itemtype || componentType;\r\n        preparedContent.catalogVersion = preparedContent.catalogVersion || catalogVersionUuid;\r\n        preparedContent.visible = !stringUtils.isBlank(preparedContent.visible)\r\n            ? preparedContent.visible\r\n            : true;\r\n        return preparedContent;\r\n    };\r\n    /* @ngInject */ EditorModalService.prototype.createComponentData = function (componentAttributes, params, editorStackId) {\r\n        var type;\r\n        try {\r\n            type = componentAttributes.smarteditComponentType.toLowerCase();\r\n        }\r\n        catch (error) {\r\n            throw new Error(\"editorModalService.createComponentData - invalid component type in componentAttributes. \" + error);\r\n        }\r\n        var isCreateOperation = isNil(componentAttributes.smarteditComponentUuid);\r\n        var content;\r\n        if (isCreateOperation) {\r\n            content = this.prepareContentForCreate(componentAttributes.content, componentAttributes.smarteditComponentType, componentAttributes.catalogVersionUuid, params.slotId, params.position);\r\n        }\r\n        else {\r\n            content = componentAttributes.content;\r\n        }\r\n        return {\r\n            componentUuid: componentAttributes.smarteditComponentUuid,\r\n            componentType: componentAttributes.smarteditComponentType,\r\n            title: \"type.\" + type + \".name\",\r\n            targetedQualifier: params.targetedQualifier,\r\n            initialDirty: componentAttributes.initialDirty,\r\n            content: content,\r\n            editorStackId: editorStackId\r\n        };\r\n    };\r\n    /* @ngInject */ EditorModalService = __decorate([\r\n        SeDowngradeService(IEditorModalService),\r\n        GatewayProxied('open', 'openAndRerenderSlot', 'openGenericEditor'),\r\n        __metadata(\"design:paramtypes\", [GenericEditorModalService,\r\n            ComponentService,\r\n            IRenderService,\r\n            IContextAwareEditableItemService,\r\n            CmsitemsRestService,\r\n            TranslateService,\r\n            GenericEditorStackService])\r\n    ], /* @ngInject */ EditorModalService);\r\n    return /* @ngInject */ EditorModalService;\r\n}(IEditorModalService));\r\nexport { /* @ngInject */ EditorModalService };\r\n//# sourceMappingURL=EditorModalServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@fundamental-ngx/core@0.13.2_9a9a80bb6ff375d99f90188f858ebbd5/node_modules/@fundamental-ngx/core/fundamental-ngx-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate/core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/GenericEditorModalService.ts"],"map":"{\"version\":3,\"file\":\"EditorModalServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/EditorModalServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/services/EditorModalServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { ModalConfig } from '@fundamental-ngx/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CmsitemsRestService, ComponentService, IComponent, IContextAwareEditableItemService, IEditorModalService, IGenericEditorModalServiceComponent } from 'cmscommons';\r\nimport { GenericEditorStackService, IRenderService } from 'smarteditcommons';\r\nimport { GenericEditorModalService } from './GenericEditorModalService';\r\nexport declare class EditorModalService extends IEditorModalService {\r\n    private genericEditorModalService;\r\n    private componentService;\r\n    private renderService;\r\n    private contextAwareEditableItemService;\r\n    private cmsitemsRestService;\r\n    private translateService;\r\n    private genericEditorStackService;\r\n    constructor(genericEditorModalService: GenericEditorModalService, componentService: ComponentService, renderService: IRenderService, contextAwareEditableItemService: IContextAwareEditableItemService, cmsitemsRestService: CmsitemsRestService, translateService: TranslateService, genericEditorStackService: GenericEditorStackService);\r\n    openAndRerenderSlot(componentType: string, componentUuid: string, targetedQualifier: string, saveCallback?: (item: any) => void, editorStackId?: string): Promise<any>;\r\n    open(componentAttributes: IComponent, targetSlotId?: string, position?: number, targetedQualifier?: string, saveCallback?: (item: any) => void, editorStackId?: string, config?: ModalConfig): Promise<any>;\r\n    openGenericEditor(data: IGenericEditorModalServiceComponent, saveCallback?: () => void, errorCallback?: () => void, config?: ModalConfig): Promise<any>;\r\n    /**\r\n     * Loads content of the item by uuid and populates the content attribute of componentAttributes object only if it's not already provided.\r\n     */\r\n    private preloadContent;\r\n    /**\r\n     * Opens generic editor.\r\n     *\r\n     * @param componentData Object that contains all parameters for generic editor.\r\n     * Note: if the componentUuid is not provided the generic editor will be opened for creation.\r\n     *\r\n     * @param saveCallback the save callback that is triggered after submit.\r\n     */\r\n    private markAndOpenGenericEditor;\r\n    /**\r\n     * Retrieves a content object by its uuid. If the uuid is undefined, null is returned.\r\n     */\r\n    private getContentByUuid;\r\n    /**\r\n     * Verifies whether the component is shared in workflow context. If yes, then makes the component readonly and adds a message that the component\r\n     * is used in different workflow. If no, checks whether the component is shared in page context and adds a message about it.\r\n     */\r\n    private markComponentAsShared;\r\n    /**\r\n     * Verifies whether the component is shared or not by checking the slots attribute of the component payload.\r\n     */\r\n    private componentIsShared;\r\n    /**\r\n     * Adds a message to a messages attribute of IGenericEditorModalServiceComponent. If the attribute is undefined then the new one is created.\r\n     */\r\n    private addComponentInfoMessage;\r\n    private prepareContentForCreate;\r\n    private createComponentData;\r\n}\r\n"}}
