{"code":"import { __assign, __spreadArrays } from \"tslib\";\r\nimport * as lo from 'lodash';\r\nimport { defaultButtonOptions } from './constants';\r\nimport { ModalButtonActions } from './ModalButtonActions';\r\nimport { ModalButtonStyles } from './ModalButtonStyles';\r\n/**\r\n * The ModalManager is a service designed to provide easy runtime modification to various aspects of a modal window,\r\n * such as the modifying the title, adding a buttons, setting callbacks, etc...\r\n *\r\n * The ModalManager constructor is not exposed publicly, but an instance of ModalManager is added to the scope of\r\n * the modal content implicitly through the scope chain/prototyping. As long as you don't create an\r\n * {@link https://docs.angularjs.org/guide/scope isolated scope} for the modal, you can access it through $scope.modalManager\r\n *\r\n * ### Example\r\n *\r\n *       .controller('modalTestController', function($scope, $log) {\r\n *          var buttonHandlerFn = function (buttonId) {\r\n *              $log.debug(\"button with id\", buttonId, \"was pressed!\");\r\n *          };\r\n *          $scope.modalManager.setButtonHandler(buttonHandlerFn);\r\n *          ...\r\n */\r\nvar ModalManager = /** @class */ (function () {\r\n    function ModalManager(config, // specify interface\r\n    $translate, modalInstance) {\r\n        var _this = this;\r\n        this.config = config;\r\n        this.$translate = $translate;\r\n        this.modalInstance = modalInstance;\r\n        this.title = '';\r\n        this.showDismissX = true;\r\n        this.buttons = [];\r\n        this._defaultButtonOptions = defaultButtonOptions;\r\n        if (!this.modalInstance) {\r\n            throw new Error('no.modalInstance.injected');\r\n        }\r\n        if (typeof this.config.title === 'string') {\r\n            this.title = config.title;\r\n        }\r\n        if (typeof this.config.titleSuffix === 'string') {\r\n            this.titleSuffix = config.titleSuffix;\r\n        }\r\n        if (this.config.buttons) {\r\n            this.buttons = __spreadArrays(this.buttons, this.config.buttons.map(function (options) {\r\n                return _this.createButton(options);\r\n            }));\r\n        }\r\n        this.closeFunction = this.modalInstance.close;\r\n        this.dismissFunction = this.modalInstance.dismiss;\r\n    }\r\n    /**\r\n     * @returns Added button\r\n     */\r\n    ModalManager.prototype.addButton = function (newButtonConf) {\r\n        var button = this.createButton(newButtonConf);\r\n        this.buttons = __spreadArrays(this.buttons, [button]);\r\n        return button;\r\n    };\r\n    /**\r\n     * **Caution!**\r\n     *\r\n     * This is a reference to the buttons being used by the modal manager, not a clone. This should\r\n     * only be used to read or update properties provided in the Button configuration.\r\n     * See [addButton]{@link ModalManager#addButton} for more details.\r\n     *\r\n     * @returns An array of all the buttons on the modal window, empty array if there are no buttons.\r\n     */\r\n    ModalManager.prototype.getButtons = function () {\r\n        return this.buttons;\r\n    };\r\n    ModalManager.prototype.removeAllButtons = function () {\r\n        this.buttons = [];\r\n    };\r\n    ModalManager.prototype.removeButton = function (buttonId) {\r\n        this.buttons = this.buttons.filter(function (options) { return options.id !== buttonId; });\r\n    };\r\n    /**\r\n     * Enables a button on the modal window, allowing it to be pressed.\r\n     */\r\n    ModalManager.prototype.enableButton = function (buttonId) {\r\n        this.buttons = this.buttons.map(function (options) {\r\n            return options.id === buttonId ? __assign(__assign({}, options), { disabled: false }) : options;\r\n        });\r\n    };\r\n    /**\r\n     * Disables the button on the modal window, preventing it from being pressed.\r\n     */\r\n    ModalManager.prototype.disableButton = function (buttonId) {\r\n        this.buttons = this.buttons.map(function (options) {\r\n            return options.id === buttonId ? __assign(__assign({}, options), { disabled: true }) : options;\r\n        });\r\n    };\r\n    /**\r\n     * @returns The first button found with a matching id, otherwise null.\r\n     */\r\n    ModalManager.prototype.getButton = function (buttonId) {\r\n        return this.buttons.find(function (options) { return options.id === buttonId; });\r\n    };\r\n    /**\r\n     * Whether to display the \"X\" dismiss button at the top right corner of the modal window,\r\n     * when the modal header is displayed.\r\n     */\r\n    ModalManager.prototype.setShowHeaderDismiss = function (showButton) {\r\n        if (typeof showButton === 'boolean') {\r\n            this.showDismissX = showButton;\r\n        }\r\n        else {\r\n            throw new Error('modalService.ModalManager.showDismissX.illegal.param');\r\n        }\r\n    };\r\n    /**\r\n     * Sets the function to be called when the X dismiss button at the top right corner of the modal window\r\n     * is pressed. This function must either return null or a promise.\r\n     *\r\n     * If the promise is resolved, or if the function returns null or undefined, then the modal is closed and the returned\r\n     * modal promise is rejected.\r\n     *\r\n     * If the callback promise is rejected, the modal is not closed, allowing you to provide some kind of validation\r\n     * before closing.\r\n     */\r\n    ModalManager.prototype.setDismissCallback = function (callback) {\r\n        this.dismissCallback = callback;\r\n    };\r\n    /**\r\n     * @param buttonHandlerFunction Callback function that is called when any button on the\r\n     * modal, that has no [callback]{@link IModalButtonOptions#callback}, is pressed.\r\n     * If a button has a [callback]{@link IModalButtonOptions#callback} function, then that function will be\r\n     * that function will be called instead.\r\n     *\r\n     * This callback function receives a single parameter, which is the string ID of the button that was pressed.\r\n     * Additionally, this function must either return null, undefined or a promise.\r\n     *\r\n     * If null/undefined is return, the modal will continue to process the Button Action.\r\n     * In this case, no data will be returned to the modal promise if the modal is closed.\r\n     *\r\n     * If a promise is returned by this function, then the Button Action\r\n     * may be cancelled/ignored by rejecting the promise. If the promise is resolved, the {@link ModalManager}\r\n     * will continue to process the Button Action.\r\n     *\r\n     * If by resolving the promise returned by this callback function with data passed to the resolve, and the Button Action\r\n     * is such that it results in the modal closing, then the modal promise is resolved or rejected with that same data. This allows you to pass data from this function\r\n     * to the `modalService.open(...)` caller.\r\n     *\r\n     * See [for more details on the button callback]{@link IModalButtonOptions.callback}\r\n     *\r\n     *\r\n     * A few scenarios for example:\r\n     * #1 A button with a button callback is pressed.\r\n     * <br/>Result: callback function is never called.\r\n     *\r\n     * #2 A button is pressed, callback function returns null\r\n     * <br/>Result: The modal manager will execute any action on the button\r\n     *\r\n     * #3 A button is pressed, callback function returns a promise, that promise is rejected\r\n     * <br/>Result: Modal Manager will ignore the button action and nothing else will happen\r\n     *\r\n     * #4 A button with a dismiss action is pressed, callback function returns a promise, and that promise is resolved with data \"Hello\"\r\n     * <br/>Result: ModalManager will execute the dismiss action, closing the modal, and errorCallback of the modal promise, passing \"Hello\" as data\r\n     *\r\n     *\r\n     * Code sample of validating some data before closing the modal\r\n     *\r\n     * ### Example\r\n     *\r\n     *      function validateSomething(): boolean {\r\n     *          return true;\r\n     *      };\r\n     *\r\n     *      function buttonHandlerFn (buttonId: string): Promise<any> {\r\n     *         if (buttonId === 'submit') {\r\n     *             const deferred = $q.defer();\r\n     *             if (validateSomething()) {\r\n     *               deferred.resolve(\"someResult\");\r\n     *              } else {\r\n     *                  deferred.reject();  // cancel the submit button's close action\r\n     *               }\r\n     *              return deferred.promise;\r\n     *           }\r\n     *      };\r\n     *\r\n     *      $scope.modalManager.setButtonHandler(buttonHandlerFn);\r\n     *\r\n     */\r\n    ModalManager.prototype.setButtonHandler = function (buttonHandlerFunction) {\r\n        this.buttonEventCallback = buttonHandlerFunction;\r\n    };\r\n    /**\r\n     * The close function will close the modal window, passing the provided data (if any) to the successCallback\r\n     * of the modal promise by resolving the promise.\r\n     *\r\n     * @param data Any data to be returned to the resolved modal promise when the modal is closed.\r\n     */\r\n    ModalManager.prototype.close = function (dataToReturn) {\r\n        if (this.closeFunction) {\r\n            this.closeFunction(dataToReturn);\r\n        }\r\n    };\r\n    /**\r\n     * The dismiss function will close the modal window, rejecting the modal promise with the provided data.\r\n     */\r\n    ModalManager.prototype.dismiss = function (dataToReturn) {\r\n        if (this.dismissFunction) {\r\n            this.dismissFunction(dataToReturn);\r\n        }\r\n    };\r\n    ModalManager.prototype._showDismissButton = function () {\r\n        return this.showDismissX;\r\n    };\r\n    ModalManager.prototype._buttonPressed = function (button) {\r\n        var _this = this;\r\n        var callbackReturnedPromise;\r\n        if (button.callback) {\r\n            callbackReturnedPromise = button.callback();\r\n        }\r\n        else if (this.buttonEventCallback) {\r\n            callbackReturnedPromise = this.buttonEventCallback(button.id);\r\n        }\r\n        if (button.action !== ModalButtonActions.None) {\r\n            var exitFn_1 = button.action === ModalButtonActions.Close ? this.close : this.dismiss;\r\n            if (callbackReturnedPromise) {\r\n                callbackReturnedPromise.then(function (data) { return exitFn_1.call(_this, data); }).catch(lo.noop);\r\n            }\r\n            else {\r\n                exitFn_1.call(this);\r\n            }\r\n        }\r\n        if (callbackReturnedPromise) {\r\n            callbackReturnedPromise.then(lo.noop).catch(lo.noop);\r\n        }\r\n    };\r\n    ModalManager.prototype._handleDismissButton = function () {\r\n        var _this = this;\r\n        if (this.dismissCallback) {\r\n            this.dismissCallback()\r\n                .then(function (result) { return _this.dismiss(result); })\r\n                .catch(lo.noop);\r\n        }\r\n        else {\r\n            this.dismiss();\r\n        }\r\n    };\r\n    ModalManager.prototype._hasButtons = function () {\r\n        return this.buttons.length > 0;\r\n    };\r\n    ModalManager.prototype.createButton = function (buttonConfig) {\r\n        var config = __assign(__assign({}, this._defaultButtonOptions), buttonConfig);\r\n        this.$translate(buttonConfig.label || this._defaultButtonOptions.label).then(function (label) {\r\n            config.label = label;\r\n        });\r\n        var styleValidated = Object.keys(ModalButtonStyles).some(function (key) { return ModalButtonStyles[key] === config.style; });\r\n        var actionValidated = Object.keys(ModalButtonActions).some(function (key) { return ModalButtonActions[key] === config.action; });\r\n        if (!styleValidated) {\r\n            throw new Error('modalService.ModalManager._createButton.illegal.button.style');\r\n        }\r\n        if (!actionValidated) {\r\n            throw new Error('modalService.ModalManager._createButton.illegal.button.action');\r\n        }\r\n        return config;\r\n    };\r\n    return ModalManager;\r\n}());\r\nexport { ModalManager };\r\n//# sourceMappingURL=ModalManager.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular-ui-bootstrap@0.13.47/node_modules/@types/angular-ui-bootstrap/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modal/constants.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modal/IModalButtonOptions.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modal/IModalConfig.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modal/ModalButtonActions.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modal/ModalButtonStyles.ts"],"map":"{\"version\":3,\"file\":\"ModalManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/modal/ModalManager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/modal/ModalManager.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular-translate\" />\r\nimport * as angular from 'angular';\r\nimport * as uib from 'angular-ui-bootstrap';\r\nimport { IModalButtonOptions } from './IModalButtonOptions';\r\nimport { IModalConfig } from './IModalConfig';\r\n/**\r\n * The ModalManager is a service designed to provide easy runtime modification to various aspects of a modal window,\r\n * such as the modifying the title, adding a buttons, setting callbacks, etc...\r\n *\r\n * The ModalManager constructor is not exposed publicly, but an instance of ModalManager is added to the scope of\r\n * the modal content implicitly through the scope chain/prototyping. As long as you don't create an\r\n * {@link https://docs.angularjs.org/guide/scope isolated scope} for the modal, you can access it through $scope.modalManager\r\n *\r\n * ### Example\r\n *\r\n *       .controller('modalTestController', function($scope, $log) {\r\n *          var buttonHandlerFn = function (buttonId) {\r\n *              $log.debug(\"button with id\", buttonId, \"was pressed!\");\r\n *          };\r\n *          $scope.modalManager.setButtonHandler(buttonHandlerFn);\r\n *          ...\r\n */\r\nexport declare class ModalManager {\r\n    private config;\r\n    private $translate;\r\n    private modalInstance;\r\n    title: string;\r\n    titleSuffix: string;\r\n    private buttonEventCallback;\r\n    private showDismissX;\r\n    private buttons;\r\n    private closeFunction;\r\n    private dismissCallback;\r\n    private dismissFunction;\r\n    private _defaultButtonOptions;\r\n    constructor(config: IModalConfig, // specify interface\r\n    $translate: angular.translate.ITranslateService, modalInstance: uib.IModalInstanceService);\r\n    /**\r\n     * @returns Added button\r\n     */\r\n    addButton(newButtonConf: IModalButtonOptions): IModalButtonOptions;\r\n    /**\r\n     * **Caution!**\r\n     *\r\n     * This is a reference to the buttons being used by the modal manager, not a clone. This should\r\n     * only be used to read or update properties provided in the Button configuration.\r\n     * See [addButton]{@link ModalManager#addButton} for more details.\r\n     *\r\n     * @returns An array of all the buttons on the modal window, empty array if there are no buttons.\r\n     */\r\n    getButtons(): IModalButtonOptions[];\r\n    removeAllButtons(): void;\r\n    removeButton(buttonId: string): void;\r\n    /**\r\n     * Enables a button on the modal window, allowing it to be pressed.\r\n     */\r\n    enableButton(buttonId: string): void;\r\n    /**\r\n     * Disables the button on the modal window, preventing it from being pressed.\r\n     */\r\n    disableButton(buttonId: string): void;\r\n    /**\r\n     * @returns The first button found with a matching id, otherwise null.\r\n     */\r\n    getButton(buttonId: string): IModalButtonOptions;\r\n    /**\r\n     * Whether to display the \"X\" dismiss button at the top right corner of the modal window,\r\n     * when the modal header is displayed.\r\n     */\r\n    setShowHeaderDismiss(showButton: boolean): void;\r\n    /**\r\n     * Sets the function to be called when the X dismiss button at the top right corner of the modal window\r\n     * is pressed. This function must either return null or a promise.\r\n     *\r\n     * If the promise is resolved, or if the function returns null or undefined, then the modal is closed and the returned\r\n     * modal promise is rejected.\r\n     *\r\n     * If the callback promise is rejected, the modal is not closed, allowing you to provide some kind of validation\r\n     * before closing.\r\n     */\r\n    setDismissCallback(callback: () => Promise<any>): void;\r\n    /**\r\n     * @param buttonHandlerFunction Callback function that is called when any button on the\r\n     * modal, that has no [callback]{@link IModalButtonOptions#callback}, is pressed.\r\n     * If a button has a [callback]{@link IModalButtonOptions#callback} function, then that function will be\r\n     * that function will be called instead.\r\n     *\r\n     * This callback function receives a single parameter, which is the string ID of the button that was pressed.\r\n     * Additionally, this function must either return null, undefined or a promise.\r\n     *\r\n     * If null/undefined is return, the modal will continue to process the Button Action.\r\n     * In this case, no data will be returned to the modal promise if the modal is closed.\r\n     *\r\n     * If a promise is returned by this function, then the Button Action\r\n     * may be cancelled/ignored by rejecting the promise. If the promise is resolved, the {@link ModalManager}\r\n     * will continue to process the Button Action.\r\n     *\r\n     * If by resolving the promise returned by this callback function with data passed to the resolve, and the Button Action\r\n     * is such that it results in the modal closing, then the modal promise is resolved or rejected with that same data. This allows you to pass data from this function\r\n     * to the `modalService.open(...)` caller.\r\n     *\r\n     * See [for more details on the button callback]{@link IModalButtonOptions.callback}\r\n     *\r\n     *\r\n     * A few scenarios for example:\r\n     * #1 A button with a button callback is pressed.\r\n     * <br/>Result: callback function is never called.\r\n     *\r\n     * #2 A button is pressed, callback function returns null\r\n     * <br/>Result: The modal manager will execute any action on the button\r\n     *\r\n     * #3 A button is pressed, callback function returns a promise, that promise is rejected\r\n     * <br/>Result: Modal Manager will ignore the button action and nothing else will happen\r\n     *\r\n     * #4 A button with a dismiss action is pressed, callback function returns a promise, and that promise is resolved with data \"Hello\"\r\n     * <br/>Result: ModalManager will execute the dismiss action, closing the modal, and errorCallback of the modal promise, passing \"Hello\" as data\r\n     *\r\n     *\r\n     * Code sample of validating some data before closing the modal\r\n     *\r\n     * ### Example\r\n     *\r\n     *      function validateSomething(): boolean {\r\n     *          return true;\r\n     *      };\r\n     *\r\n     *      function buttonHandlerFn (buttonId: string): Promise<any> {\r\n     *         if (buttonId === 'submit') {\r\n     *             const deferred = $q.defer();\r\n     *             if (validateSomething()) {\r\n     *               deferred.resolve(\"someResult\");\r\n     *              } else {\r\n     *                  deferred.reject();  // cancel the submit button's close action\r\n     *               }\r\n     *              return deferred.promise;\r\n     *           }\r\n     *      };\r\n     *\r\n     *      $scope.modalManager.setButtonHandler(buttonHandlerFn);\r\n     *\r\n     */\r\n    setButtonHandler(buttonHandlerFunction: (id: string) => void | Promise<any>): void;\r\n    /**\r\n     * The close function will close the modal window, passing the provided data (if any) to the successCallback\r\n     * of the modal promise by resolving the promise.\r\n     *\r\n     * @param data Any data to be returned to the resolved modal promise when the modal is closed.\r\n     */\r\n    close(dataToReturn: any): void;\r\n    /**\r\n     * The dismiss function will close the modal window, rejecting the modal promise with the provided data.\r\n     */\r\n    dismiss(dataToReturn?: any): void;\r\n    _showDismissButton(): boolean;\r\n    _buttonPressed(button: IModalButtonOptions): void;\r\n    _handleDismissButton(): void;\r\n    _hasButtons(): boolean;\r\n    private createButton;\r\n}\r\n"}}
