{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { rarelyChangingContent, userEvictionTag, Cached, ISessionService, RestServiceFactory, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * The catalog version permission service is used to check if the current user has been granted certain permissions\r\n * on a given catalog ID and catalog Version.\r\n */\r\nvar /* @ngInject */ CatalogVersionPermissionRestService = /** @class */ (function () {\r\n    function /* @ngInject */ CatalogVersionPermissionRestService(restServiceFactory, sessionService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.sessionService = sessionService;\r\n        this.URI = '/permissionswebservices/v1/permissions/catalogs/search';\r\n    }\r\n    /**\r\n     * This method returns permissions from the Catalog Version Permissions Service API.\r\n     *\r\n     * Sample Request:\r\n     * POST /permissionswebservices/v1/permissions/catalogs/search?catalogId=apparel-deContentCatalog&catalogVersion=Online\r\n     *\r\n     * Sample Response from API:\r\n     * {\r\n     * \"permissionsList\": [\r\n     *     {\r\n     *       \"catalogId\": \"apparel-deContentCatalog\",\r\n     *       \"catalogVersion\": \"Online\",\r\n     *       \"permissions\": [\r\n     *         {\r\n     *           \"key\": \"read\",\r\n     *           \"value\": \"true\"\r\n     *         },\r\n     *         {\r\n     *           \"key\": \"write\",\r\n     *           \"value\": \"false\"\r\n     *         }\r\n     *       ],\r\n     *      \"syncPermissions\": [\r\n     *        {\r\n     *          \"canSynchronize\": \"true\",\r\n     *          \"targetCatalogVersion\": \"Online\"\r\n     *        }\r\n     *     }\r\n     *    ]\r\n     * }\r\n     *\r\n     * Sample Response returned by the service:\r\n     * {\r\n     *   \"catalogId\": \"apparel-deContentCatalog\",\r\n     *   \"catalogVersion\": \"Online\",\r\n     *   \"permissions\": [\r\n     *      {\r\n     *        \"key\": \"read\",\r\n     *        \"value\": \"true\"\r\n     *      },\r\n     *      {\r\n     *        \"key\": \"write\",\r\n     *        \"value\": \"false\"\r\n     *      }\r\n     *     ],\r\n     *    \"syncPermissions\": [\r\n     *      {\r\n     *        \"canSynchronize\": \"true\",\r\n     *        \"targetCatalogVersion\": \"Online\"\r\n     *      }\r\n     *    ]\r\n     *  }\r\n     *\r\n     * @param catalogId The Catalog ID\r\n     * @param catalogVersion The Catalog Version name\r\n     *\r\n     * @returns A Promise which returns an object exposing a permissions array containing the catalog version permissions\r\n     */\r\n    /* @ngInject */ CatalogVersionPermissionRestService.prototype.getCatalogVersionPermissions = function (catalogId, catalogVersion) {\r\n        var _this = this;\r\n        this.validateParams(catalogId, catalogVersion);\r\n        return this.sessionService.getCurrentUsername().then(function (principal) {\r\n            var restService = _this.restServiceFactory.get(_this.URI);\r\n            return restService\r\n                .queryByPost({ principalUid: principal }, { catalogId: catalogId, catalogVersion: catalogVersion })\r\n                .then(function (_a) {\r\n                var permissionsList = _a.permissionsList;\r\n                return permissionsList[0] || {};\r\n            });\r\n        });\r\n    };\r\n    // TODO: When everything has been migrated to typescript it is sufficient enough to remove this validation.\r\n    /* @ngInject */ CatalogVersionPermissionRestService.prototype.validateParams = function (catalogId, catalogVersion) {\r\n        if (!catalogId) {\r\n            throw new Error('catalog.version.permission.service.catalogid.is.required');\r\n        }\r\n        if (!catalogVersion) {\r\n            throw new Error('catalog.version.permission.service.catalogversion.is.required');\r\n        }\r\n    };\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ CatalogVersionPermissionRestService.prototype, \"getCatalogVersionPermissions\", null);\r\n    /* @ngInject */ CatalogVersionPermissionRestService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [RestServiceFactory,\r\n            ISessionService])\r\n    ], /* @ngInject */ CatalogVersionPermissionRestService);\r\n    return /* @ngInject */ CatalogVersionPermissionRestService;\r\n}());\r\nexport { /* @ngInject */ CatalogVersionPermissionRestService };\r\n//# sourceMappingURL=CatalogVersionPermissionRestService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"CatalogVersionPermissionRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/CatalogVersionPermissionRestService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EACH,qBAAqB,EACrB,eAAe,EACf,MAAM,EACN,eAAe,EACf,kBAAkB,EAClB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAmB1B;;;GAGG;AAEH;IAEI,6DACY,kBAAsC,EACtC,cAA+B;QAD/B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,mBAAc,GAAd,cAAc,CAAiB;QAH1B,QAAG,GAAG,wDAAwD,CAAC;IAI7E,CAAC;IAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyDG;IAEH,0FAA4B,GAA5B,UACI,SAAiB,EACjB,cAAsB;QAH1B,iBAgBC;QAXG,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAE/C,OAAO,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,UAAC,SAAS;YAC3D,IAAM,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAE5C,KAAI,CAAC,GAAG,CAAC,CAAC;YAEb,OAAO,WAAW;iBACb,WAAW,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,WAAA,EAAE,cAAc,gBAAA,EAAE,CAAC;iBACvE,IAAI,CAAC,UAAC,EAAmB;oBAAjB,eAAe,qBAAA;gBAAO,OAAA,eAAe,CAAC,CAAC,CAAC,IAAI,EAAE;YAAxB,CAAwB,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2GAA2G;IACnG,4EAAc,GAAtB,UAAuB,SAAiB,EAAE,cAAsB;QAC5D,IAAI,CAAC,SAAS,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;SAC/E;QAED,IAAI,CAAC,cAAc,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SACpF;IACL,CAAC;IA1BD;QADC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,qBAAqB,CAAC,EAAE,IAAI,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;;;;2GAgBrE;IAjFL;QADC,kBAAkB,EAAE;yCAIe,kBAAkB;YACtB,eAAe;2DAyF9C;IAAD,0DAAC;CAAA,AA7FD,IA6FC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/CatalogVersionPermissionRestService.d.ts","writeByteOrderMark":false,"text":"import { ISessionService, RestServiceFactory } from 'smarteditcommons';\r\nexport interface CatalogVersionSyncPermission {\r\n    canSynchronize: boolean;\r\n    targetCatalogVersion: string;\r\n}\r\nexport interface CatalogVersionPermissionMap {\r\n    key: string;\r\n    value: string;\r\n}\r\nexport interface CatalogVersionPermission {\r\n    catalogId: string;\r\n    catalogVersion: string;\r\n    permissions: CatalogVersionPermissionMap[];\r\n    syncPermissions: CatalogVersionSyncPermission[];\r\n}\r\n/**\r\n * The catalog version permission service is used to check if the current user has been granted certain permissions\r\n * on a given catalog ID and catalog Version.\r\n */\r\nexport declare class CatalogVersionPermissionRestService {\r\n    private restServiceFactory;\r\n    private sessionService;\r\n    private readonly URI;\r\n    constructor(restServiceFactory: RestServiceFactory, sessionService: ISessionService);\r\n    /**\r\n     * This method returns permissions from the Catalog Version Permissions Service API.\r\n     *\r\n     * Sample Request:\r\n     * POST /permissionswebservices/v1/permissions/catalogs/search?catalogId=apparel-deContentCatalog&catalogVersion=Online\r\n     *\r\n     * Sample Response from API:\r\n     * {\r\n     * \"permissionsList\": [\r\n     *     {\r\n     *       \"catalogId\": \"apparel-deContentCatalog\",\r\n     *       \"catalogVersion\": \"Online\",\r\n     *       \"permissions\": [\r\n     *         {\r\n     *           \"key\": \"read\",\r\n     *           \"value\": \"true\"\r\n     *         },\r\n     *         {\r\n     *           \"key\": \"write\",\r\n     *           \"value\": \"false\"\r\n     *         }\r\n     *       ],\r\n     *      \"syncPermissions\": [\r\n     *        {\r\n     *          \"canSynchronize\": \"true\",\r\n     *          \"targetCatalogVersion\": \"Online\"\r\n     *        }\r\n     *     }\r\n     *    ]\r\n     * }\r\n     *\r\n     * Sample Response returned by the service:\r\n     * {\r\n     *   \"catalogId\": \"apparel-deContentCatalog\",\r\n     *   \"catalogVersion\": \"Online\",\r\n     *   \"permissions\": [\r\n     *      {\r\n     *        \"key\": \"read\",\r\n     *        \"value\": \"true\"\r\n     *      },\r\n     *      {\r\n     *        \"key\": \"write\",\r\n     *        \"value\": \"false\"\r\n     *      }\r\n     *     ],\r\n     *    \"syncPermissions\": [\r\n     *      {\r\n     *        \"canSynchronize\": \"true\",\r\n     *        \"targetCatalogVersion\": \"Online\"\r\n     *      }\r\n     *    ]\r\n     *  }\r\n     *\r\n     * @param catalogId The Catalog ID\r\n     * @param catalogVersion The Catalog Version name\r\n     *\r\n     * @returns A Promise which returns an object exposing a permissions array containing the catalog version permissions\r\n     */\r\n    getCatalogVersionPermissions(catalogId: string, catalogVersion: string): Promise<CatalogVersionPermission | any>;\r\n    private validateParams;\r\n}\r\n"}}
