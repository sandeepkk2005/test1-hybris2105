{"code":"import { __decorate, __metadata, __spreadArrays } from \"tslib\";\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\r\nimport { EVENT_NOTIFICATION_CHANGED, GatewayProxied, INotificationService, LogService, SeDowngradeService, SystemEventService } from 'smarteditcommons';\r\n/**\r\n * The notification service is used to display visual cues to inform the user of the state of the application.\r\n */\r\n/** @internal */\r\nvar /* @ngInject */ NotificationService = /** @class */ (function () {\r\n    function /* @ngInject */ NotificationService(systemEventService, logService) {\r\n        this.systemEventService = systemEventService;\r\n        this.logService = logService;\r\n        this.notificationsChangeAction = new BehaviorSubject(undefined);\r\n        this.notifications = new BehaviorSubject([]);\r\n        this.initNotificationsChangeAction();\r\n    }\r\n    /* @ngInject */ NotificationService.prototype.ngOnDestroy = function () {\r\n        this.notifications.unsubscribe();\r\n        this.notificationsChangeAction.unsubscribe();\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.pushNotification = function (configuration) {\r\n        this._validate(configuration);\r\n        var action = {\r\n            type: \"PUSH\" /* PUSH */,\r\n            payload: configuration\r\n        };\r\n        this.notificationsChangeAction.next(action);\r\n        return Promise.resolve();\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.removeNotification = function (notificationId) {\r\n        var action = {\r\n            type: \"REMOVE\" /* REMOVE */,\r\n            payload: {\r\n                id: notificationId\r\n            }\r\n        };\r\n        this.notificationsChangeAction.next(action);\r\n        return Promise.resolve();\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.removeAllNotifications = function () {\r\n        var action = {\r\n            type: \"REMOVE_ALL\" /* REMOVE_ALL */\r\n        };\r\n        this.notificationsChangeAction.next(action);\r\n        return Promise.resolve();\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.isNotificationDisplayed = function (notificationId) {\r\n        return !!this.getNotification(notificationId);\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.getNotification = function (notificationId) {\r\n        return this.notifications\r\n            .getValue()\r\n            .find(function (notification) { return notification.id === notificationId; });\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.getNotifications = function () {\r\n        return this.notifications.asObservable();\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.initNotificationsChangeAction = function () {\r\n        var _this = this;\r\n        this.notificationsChangeAction\r\n            .pipe(distinctUntilChanged(function (_, action) { return _this.emitWhenActionIsAvailable(action); }), \r\n        // Skip first emission with \"undefined\" value.\r\n        // First \"undefined\" is needed for invoking distinctUntilChanged (which requires at least 2 values emited) when first notification is added.\r\n        skip(1), map(function (action) { return _this.resolveNotifications(action); }))\r\n            .subscribe(function (notifications) {\r\n            _this.notifications.next(notifications);\r\n            _this.systemEventService.publishAsync(EVENT_NOTIFICATION_CHANGED);\r\n        });\r\n    };\r\n    /**\r\n     * Meant for case when a user has quickly pressed ESC key multiple times.\r\n     * There might be some delay when adding / removing a notification because these methods are called in async context.\r\n     * This may lead to the situation where notification has not yet been removed, but ESC key has called the pushNotification.\r\n     *\r\n     * @returns false (emit), true (do not emit)\r\n     */\r\n    /* @ngInject */ NotificationService.prototype.emitWhenActionIsAvailable = function (action) {\r\n        var newNotification = action.payload;\r\n        var notification = (action.type === \"PUSH\" /* PUSH */ ||\r\n            action.type === \"REMOVE\" /* REMOVE */) &&\r\n            this.getNotification(newNotification.id);\r\n        switch (action.type) {\r\n            case \"PUSH\" /* PUSH */:\r\n                if (notification) {\r\n                    this.logService.debug(\"Notification already exists for id:\\\"\" + newNotification.id + \"\\\"\");\r\n                    return true;\r\n                }\r\n                return false;\r\n            case \"REMOVE\" /* REMOVE */:\r\n                if (!notification) {\r\n                    this.logService.debug(\"Attempt to remove a non existing notification for id:\\\"\" + newNotification.id + \"\\\"\");\r\n                    return true;\r\n                }\r\n                return false;\r\n            case \"REMOVE_ALL\" /* REMOVE_ALL */:\r\n                return false;\r\n        }\r\n    };\r\n    /* @ngInject */ NotificationService.prototype.resolveNotifications = function (action) {\r\n        var newNotification = action.payload;\r\n        switch (action.type) {\r\n            case \"PUSH\" /* PUSH */:\r\n                return __spreadArrays(this.notifications.getValue(), [newNotification]);\r\n            case \"REMOVE\" /* REMOVE */:\r\n                return this.notifications\r\n                    .getValue()\r\n                    .filter(function (notification) { return notification.id !== newNotification.id; });\r\n            case \"REMOVE_ALL\" /* REMOVE_ALL */:\r\n                return [];\r\n        }\r\n    };\r\n    /* @ngInject */ NotificationService.prototype._validate = function (configuration) {\r\n        var _a = configuration || {}, id = _a.id, template = _a.template, templateUrl = _a.templateUrl, componentName = _a.componentName;\r\n        if (!configuration) {\r\n            throw new Error('notificationService.pushNotification: Configuration is required');\r\n        }\r\n        if (!id) {\r\n            throw new Error('notificationService.pushNotification: Notification ID cannot be undefined or null or empty');\r\n        }\r\n        if (!template && !templateUrl && !componentName) {\r\n            throw new Error('notificationService.pushNotification: Configuration must contain a componentName, template, templateUrl');\r\n        }\r\n        if ((template && (templateUrl || componentName)) ||\r\n            (templateUrl && (template || componentName)) ||\r\n            (componentName && (template || templateUrl))) {\r\n            throw new Error('notificationService.pushNotification: Only one template type is allowed for Configuration: componentName, template, templateUrl');\r\n        }\r\n    };\r\n    /* @ngInject */ NotificationService = __decorate([\r\n        SeDowngradeService(INotificationService),\r\n        GatewayProxied('pushNotification', 'removeNotification', 'removeAllNotifications'),\r\n        __metadata(\"design:paramtypes\", [SystemEventService, LogService])\r\n    ], /* @ngInject */ NotificationService);\r\n    return /* @ngInject */ NotificationService;\r\n}());\r\nexport { /* @ngInject */ NotificationService };\r\n//# sourceMappingURL=NotificationServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"NotificationServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/notifications/NotificationServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/notifications/NotificationServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { OnDestroy } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { INotificationConfiguration, INotificationService, LogService, SystemEventService } from 'smarteditcommons';\r\n/**\r\n * The notification service is used to display visual cues to inform the user of the state of the application.\r\n */\r\n/** @internal */\r\nexport declare class NotificationService implements INotificationService, OnDestroy {\r\n    private systemEventService;\r\n    private logService;\r\n    private notificationsChangeAction;\r\n    private notifications;\r\n    constructor(systemEventService: SystemEventService, logService: LogService);\r\n    ngOnDestroy(): void;\r\n    pushNotification(configuration: INotificationConfiguration): Promise<void>;\r\n    removeNotification(notificationId: string): Promise<void>;\r\n    removeAllNotifications(): Promise<void>;\r\n    isNotificationDisplayed(notificationId: string): boolean;\r\n    getNotification(notificationId: string): INotificationConfiguration;\r\n    getNotifications(): Observable<INotificationConfiguration[]>;\r\n    private initNotificationsChangeAction;\r\n    /**\r\n     * Meant for case when a user has quickly pressed ESC key multiple times.\r\n     * There might be some delay when adding / removing a notification because these methods are called in async context.\r\n     * This may lead to the situation where notification has not yet been removed, but ESC key has called the pushNotification.\r\n     *\r\n     * @returns false (emit), true (do not emit)\r\n     */\r\n    private emitWhenActionIsAvailable;\r\n    private resolveNotifications;\r\n    private _validate;\r\n}\r\n"}}
