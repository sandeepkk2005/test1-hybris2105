/// <reference types="angular-translate" />
import * as angular from 'angular';
import { PersonalizationsmarteditRestService } from 'personalizationsmarteditcontainer/service/PersonalizationsmarteditRestService';
import { PersonalizationsmarteditMessageHandler } from 'personalizationcommons';
import { PaginationHelper } from 'personalizationcommons';
import { TriggerTabService } from '../multipleTriggersComponent/TriggerTabService';
import { PersonalizationsmarteditUtils } from 'personalizationcommons';
export declare class PersonalizationsmarteditSegmentViewComponent {
    private personalizationsmarteditRestService;
    private personalizationsmarteditMessageHandler;
    private personalizationsmarteditTriggerService;
    private personalizationsmarteditUtils;
    private $timeout;
    protected $translate: angular.translate.ITranslateService;
    private confirmationModalService;
    private triggerTabService;
    triggers: any;
    expression: any;
    elementToScroll: any;
    scrollZoneVisible: any;
    actions: any;
    segments: [];
    segmentPagination: PaginationHelper;
    highlightedContainer: any;
    singleSegment: any;
    treeOptions: {
        dragStart: () => void;
        dropped: (e: any) => void;
        dragMove: (e: any) => void;
    };
    private moreSegmentRequestProcessing;
    private dropzoneItem;
    private initExpression;
    private segmentFilter;
    private elementToDuplicate;
    private _elementToScrollHeight;
    get elementToScrollHeight(): any;
    set elementToScrollHeight(newVal: any);
    constructor(personalizationsmarteditRestService: PersonalizationsmarteditRestService, personalizationsmarteditMessageHandler: PersonalizationsmarteditMessageHandler, personalizationsmarteditTriggerService: any, personalizationsmarteditUtils: PersonalizationsmarteditUtils, $timeout: any, $translate: angular.translate.ITranslateService, confirmationModalService: any, triggerTabService: TriggerTabService);
    $onInit(): void;
    getElementToScroll(): any;
    removeItem(scope: any): void;
    duplicateItem(elementToDuplicate: any): void;
    toggle(scope: any): void;
    newSubItem(scope: any, type: any): void;
    segmentSearchInputKeypress(keyEvent: any, searchObj: any): void;
    segmentSelectedEvent(item: any): void;
    addMoreSegmentItems(): void;
    isTopContainer(element: any): boolean;
    isContainerWithDropzone(element: any): any;
    isItem(element: any): any;
    isDropzone(element: any): any;
    isContainer(element: any): any;
    private getSegmentsFilterObject;
    private findElementAndDuplicate;
    private removeDropzoneItem;
    private fixEmptyContainer;
    private isScrollZoneVisible;
    private isEmptyContainer;
}
