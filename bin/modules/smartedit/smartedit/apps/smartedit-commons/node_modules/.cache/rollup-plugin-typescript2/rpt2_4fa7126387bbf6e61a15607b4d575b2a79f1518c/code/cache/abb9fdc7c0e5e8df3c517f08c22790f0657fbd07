{"code":"/**\r\n * The interface defines the methods required to detect when the mouse leaves the notification panel\r\n * in the SmartEdit application and in the SmartEdit container.\r\n *\r\n * It is solely meant to be used with the notificationService.\r\n */\r\nvar INotificationMouseLeaveDetectionService = /** @class */ (function () {\r\n    function INotificationMouseLeaveDetectionService() {\r\n    }\r\n    /**\r\n     * This method starts tracking the movement of the mouse pointer in order to detect when it\r\n     * leaves the notification panel.\r\n     *\r\n     * The innerBounds parameter is considered optional. If it is not provided, it will not be\r\n     * validated and detection will only be started in the SmartEdit container.\r\n     *\r\n     * Here is an example of a bounds object:\r\n     *\r\n     * {\r\n     *     x: 100,\r\n     *     y: 100,\r\n     *     width: 200,\r\n     *     height: 50\r\n     * }\r\n     *\r\n     * This method will throw an error if:\r\n     *     - the bounds parameter is not provided\r\n     *     - a bounds object does not contain the X coordinate\r\n     *     - a bounds object does not contain the Y coordinate\r\n     *     - a bounds object does not contain the width dimension\r\n     *     - a bounds object does not contain the height dimension\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype.startDetection = function (outerBounds, innerBounds, callback) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method stops tracking the movement of the mouse pointer.\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype.stopDetection = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method is used to start tracking the movement of the mouse pointer within the iFrame.\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype._remoteStartDetection = function (bound) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method is used to stop tracking the movement of the mouse pointer within the iFrame.\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype._remoteStopDetection = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method is used to call the callback function when it is detected from within the iFrame that\r\n     * the mouse left the notification panel\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype._callCallback = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method is called for each mouse movement. It evaluates whether or not the\r\n     * mouse pointer is in the notification panel. If it isn't, it calls the onMouseLeave.\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype._onMouseMove = function (event) {\r\n        var _this = this;\r\n        this._getBounds().then(function (bounds) {\r\n            var isOutsideX = bounds &&\r\n                event &&\r\n                (event.clientX < bounds.x || event.clientX > bounds.x + bounds.width);\r\n            var isOutsideY = bounds &&\r\n                event &&\r\n                (event.clientY < bounds.y || event.clientY > bounds.y + bounds.height);\r\n            if (isOutsideX || isOutsideY) {\r\n                _this._onMouseLeave();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * This method gets bounds\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype._getBounds = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method gets callback\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype._getCallback = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method is triggered when the service has detected that the mouse left the\r\n     * notification panel. It will execute the callback function and stop detection.\r\n     */\r\n    INotificationMouseLeaveDetectionService.prototype._onMouseLeave = function () {\r\n        var _this = this;\r\n        this._getCallback().then(function (callback) {\r\n            if (callback) {\r\n                callback();\r\n                _this.stopDetection();\r\n            }\r\n            else {\r\n                _this._callCallback().then(function () {\r\n                    _this.stopDetection();\r\n                });\r\n            }\r\n        });\r\n    };\r\n    return INotificationMouseLeaveDetectionService;\r\n}());\r\nexport { INotificationMouseLeaveDetectionService };\r\n//# sourceMappingURL=INotificationMouseLeaveDetectionService.js.map","references":[],"map":"{\"version\":3,\"file\":\"INotificationMouseLeaveDetectionService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/INotificationMouseLeaveDetectionService.ts\"],\"names\":[],\"mappings\":\"AAaA;;;;;GAKG;AACH;IAAA;IAoHA,CAAC;IAnHG;;;;;;;;;;;;;;;;;;;;;;OAsBG;IAEH,gEAAc,GAAd,UAAe,WAAmB,EAAE,WAAmB,EAAE,QAAmB;QACxE,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,+DAAa,GAAb;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,uEAAqB,GAA/B,UAAgC,KAAa;QACzC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,sEAAoB,GAA9B;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACO,+DAAa,GAAvB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACO,8DAAY,GAAtB,UAAuB,KAAiB;QAAxC,iBAeC;QAdG,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAC,MAAc;YAClC,IAAM,UAAU,GACZ,MAAM;gBACN,KAAK;gBACL,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC1E,IAAM,UAAU,GACZ,MAAM;gBACN,KAAK;gBACL,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAE3E,IAAI,UAAU,IAAI,UAAU,EAAE;gBAC1B,KAAI,CAAC,aAAa,EAAE,CAAC;aACxB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACO,4DAAU,GAApB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,8DAAY,GAAtB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,+DAAa,GAArB;QAAA,iBAWC;QAVG,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAC,QAAoB;YAC1C,IAAI,QAAQ,EAAE;gBACV,QAAQ,EAAE,CAAC;gBACX,KAAI,CAAC,aAAa,EAAE,CAAC;aACxB;iBAAM;gBACH,KAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC;oBACtB,KAAI,CAAC,aAAa,EAAE,CAAC;gBACzB,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,8CAAC;AAAD,CAAC,AApHD,IAoHC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/interfaces/INotificationMouseLeaveDetectionService.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Interface for mouse bounds\r\n */\r\nexport interface IBound {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n/**\r\n * The interface defines the methods required to detect when the mouse leaves the notification panel\r\n * in the SmartEdit application and in the SmartEdit container.\r\n *\r\n * It is solely meant to be used with the notificationService.\r\n */\r\nexport declare abstract class INotificationMouseLeaveDetectionService {\r\n    /**\r\n     * This method starts tracking the movement of the mouse pointer in order to detect when it\r\n     * leaves the notification panel.\r\n     *\r\n     * The innerBounds parameter is considered optional. If it is not provided, it will not be\r\n     * validated and detection will only be started in the SmartEdit container.\r\n     *\r\n     * Here is an example of a bounds object:\r\n     *\r\n     * {\r\n     *     x: 100,\r\n     *     y: 100,\r\n     *     width: 200,\r\n     *     height: 50\r\n     * }\r\n     *\r\n     * This method will throw an error if:\r\n     *     - the bounds parameter is not provided\r\n     *     - a bounds object does not contain the X coordinate\r\n     *     - a bounds object does not contain the Y coordinate\r\n     *     - a bounds object does not contain the width dimension\r\n     *     - a bounds object does not contain the height dimension\r\n     */\r\n    startDetection(outerBounds: IBound, innerBounds: IBound, callback: () => any): Promise<void>;\r\n    /**\r\n     * This method stops tracking the movement of the mouse pointer.\r\n     */\r\n    stopDetection(): Promise<void>;\r\n    /**\r\n     * This method is used to start tracking the movement of the mouse pointer within the iFrame.\r\n     */\r\n    protected _remoteStartDetection(bound: IBound): Promise<void>;\r\n    /**\r\n     * This method is used to stop tracking the movement of the mouse pointer within the iFrame.\r\n     */\r\n    protected _remoteStopDetection(): Promise<void>;\r\n    /**\r\n     * This method is used to call the callback function when it is detected from within the iFrame that\r\n     * the mouse left the notification panel\r\n     */\r\n    protected _callCallback(): Promise<void>;\r\n    /**\r\n     * This method is called for each mouse movement. It evaluates whether or not the\r\n     * mouse pointer is in the notification panel. If it isn't, it calls the onMouseLeave.\r\n     */\r\n    protected _onMouseMove(event: MouseEvent): void;\r\n    /**\r\n     * This method gets bounds\r\n     */\r\n    protected _getBounds(): Promise<IBound>;\r\n    /**\r\n     * This method gets callback\r\n     */\r\n    protected _getCallback(): Promise<() => void>;\r\n    /**\r\n     * This method is triggered when the service has detected that the mouse left the\r\n     * notification panel. It will execute the callback function and stop detection.\r\n     */\r\n    private _onMouseLeave;\r\n}\r\n"}}
