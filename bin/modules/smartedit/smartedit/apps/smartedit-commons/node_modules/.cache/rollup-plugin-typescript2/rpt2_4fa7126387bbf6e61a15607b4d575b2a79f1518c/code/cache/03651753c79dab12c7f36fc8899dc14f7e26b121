{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { LogService } from '@smart/utils';\r\nimport { SeDowngradeService } from '../di';\r\n/**\r\n * Helper to handle competing promises\r\n */\r\nvar /* @ngInject */ DiscardablePromiseUtils = /** @class */ (function () {\r\n    function /* @ngInject */ DiscardablePromiseUtils(logService) {\r\n        this.logService = logService;\r\n        this._map = {};\r\n    }\r\n    /**\r\n     * Selects a new promise as candidate for invoking a given callback\r\n     * each invocation of this method for a given key discards the previously selected promise\r\n     * @param key The string key identifying the discardable promise\r\n     * @param promise The discardable promise instance once a new candidate is called with this method\r\n     * @param successCallback The success callback to ultimately apply on the last promise not discarded\r\n     * @param failureCallback The failure callback to ultimately apply on the last promise not discarded. Optional.\r\n     */\r\n    /* @ngInject */ DiscardablePromiseUtils.prototype.apply = function (key, promise, successCallback, failureCallback) {\r\n        if (!this._map[key]) {\r\n            this._map[key] = {\r\n                promise: promise,\r\n                successCallback: successCallback,\r\n                failureCallback: failureCallback\r\n            };\r\n        }\r\n        else {\r\n            this.logService.debug(\"competing promise for key \" + key);\r\n            delete this._map[key].discardableHolder.successCallback;\r\n            delete this._map[key].discardableHolder.failureCallback;\r\n            this._map[key].promise = promise;\r\n        }\r\n        this._map[key].discardableHolder = {\r\n            successCallback: this._map[key].successCallback,\r\n            failureCallback: this._map[key].failureCallback\r\n        };\r\n        var self = this;\r\n        var p = this._map[key].promise;\r\n        p.then(function (response) {\r\n            if (this.successCallback) {\r\n                delete self._map[key];\r\n                this.successCallback.apply(undefined, arguments);\r\n            }\r\n            else {\r\n                self.logService.debug(\"aborted successCallback for promise identified by \" + key);\r\n            }\r\n        }.bind(this._map[key].discardableHolder), function (error) {\r\n            if (this.failureCallback) {\r\n                delete self._map[key];\r\n                this.failureCallback.apply(undefined, arguments);\r\n            }\r\n            else {\r\n                self.logService.debug(\"aborted failureCallback for promise identified by \" + key);\r\n            }\r\n        }.bind(this._map[key].discardableHolder));\r\n    };\r\n    /**\r\n     * Removes callbacks of promise if exists.\r\n     *\r\n     * Used to remove any pending callbacks when a component is destroyed to prevent memory leaks.\r\n     */\r\n    /* @ngInject */ DiscardablePromiseUtils.prototype.clear = function (key) {\r\n        if (this.exists(key)) {\r\n            delete this._map[key].discardableHolder.successCallback;\r\n            delete this._map[key].discardableHolder.failureCallback;\r\n        }\r\n    };\r\n    /* @ngInject */ DiscardablePromiseUtils.prototype.exists = function (key) {\r\n        return this._map[key] ? true : false;\r\n    };\r\n    /* @ngInject */ DiscardablePromiseUtils = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [LogService])\r\n    ], /* @ngInject */ DiscardablePromiseUtils);\r\n    return /* @ngInject */ DiscardablePromiseUtils;\r\n}());\r\nexport { /* @ngInject */ DiscardablePromiseUtils };\r\n//# sourceMappingURL=DiscardablePromiseUtils.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"DiscardablePromiseUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/DiscardablePromiseUtils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/utils/DiscardablePromiseUtils.d.ts","writeByteOrderMark":false,"text":"import { LogService } from '@smart/utils';\r\nimport * as angular from 'angular';\r\nexport interface DiscardablePromise<T> {\r\n    promise: angular.IPromise<T> | Promise<T>;\r\n    successCallback: (...args: any[]) => any;\r\n    failureCallback: (...args: any[]) => any;\r\n    discardableHolder?: {\r\n        successCallback: (...args: any[]) => any;\r\n        failureCallback: (...args: any[]) => any;\r\n    };\r\n}\r\n/**\r\n * Helper to handle competing promises\r\n */\r\nexport declare class DiscardablePromiseUtils {\r\n    private logService;\r\n    private _map;\r\n    constructor(logService: LogService);\r\n    /**\r\n     * Selects a new promise as candidate for invoking a given callback\r\n     * each invocation of this method for a given key discards the previously selected promise\r\n     * @param key The string key identifying the discardable promise\r\n     * @param promise The discardable promise instance once a new candidate is called with this method\r\n     * @param successCallback The success callback to ultimately apply on the last promise not discarded\r\n     * @param failureCallback The failure callback to ultimately apply on the last promise not discarded. Optional.\r\n     */\r\n    apply<T>(key: string, promise: angular.IPromise<T> | Promise<T>, successCallback: (arg: T) => any, failureCallback?: (arg: Error) => any): void;\r\n    /**\r\n     * Removes callbacks of promise if exists.\r\n     *\r\n     * Used to remove any pending callbacks when a component is destroyed to prevent memory leaks.\r\n     */\r\n    clear(key: string): void;\r\n    private exists;\r\n}\r\n"}}
