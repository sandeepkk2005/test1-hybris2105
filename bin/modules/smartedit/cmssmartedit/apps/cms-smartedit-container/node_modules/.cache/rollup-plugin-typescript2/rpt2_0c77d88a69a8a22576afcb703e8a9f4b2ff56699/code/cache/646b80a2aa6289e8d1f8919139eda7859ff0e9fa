{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { SeDowngradeComponent } from 'smarteditcommons';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"ItemManagementComponent\", {\r\n    selector: 'se-item-manager',\r\n    template: \"<div><se-generic-editor [id]=\\\"editorId\\\" [smarteditComponentId]=\\\"itemId\\\" [smarteditComponentType]=\\\"componentType\\\" [structureApi]=\\\"structureApi\\\" [content]=\\\"item\\\" [contentApi]=\\\"contentApi\\\" [(isDirty)]=\\\"isDirtyInternal\\\" [(submit)]=\\\"submit\\\" [uriContext]=\\\"uriContext\\\" [reset]=\\\"reset\\\"></se-generic-editor></div>\"\r\n});\r\nvar /* @ngInject */ ItemManagementComponent = /** @class */ (function () {\r\n    function /* @ngInject */ ItemManagementComponent() {\r\n        this.supportedModes = ['add', 'edit', 'create'];\r\n        this.editorId = 'se-item-management-editor';\r\n        this.isDirtyChange = new EventEmitter();\r\n        this.submitFunctionChange = new EventEmitter();\r\n        this.reset = true;\r\n    }\r\n    /* @ngInject */ ItemManagementComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.validateMode();\r\n        this.submitFunctionChange.emit(function () { return _this.submitInternal(); });\r\n        this.isDirtyChange.emit(function () { return _this.isDirtyLocal(); });\r\n        if (!this.componentType && this.item) {\r\n            this.componentType = this.item.typeCode;\r\n        }\r\n        if (!this.item) {\r\n            this.itemId = null;\r\n        }\r\n        if (this.item && this.item.uuid) {\r\n            this.itemId = this.item.uuid;\r\n        }\r\n        else if (this.item && this.item.uid) {\r\n            this.itemId = this.item.uid;\r\n        }\r\n    };\r\n    /* @ngInject */ ItemManagementComponent.prototype.ngOnChanges = function (changes) {\r\n        var itemChange = changes.item;\r\n        if (itemChange) {\r\n            this.itemId = null;\r\n            if (this.item && this.item.uuid) {\r\n                this.itemId = this.item.uuid;\r\n            }\r\n            else if (this.item && this.item.uid) {\r\n                this.itemId = this.item.uid;\r\n            }\r\n        }\r\n    };\r\n    /* @ngInject */ ItemManagementComponent.prototype.validateMode = function () {\r\n        if (!this.supportedModes.includes(this.mode)) {\r\n            throw 'ItemManagementComponent.ngOnInit() - Mode not supported: ' + this.mode;\r\n        }\r\n    };\r\n    /* @ngInject */ ItemManagementComponent.prototype.submitInternal = function () {\r\n        switch (this.mode.toLowerCase()) {\r\n            case 'add':\r\n                return Promise.resolve(this.item);\r\n            case 'edit':\r\n                return this.submit();\r\n            case 'create':\r\n                return this.submit().then(function (itemResponse) { return itemResponse; });\r\n            default:\r\n                throw \"ItemManagementController - The given mode [\" + this.mode + \"] has not been implemented for this component\";\r\n        }\r\n    };\r\n    /* @ngInject */ ItemManagementComponent.prototype.isDirtyLocal = function () {\r\n        if (this.isDirtyInternal) {\r\n            return this.isDirtyInternal();\r\n        }\r\n        return false;\r\n    };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"item\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"uriContext\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"mode\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"contentApi\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"structureApi\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"componentType\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"isDirty\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"submitFunction\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"isDirtyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], /* @ngInject */ ItemManagementComponent.prototype, \"submitFunctionChange\", void 0);\r\n    /* @ngInject */ ItemManagementComponent = __decorate([\r\n        SeDowngradeComponent(),\r\n        Component({\r\n            selector: 'se-item-manager',\r\n            template: \"<div><se-generic-editor [id]=\\\"editorId\\\" [smarteditComponentId]=\\\"itemId\\\" [smarteditComponentType]=\\\"componentType\\\" [structureApi]=\\\"structureApi\\\" [content]=\\\"item\\\" [contentApi]=\\\"contentApi\\\" [(isDirty)]=\\\"isDirtyInternal\\\" [(submit)]=\\\"submit\\\" [uriContext]=\\\"uriContext\\\" [reset]=\\\"reset\\\"></se-generic-editor></div>\"\r\n        }),\r\n        __metadata(\"design:paramtypes\", [])\r\n    ], /* @ngInject */ ItemManagementComponent);\r\n    return /* @ngInject */ ItemManagementComponent;\r\n}());\r\nexport { /* @ngInject */ ItemManagementComponent };\r\n//# sourceMappingURL=ItemManagerComponent.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ItemManagerComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/itemManagement/ItemManagerComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/itemManagement/ItemManagerComponent.d.ts","writeByteOrderMark":false,"text":"import { EventEmitter, OnInit, SimpleChanges } from '@angular/core';\r\nimport { CMSItem } from 'cmscommons';\r\nimport { IUriContext } from 'smarteditcommons';\r\nexport declare class ItemManagementComponent implements OnInit {\r\n    item: CMSItem;\r\n    uriContext: IUriContext;\r\n    mode: string;\r\n    contentApi: string;\r\n    structureApi: string;\r\n    componentType?: string;\r\n    isDirty: () => boolean;\r\n    submitFunction: () => Promise<CMSItem>;\r\n    isDirtyChange: EventEmitter<() => boolean>;\r\n    submitFunctionChange: EventEmitter<() => Promise<CMSItem>>;\r\n    editorId: string;\r\n    itemId: string;\r\n    submit: () => Promise<CMSItem>;\r\n    isDirtyInternal: () => boolean;\r\n    reset: boolean;\r\n    private readonly supportedModes;\r\n    constructor();\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    private validateMode;\r\n    private submitInternal;\r\n    private isDirtyLocal;\r\n}\r\n"}}
