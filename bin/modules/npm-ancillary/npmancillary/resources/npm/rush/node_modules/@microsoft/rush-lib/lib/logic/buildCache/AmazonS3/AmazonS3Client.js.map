{"version":3,"file":"AmazonS3Client.js","sourceRoot":"","sources":["../../../../src/logic/buildCache/AmazonS3/AmazonS3Client.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as crypto from 'crypto';\r\nimport * as fetch from 'node-fetch';\r\n\r\nimport { IAmazonS3BuildCacheProviderOptions } from './AmazonS3BuildCacheProvider';\r\nimport { IPutFetchOptions, IGetFetchOptions, WebClient } from '../../../utilities/WebClient';\r\n\r\nconst CONTENT_HASH_HEADER_NAME: 'x-amz-content-sha256' = 'x-amz-content-sha256';\r\nconst DATE_HEADER_NAME: 'x-amz-date' = 'x-amz-date';\r\nconst HOST_HEADER_NAME: 'host' = 'host';\r\n\r\nexport interface IAmazonS3Credentials {\r\n  accessKeyId: string;\r\n  secretAccessKey: string;\r\n}\r\n\r\ninterface IIsoDateString {\r\n  date: string;\r\n  dateTime: string;\r\n}\r\n\r\nexport class AmazonS3Client {\r\n  private readonly _credentials: IAmazonS3Credentials | undefined;\r\n  private readonly _s3Bucket: string;\r\n  private readonly _s3Region: string;\r\n\r\n  private readonly _webClient: WebClient;\r\n\r\n  public constructor(\r\n    credentials: IAmazonS3Credentials | undefined,\r\n    options: IAmazonS3BuildCacheProviderOptions\r\n  ) {\r\n    this._credentials = credentials;\r\n\r\n    this._validateBucketName(options.s3Bucket);\r\n\r\n    this._s3Bucket = options.s3Bucket;\r\n    this._s3Region = options.s3Region;\r\n\r\n    this._webClient = new WebClient();\r\n  }\r\n\r\n  public static tryDeserializeCredentials(\r\n    credentialString: string | undefined\r\n  ): IAmazonS3Credentials | undefined {\r\n    if (!credentialString) {\r\n      return undefined;\r\n    }\r\n\r\n    const splitIndex: number = credentialString.indexOf(':');\r\n    if (splitIndex === -1) {\r\n      throw new Error('Amazon S3 credential is in an unexpected format.');\r\n    }\r\n\r\n    return {\r\n      accessKeyId: credentialString.substring(0, splitIndex),\r\n      secretAccessKey: credentialString.substring(splitIndex + 1)\r\n    };\r\n  }\r\n\r\n  public async getObjectAsync(objectName: string): Promise<Buffer | undefined> {\r\n    const response: fetch.Response = await this._makeRequestAsync('GET', objectName);\r\n    if (response.ok) {\r\n      return await response.buffer();\r\n    } else if (response.status === 404) {\r\n      return undefined;\r\n    } else if (response.status === 403 && !this._credentials) {\r\n      return undefined;\r\n    } else {\r\n      this._throwS3Error(response);\r\n    }\r\n  }\r\n\r\n  public async uploadObjectAsync(objectName: string, objectBuffer: Buffer): Promise<void> {\r\n    if (!this._credentials) {\r\n      throw new Error('Credentials are required to upload objects to S3.');\r\n    }\r\n\r\n    const response: fetch.Response = await this._makeRequestAsync('PUT', objectName, objectBuffer);\r\n    if (!response.ok) {\r\n      this._throwS3Error(response);\r\n    }\r\n  }\r\n\r\n  private async _makeRequestAsync(\r\n    verb: 'GET' | 'PUT',\r\n    objectName: string,\r\n    body?: Buffer\r\n  ): Promise<fetch.Response> {\r\n    const isoDateString: IIsoDateString = this._getIsoDateString();\r\n    const bodyHash: string = this._getSha256(body);\r\n    const host: string = `${this._s3Bucket}.s3.amazonaws.com`;\r\n\r\n    const headers: fetch.Headers = new fetch.Headers();\r\n    headers.set(DATE_HEADER_NAME, isoDateString.dateTime);\r\n    headers.set(CONTENT_HASH_HEADER_NAME, bodyHash);\r\n\r\n    if (this._credentials) {\r\n      // Compute the authorization header. See https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\r\n      const signedHeaderNames: string = `${HOST_HEADER_NAME};${CONTENT_HASH_HEADER_NAME};${DATE_HEADER_NAME}`;\r\n      // The canonical request looks like this:\r\n      //  GET\r\n      // /test.txt\r\n      //\r\n      // host:examplebucket.s3.amazonaws.com\r\n      // range:bytes=0-9\r\n      // x-amz-content-sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\r\n      // x-amz-date:20130524T000000Z\r\n      //\r\n      // host;range;x-amz-content-sha256;x-amz-date\r\n      // e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\r\n      const canonicalRequest: string = [\r\n        verb,\r\n        `/${objectName}`,\r\n        '', // we don't use query strings for these requests\r\n        `${HOST_HEADER_NAME}:${host}`,\r\n        `${CONTENT_HASH_HEADER_NAME}:${bodyHash}`,\r\n        `${DATE_HEADER_NAME}:${isoDateString.dateTime}`,\r\n        '',\r\n        signedHeaderNames,\r\n        bodyHash\r\n      ].join('\\n');\r\n      const canonicalRequestHash: string = this._getSha256(canonicalRequest);\r\n\r\n      const scope: string = `${isoDateString.date}/${this._s3Region}/s3/aws4_request`;\r\n      // The string to sign looks like this:\r\n      // AWS4-HMAC-SHA256\r\n      // 20130524T423589Z\r\n      // 20130524/us-east-1/s3/aws4_request\r\n      // 7344ae5b7ee6c3e7e6b0fe0640412a37625d1fbfff95c48bbb2dc43964946972\r\n      const stringToSign: string = [\r\n        'AWS4-HMAC-SHA256',\r\n        isoDateString.dateTime,\r\n        scope,\r\n        canonicalRequestHash\r\n      ].join('\\n');\r\n\r\n      const dateKey: Buffer = this._getSha256Hmac(\r\n        `AWS4${this._credentials.secretAccessKey}`,\r\n        isoDateString.date\r\n      );\r\n      const dateRegionKey: Buffer = this._getSha256Hmac(dateKey, this._s3Region);\r\n      const dateRegionServiceKey: Buffer = this._getSha256Hmac(dateRegionKey, 's3');\r\n      const signingKey: Buffer = this._getSha256Hmac(dateRegionServiceKey, 'aws4_request');\r\n      const signature: string = this._getSha256Hmac(signingKey, stringToSign, 'hex');\r\n\r\n      const authorizationHeader: string = `AWS4-HMAC-SHA256 Credential=${this._credentials.accessKeyId}/${scope},SignedHeaders=${signedHeaderNames},Signature=${signature}`;\r\n\r\n      headers.set('Authorization', authorizationHeader);\r\n    }\r\n\r\n    const webFetchOptions: IGetFetchOptions | IPutFetchOptions = {\r\n      verb,\r\n      headers\r\n    };\r\n    if (verb === 'PUT') {\r\n      (webFetchOptions as IPutFetchOptions).body = body;\r\n    }\r\n\r\n    const response: fetch.Response = await this._webClient.fetchAsync(\r\n      `https://${host}/${objectName}`,\r\n      webFetchOptions\r\n    );\r\n\r\n    return response;\r\n  }\r\n\r\n  public _getSha256Hmac(key: string | Buffer, data: string): Buffer;\r\n  public _getSha256Hmac(key: string | Buffer, data: string, encoding: 'hex'): string;\r\n  public _getSha256Hmac(key: string | Buffer, data: string, encoding?: 'hex'): Buffer | string {\r\n    const hash: crypto.Hash = crypto.createHmac('sha256', key);\r\n    hash.update(data);\r\n    if (encoding) {\r\n      return hash.digest(encoding);\r\n    } else {\r\n      return hash.digest();\r\n    }\r\n  }\r\n\r\n  private _getSha256(data?: string | Buffer): string {\r\n    if (data) {\r\n      const hash: crypto.Hash = crypto.createHash('sha256');\r\n      hash.update(data);\r\n      return hash.digest('hex');\r\n    } else {\r\n      // This is the null SHA256 hash\r\n      return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\r\n    }\r\n  }\r\n\r\n  private _getIsoDateString(date: Date = new Date()): IIsoDateString {\r\n    let dateString: string = date.toISOString();\r\n    dateString = dateString.replace(/[-:]/g, ''); // Remove separator characters\r\n    dateString = dateString.substring(0, 15); // Drop milliseconds\r\n\r\n    // dateTime is an ISO8601 date. It looks like \"20130524T423589\"\r\n    // date is an ISO date. It looks like \"20130524\"\r\n    return {\r\n      dateTime: `${dateString}Z`,\r\n      date: dateString.substring(0, 8)\r\n    };\r\n  }\r\n\r\n  private _throwS3Error(response: fetch.Response): never {\r\n    throw new Error(`Amazon S3 responded with status code ${response.status} (${response.statusText})`);\r\n  }\r\n\r\n  /**\r\n   * Validates a S3 bucket name.\r\n   * {@link https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html}\r\n   */\r\n  private _validateBucketName(s3BucketName: string): void {\r\n    if (!s3BucketName) {\r\n      throw new Error('A S3 bucket name must be provided');\r\n    }\r\n\r\n    if (!s3BucketName.match(/^[a-z\\d-.]{3,63}$/)) {\r\n      throw new Error(\r\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must only contain lowercase ` +\r\n          'alphanumerical characters, dashes, and periods and must be between 3 and 63 characters long.'\r\n      );\r\n    }\r\n\r\n    if (!s3BucketName.match(/^[a-z\\d]/)) {\r\n      throw new Error(\r\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must start with a lowercase ` +\r\n          'alphanumerical character.'\r\n      );\r\n    }\r\n\r\n    if (s3BucketName.match(/-$/)) {\r\n      throw new Error(\r\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must not end in a dash.`\r\n      );\r\n    }\r\n\r\n    if (s3BucketName.match(/(\\.\\.)|(\\.-)|(-\\.)/)) {\r\n      throw new Error(\r\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must not have consecutive periods or ` +\r\n          'dashes adjacent to periods.'\r\n      );\r\n    }\r\n\r\n    if (s3BucketName.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\r\n      throw new Error(\r\n        `The bucket name \"${s3BucketName}\" is invalid. A S3 bucket name must not be formatted as an IP address.`\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}