{"code":"//# sourceMappingURL=IStorageController.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/storage/IStorageFactory.ts"],"map":"{\"version\":3,\"file\":\"IStorageController.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/storage/IStorageController.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/storage/IStorageController.d.ts","writeByteOrderMark":false,"text":"import { IStorageFactory } from './IStorageFactory';\r\n/**\r\n *  Represents the controller for a specific type of storage.\r\n *\r\n *  When the storage manager receives a request to access, create or remove a storage, it delegates to the storage\r\n *  controller of the appropriate storage type to handle these operations.\r\n *\r\n *  The controller must be able to create {@link IStorage storages} even across multiple instances\r\n *  of the smartedit application, if it handles persisted storages.\r\n */\r\nexport interface IStorageController extends IStorageFactory {\r\n    /**\r\n     * The storage type handled by this controller. A StorageManager can only have 1 controller per type registered.\r\n     */\r\n    readonly storageType: string;\r\n    getStorageIds(): Promise<string[]>;\r\n    /**\r\n     * Permanently remove a storage and all its data.\r\n     *\r\n     * @returns A promise resolving to true when the delete operation is complete\r\n     */\r\n    deleteStorage(storageId: string): Promise<boolean>;\r\n}\r\n"}}
