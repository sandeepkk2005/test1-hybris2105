{"code":"//# sourceMappingURL=IStorageOptions.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"IStorageOptions.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/storage/IStorageOptions.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/storage/IStorageOptions.d.ts","writeByteOrderMark":false,"text":"import { Payload, Primitive } from '@smart/utils';\r\n/**\r\n * Defines the options when accessing or creating a storage.\r\n */\r\nexport interface IStorageOptions extends Payload {\r\n    [index: string]: Primitive | Primitive[] | Payload | Payload[];\r\n    /**\r\n     * A unique storage ID in the system. You can perform storage operations using only the storage ID using the\r\n     * {@link IStorageManager}\r\n     */\r\n    storageId: string;\r\n    /**\r\n     * A storage type that corresponds to the storageType of a {@link IStorageController}\r\n     * registered in the StorageManager.\r\n     */\r\n    storageType: string;\r\n    /**\r\n     * Default value = \"0\"\r\n     *\r\n     * An optional storage version. The storageVersion provides an easy way to handle changing data models of persisted\r\n     * storages. If you have a persisted storage (ex localStorage) and you change your data model of the items stored\r\n     * in that storage, the next time the application runs you could be faced with your services receiving invalid data.\r\n     *\r\n     * In this case you can either handle it yourself in a 1-time cleanup or migration script, or simple change the\r\n     * version for this storage. Whenever you access an existing storage through the StorageManager with a different\r\n     * version then was previously set, the existing storage is emptied.\r\n     */\r\n    storageVersion?: string;\r\n    /**\r\n     * Number of idle milliseconds after which the storage expires. A storage idle time is the time since the\r\n     * StorageManager last receives a getStorage() for that storage id.\r\n     *\r\n     * There is no automatic cleaning of expired storages, an accessing an expired storage will simply reset the idle\r\n     * time, so it will no longer be expired.\r\n     *\r\n     * If you want to cleanup expired storages then you must manual call [deleteExpiredStorages]{@link IStorageManager#deleteExpiredStorages}\r\n     * on the StorageManager.\r\n     */\r\n    expiresAfterIdle?: number;\r\n}\r\n"}}
