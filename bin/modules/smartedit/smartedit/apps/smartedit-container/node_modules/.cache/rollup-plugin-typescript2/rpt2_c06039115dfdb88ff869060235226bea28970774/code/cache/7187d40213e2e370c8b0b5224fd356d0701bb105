{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { ConfirmDialogComponent, FundamentalModalButtonAction, FundamentalModalButtonStyle, GatewayProxied, IConfirmationModalService, IModalService, ModalButtonActions, ModalButtonStyles, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * Service used to open a confirmation modal in which an end-user can confirm or cancel an action. A confirmation modal\r\n * consists of a title, content, and an OK and cancel button. This modal may be used in any context in which a\r\n * confirmation is required.\r\n */\r\nvar /* @ngInject */ ConfirmationModalService = /** @class */ (function () {\r\n    function /* @ngInject */ ConfirmationModalService(modalService) {\r\n        this.modalService = modalService;\r\n    }\r\n    /* @ngInject */ ConfirmationModalService.prototype.confirm = function (configuration) {\r\n        var validationMessage = this._validateConfirmationParameters(configuration.description, configuration.template, configuration.templateUrl);\r\n        if (validationMessage) {\r\n            return Promise.reject(validationMessage);\r\n        }\r\n        return this.isLegacyConfirm(configuration)\r\n            ? this.angularJsConfirm(configuration)\r\n            : this.angularConfirm(configuration);\r\n    };\r\n    /* @ngInject */ ConfirmationModalService.prototype.angularConfirm = function (configuration) {\r\n        var ref = this.modalService.open({\r\n            component: ConfirmDialogComponent,\r\n            data: {\r\n                description: configuration.description,\r\n                descriptionPlaceholders: configuration.descriptionPlaceholders\r\n            },\r\n            config: {\r\n                focusTrapped: false,\r\n                modalPanelClass: 'se-confirmation-dialog',\r\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\r\n                container: document.querySelector('[uib-modal-window]') || 'body'\r\n            },\r\n            templateConfig: {\r\n                title: configuration.title || 'se.confirmation.modal.title',\r\n                buttons: this.getButtons(configuration),\r\n                isDismissButtonVisible: true\r\n            }\r\n        });\r\n        return new Promise(function (resolve, reject) {\r\n            ref.afterClosed.subscribe(resolve, reject);\r\n        });\r\n    };\r\n    /* @ngInject */ ConfirmationModalService.prototype.angularJsConfirm = function (configuration) {\r\n        return this.modalService.open({\r\n            size: 'md',\r\n            title: configuration.title || 'se.confirmation.modal.title',\r\n            templateInline: configuration.template,\r\n            templateUrl: configuration.templateUrl,\r\n            controller: this._initializeControllerObjectWithScope(configuration),\r\n            cssClasses: 'yFrontModal',\r\n            buttons: this.getLegacyButtons(configuration)\r\n        });\r\n    };\r\n    /* @ngInject */ ConfirmationModalService.prototype.isLegacyConfirm = function (configuration) {\r\n        var config = configuration;\r\n        return !!config.template || !!config.templateUrl || !!config.scope;\r\n    };\r\n    /* @ngInject */ ConfirmationModalService.prototype.getLegacyButtons = function (configuration) {\r\n        return [\r\n            !configuration.showOkButtonOnly && {\r\n                id: 'confirmCancel',\r\n                label: 'se.confirmation.modal.cancel',\r\n                style: ModalButtonStyles.Default,\r\n                action: ModalButtonActions.Dismiss\r\n            },\r\n            {\r\n                id: 'confirmOk',\r\n                label: 'se.confirmation.modal.ok',\r\n                action: ModalButtonActions.Close\r\n            }\r\n        ].filter(function (x) { return !!x; });\r\n    };\r\n    /* @ngInject */ ConfirmationModalService.prototype.getButtons = function (configuration) {\r\n        return [\r\n            !configuration.showOkButtonOnly && {\r\n                id: 'confirmCancel',\r\n                label: 'se.confirmation.modal.cancel',\r\n                style: FundamentalModalButtonStyle.Default,\r\n                action: FundamentalModalButtonAction.Dismiss\r\n            },\r\n            {\r\n                id: 'confirmOk',\r\n                label: 'se.confirmation.modal.ok',\r\n                style: FundamentalModalButtonStyle.Primary,\r\n                action: FundamentalModalButtonAction.Close\r\n            }\r\n        ].filter(function (x) { return !!x; });\r\n    };\r\n    /* @ngInject */ ConfirmationModalService.prototype._validateConfirmationParameters = function (description, template, templateUrl) {\r\n        var checkMoreThanOnePropertySet = [description, template, templateUrl];\r\n        var numOfProperties = checkMoreThanOnePropertySet.filter(function (property) { return property !== undefined; }).length;\r\n        if (numOfProperties === 0) {\r\n            return 'You must have one of the following configuration properties configured: description, template, or templateUrl';\r\n        }\r\n        else if (numOfProperties > 1) {\r\n            return 'You have more than one of the following configuration properties configured: description, template, or templateUrl';\r\n        }\r\n        return undefined;\r\n    };\r\n    /* @ngInject */ ConfirmationModalService.prototype._initializeControllerObjectWithScope = function (configuration) {\r\n        var config = configuration;\r\n        return config.scope\r\n            ? function () {\r\n                for (var key in config.scope) {\r\n                    if (config.scope.hasOwnProperty(key)) {\r\n                        this[key] = config.scope[key];\r\n                    }\r\n                }\r\n            }\r\n            : undefined;\r\n    };\r\n    /* @ngInject */ ConfirmationModalService = __decorate([\r\n        SeDowngradeService(IConfirmationModalService),\r\n        GatewayProxied('confirm'),\r\n        __metadata(\"design:paramtypes\", [IModalService])\r\n    ], /* @ngInject */ ConfirmationModalService);\r\n    return /* @ngInject */ ConfirmationModalService;\r\n}());\r\nexport { /* @ngInject */ ConfirmationModalService };\r\n//# sourceMappingURL=ConfirmationModalServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ConfirmationModalServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ConfirmationModalServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/ConfirmationModalServiceOuter.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\nimport { ConfirmationModalConfig, IModalService, LegacyConfirmationModalConfig } from 'smarteditcommons';\r\n/**\r\n * Service used to open a confirmation modal in which an end-user can confirm or cancel an action. A confirmation modal\r\n * consists of a title, content, and an OK and cancel button. This modal may be used in any context in which a\r\n * confirmation is required.\r\n */\r\nexport declare class ConfirmationModalService {\r\n    private modalService;\r\n    constructor(modalService: IModalService);\r\n    /**\r\n     * Uses the [ModalService]{@link IModalService} to open a confirmation modal.\r\n     *\r\n     * The confirmation modal is initialized by a default i18N key as a title or by an override title passed through the\r\n     * input configuration object. The configuration object must have one and only one of the following parameters set: description, template, or templateUrl\r\n     *\r\n     *\r\n     * @param LegacyConfirmationModalConfig [LegacyConfirmationModalConfig]{@link LegacyConfirmationModalConfig}\r\n     * used to support AngularJS confirmation dialogs\r\n     *\r\n     * @param ConfirmationModalConfig [ConfirmationModalConfig]{@link ConfirmationModalConfig}\r\n     * used to support Angular confirmation dialogs\r\n     *\r\n     * @returns A promise that is resolved when the OK button is actioned or is rejected when the Cancel\r\n     * button is actioned.\r\n     */\r\n    confirm(configuration: LegacyConfirmationModalConfig): angular.IPromise<any> | Promise<any>;\r\n    confirm(configuration: ConfirmationModalConfig): Promise<any>;\r\n    private angularConfirm;\r\n    private angularJsConfirm;\r\n    private isLegacyConfirm;\r\n    private getLegacyButtons;\r\n    private getButtons;\r\n    private _validateConfirmationParameters;\r\n    private _initializeControllerObjectWithScope;\r\n}\r\n"}}
