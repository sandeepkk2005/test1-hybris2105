{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * @ngdoc object\r\n * @name utils.object:BaseValueAccessor\r\n * @description\r\n *\r\n * Class implementing {@link https://angular.io/api/forms/ControlValueAccessor ControlValueAccessor} interface used to create custom Angular inputs that\r\n * can be integrated with Angular Forms and.\r\n */\r\nvar BaseValueAccessor = /** @class */ (function () {\r\n    function BaseValueAccessor() {\r\n        this.disabled = false;\r\n        this.value = null;\r\n    }\r\n    BaseValueAccessor.prototype.onChange = function (item) {\r\n        // Is set by registerOnChange method\r\n    };\r\n    BaseValueAccessor.prototype.onTouched = function () {\r\n        // Is set by registerOnTouched method\r\n    };\r\n    BaseValueAccessor.prototype.registerOnChange = function (fn) {\r\n        this.onChange = fn;\r\n    };\r\n    BaseValueAccessor.prototype.registerOnTouched = function (fn) {\r\n        this.onTouched = fn;\r\n    };\r\n    BaseValueAccessor.prototype.setDisabledState = function (isDisabled) {\r\n        this.disabled = isDisabled;\r\n    };\r\n    BaseValueAccessor.prototype.writeValue = function (item) {\r\n        this.value = item;\r\n    };\r\n    return BaseValueAccessor;\r\n}());\r\nexport { BaseValueAccessor };\r\n//# sourceMappingURL=base-value-accessor.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/forms@8.2.14_e9fbe5720e9434eb9ae0f6720f1ca3f4/node_modules/@angular/forms/forms.d.ts"],"map":"{\"version\":3,\"file\":\"base-value-accessor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/base-value-accessor.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH;;;GAGG;AAIH;;;;;;;GAOG;AAEH;IAAA;QACW,aAAQ,GAAG,KAAK,CAAC;QACjB,UAAK,GAAO,IAAqB,CAAC;IAwB7C,CAAC;IAtBU,oCAAQ,GAAf,UAAgB,IAAO;QACnB,oCAAoC;IACxC,CAAC;IACM,qCAAS,GAAhB;QACI,qCAAqC;IACzC,CAAC;IAED,4CAAgB,GAAhB,UAAiB,EAAqB;QAClC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,6CAAiB,GAAjB,UAAkB,EAAc;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,4CAAgB,GAAhB,UAAiB,UAAmB;QAChC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED,sCAAU,GAAV,UAAW,IAAO;QACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IACL,wBAAC;AAAD,CAAC,AA1BD,IA0BC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/utils/base-value-accessor.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { ControlValueAccessor } from '@angular/forms';\r\n/**\r\n * @ngdoc object\r\n * @name utils.object:BaseValueAccessor\r\n * @description\r\n *\r\n * Class implementing {@link https://angular.io/api/forms/ControlValueAccessor ControlValueAccessor} interface used to create custom Angular inputs that\r\n * can be integrated with Angular Forms and.\r\n */\r\nexport declare abstract class BaseValueAccessor<T> implements ControlValueAccessor {\r\n    disabled: boolean;\r\n    value: T;\r\n    onChange(item: T): void;\r\n    onTouched(): void;\r\n    registerOnChange(fn: (item: T) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    writeValue(item: T): void;\r\n}\r\n"}}
