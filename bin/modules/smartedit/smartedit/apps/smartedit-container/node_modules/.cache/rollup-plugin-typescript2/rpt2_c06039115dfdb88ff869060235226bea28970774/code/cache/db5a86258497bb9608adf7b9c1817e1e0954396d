{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Inject } from '@angular/core';\r\nimport { urlUtils, ISharedDataService, LogService, SeDowngradeService, WindowUtils, YJQUERY_TOKEN } from 'smarteditcommons';\r\nimport { DEVICE_ORIENTATIONS } from './DeviceOrientationsValue';\r\nimport { DEVICE_SUPPORTS } from './DeviceSupportsValue';\r\n/**\r\n * The iFrame Manager service provides methods to load the storefront into an iframe. The preview of the storefront can be loaded for a specified input homepage and a specified preview ticket. The iframe src attribute is updated with that information in order to display the storefront in SmartEdit.\r\n */\r\nvar /* @ngInject */ IframeManagerService = /** @class */ (function () {\r\n    function /* @ngInject */ IframeManagerService(logService, httpClient, yjQuery, windowUtils, sharedDataService) {\r\n        this.logService = logService;\r\n        this.httpClient = httpClient;\r\n        this.yjQuery = yjQuery;\r\n        this.windowUtils = windowUtils;\r\n        this.sharedDataService = sharedDataService;\r\n    }\r\n    /* @ngInject */ IframeManagerService_1 = /* @ngInject */ IframeManagerService;\r\n    /**\r\n     * This method sets the current page location and stores it in the service. The storefront will be loaded with this location.\r\n     *\r\n     * @param URL Location to be stored\r\n     */\r\n    /* @ngInject */ IframeManagerService.prototype.setCurrentLocation = function (location) {\r\n        this.currentLocation = location;\r\n    };\r\n    /* @ngInject */ IframeManagerService.prototype.getIframe = function () {\r\n        return this.yjQuery(this.windowUtils.getSmarteditIframe());\r\n    };\r\n    /* @ngInject */ IframeManagerService.prototype.isCrossOrigin = function () {\r\n        return this.windowUtils.isCrossOrigin(this.currentLocation);\r\n    };\r\n    /**\r\n     * This method loads the storefront within an iframe by setting the src attribute to the specified input URL.\r\n     * If this method is called within the context of a new or updated experience, prior to the loading, it will check if the page exists.\r\n     * If the pages does not exist (the server returns a 404 and a content-type:text/html), the user will be redirected to the homepage of the storefront. Otherwise,\r\n     * the user will be redirected to the requested page for the experience.\r\n     *\r\n     * @param URL The URL of the storefront.\r\n     * @param checkIfFailingHTML Boolean indicating if we need to check if the page call returns a 404\r\n     * @param homepageInPreviewMode URL of the storefront homepage in preview mode if it's a new experience\r\n     *\r\n     */\r\n    /* @ngInject */ IframeManagerService.prototype.load = function (url, checkIfFailingHTML, pageInPreviewMode) {\r\n        var _this = this;\r\n        if (checkIfFailingHTML) {\r\n            return this._getPageAsync(url).then(function () {\r\n                _this.getIframe().attr('src', url);\r\n            }, function (error) {\r\n                if (error.status === 404) {\r\n                    _this.getIframe().attr('src', pageInPreviewMode);\r\n                    return;\r\n                }\r\n                _this.logService.error(\"IFrameManagerService.load - _getPageAsync failed with error \" + error);\r\n            });\r\n        }\r\n        else {\r\n            this.logService.debug('iframeManagerService::load - loading storefront url:', url);\r\n            this.getIframe().attr('src', url);\r\n            return Promise.resolve();\r\n        }\r\n    };\r\n    /**\r\n     * This method loads the preview of the storefront for a specified input homepage URL or a page from the page list, and for a specified preview ticket.\r\n     * This method will add '/cx-preview' as specified in configuration.storefrontPreviewRoute to the URI and append the preview ticket in the query string.\r\n     * <br/>If it is an initial load, [load]{@link IframeManagerService#load} will be called with this modified homepage or page from page list.\r\n     * <br/>If it is a subsequent call, the modified homepage will be called through Ajax to initialize the preview (storefront constraint) and then\r\n     * [load]{@link IframeManagerService#load} will be called with the current location.\r\n     *\r\n     * @param homePageOrPageFromPageList The URL of the storefront homepage or a page from the page list for a given experience context.\r\n     * @param  previewTicket The preview ticket.\r\n     */\r\n    /* @ngInject */ IframeManagerService.prototype.loadPreview = function (homePageOrPageFromPageList, previewTicket) {\r\n        var _this = this;\r\n        this.windowUtils.setTrustedIframeDomain(homePageOrPageFromPageList);\r\n        this.logService.debug('loading storefront iframe with preview ticket:', previewTicket);\r\n        var promiseToResolve;\r\n        if (!/.+\\.html/.test(homePageOrPageFromPageList)) {\r\n            // for testing purposes\r\n            promiseToResolve = this._appendURISuffix(homePageOrPageFromPageList);\r\n        }\r\n        else {\r\n            promiseToResolve = Promise.resolve(homePageOrPageFromPageList);\r\n        }\r\n        return promiseToResolve.then(function (previewURL) {\r\n            var pageInPreviewMode = previewURL +\r\n                (previewURL.indexOf('?') === -1 ? '?' : '&') +\r\n                'cmsTicketId=' +\r\n                previewTicket;\r\n            // If we don't have a current location, or the current location is the homePage or a page from page list, or the current location has a cmsTicketID\r\n            if (_this._mustLoadAsSuch(homePageOrPageFromPageList)) {\r\n                return _this.load(pageInPreviewMode);\r\n            }\r\n            else {\r\n                var isCrossOrigin_1 = _this.isCrossOrigin();\r\n                /*\r\n                 * check failing HTML only if same origin to prevent CORS errors.\r\n                 * if location to reload in new experience context is different from homepage, one will have to\r\n                 * first load the home page in preview mode and then access the location without preview mode\r\n                 */\r\n                return (isCrossOrigin_1\r\n                    ? Promise.resolve({})\r\n                    : _this._getPageAsync(pageInPreviewMode)).then(function () {\r\n                    // FIXME: use gatewayProxy to load url from the inner\r\n                    return _this.load(_this.currentLocation, !isCrossOrigin_1, pageInPreviewMode);\r\n                }, function (error) { return _this.logService.error('failed to load preview', error); });\r\n            }\r\n        });\r\n    };\r\n    /* @ngInject */ IframeManagerService.prototype.apply = function (deviceSupport, deviceOrientation) {\r\n        var width;\r\n        var height;\r\n        var isVertical = true;\r\n        if (deviceOrientation && deviceOrientation.orientation) {\r\n            isVertical = deviceOrientation.orientation === 'vertical';\r\n        }\r\n        if (deviceSupport) {\r\n            width = isVertical ? deviceSupport.width : deviceSupport.height;\r\n            height = isVertical ? deviceSupport.height : deviceSupport.width;\r\n            // hardcoded the name to default to remove the device skin\r\n            this.getIframe()\r\n                .removeClass()\r\n                .addClass('device-' + (isVertical ? 'vertical' : 'horizontal') + ' device-default');\r\n        }\r\n        else {\r\n            this.getIframe().removeClass();\r\n        }\r\n        this.getIframe().css({\r\n            width: width || '100%',\r\n            height: height || '100%',\r\n            display: 'block',\r\n            margin: 'auto'\r\n        });\r\n    };\r\n    /* @ngInject */ IframeManagerService.prototype.applyDefault = function () {\r\n        var defaultDeviceSupport = DEVICE_SUPPORTS.find(function (deviceSupport) { return deviceSupport.default; });\r\n        var defaultDeviceOrientation = DEVICE_ORIENTATIONS.find(function (deviceOrientation) { return deviceOrientation.default; });\r\n        this.apply(defaultDeviceSupport, defaultDeviceOrientation);\r\n    };\r\n    /*\r\n     * if currentLocation is not set yet, it means that this is a first loading and we are trying to load the homepage,\r\n     * or if the page has a ticket ID but is not the homepage, it means that we try to load a page from the page list.\r\n     * For those scenarios, we want to load the page as such in preview mode.\r\n     */\r\n    /* @ngInject */ IframeManagerService.prototype._mustLoadAsSuch = function (homePageOrPageFromPageList) {\r\n        return (!this.currentLocation ||\r\n            urlUtils.getURI(homePageOrPageFromPageList) === urlUtils.getURI(this.currentLocation) ||\r\n            'cmsTicketId' in urlUtils.parseQuery(this.currentLocation));\r\n    };\r\n    /* @ngInject */ IframeManagerService.prototype._getPageAsync = function (url) {\r\n        return this.httpClient.get(url, { observe: 'body', responseType: 'text' }).toPromise();\r\n    };\r\n    /* @ngInject */ IframeManagerService.prototype._appendURISuffix = function (url) {\r\n        var _this = this;\r\n        var pair = url.split('?');\r\n        return this.sharedDataService\r\n            .get('configuration')\r\n            .then(function (configuration) {\r\n            if (!configuration || !configuration.storefrontPreviewRoute) {\r\n                _this.logService.debug(\"SmartEdit configuration for 'storefrontPreviewRoute' is not found. Fallback to default value: '\" +\r\n                    /* @ngInject */ IframeManagerService_1.DEFAULT_PREVIEW_ROUTE +\r\n                    \"'\");\r\n                return /* @ngInject */ IframeManagerService_1.DEFAULT_PREVIEW_ROUTE;\r\n            }\r\n            return configuration.storefrontPreviewRoute;\r\n        })\r\n            .then(function (previewRoute) {\r\n            return pair[0]\r\n                .replace(/(.+)([^\\/])$/g, '$1$2/' + previewRoute)\r\n                .replace(/(.+)\\/$/g, '$1/' + previewRoute) +\r\n                (pair.length === 2 ? '?' + pair[1] : '');\r\n        });\r\n    };\r\n    var /* @ngInject */ IframeManagerService_1;\r\n    /* @ngInject */ IframeManagerService.DEFAULT_PREVIEW_ROUTE = 'cx-preview';\r\n    /* @ngInject */ IframeManagerService = /* @ngInject */ IframeManagerService_1 = __decorate([\r\n        SeDowngradeService(),\r\n        __param(2, Inject(YJQUERY_TOKEN)),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            HttpClient, Function, WindowUtils,\r\n            ISharedDataService])\r\n    ], /* @ngInject */ IframeManagerService);\r\n    return /* @ngInject */ IframeManagerService;\r\n}());\r\nexport { /* @ngInject */ IframeManagerService };\r\n//# sourceMappingURL=IframeManagerService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/common@8.2.14_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@angular/common/http.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/iframe/DeviceOrientationsValue.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/iframe/DeviceSupportsValue.ts"],"map":"{\"version\":3,\"file\":\"IframeManagerService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/iframe/IframeManagerService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/iframe/IframeManagerService.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\n/// <reference types=\"jquery\" />\r\n/// <reference types=\"eonasdan-bootstrap-datetimepicker\" />\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ISharedDataService, LogService, WindowUtils } from 'smarteditcommons';\r\nimport { DeviceOrientation } from './DeviceOrientationsValue';\r\nimport { DeviceSupport } from './DeviceSupportsValue';\r\n/**\r\n * The iFrame Manager service provides methods to load the storefront into an iframe. The preview of the storefront can be loaded for a specified input homepage and a specified preview ticket. The iframe src attribute is updated with that information in order to display the storefront in SmartEdit.\r\n */\r\nexport declare class IframeManagerService {\r\n    private logService;\r\n    private httpClient;\r\n    private yjQuery;\r\n    private windowUtils;\r\n    private sharedDataService;\r\n    private static readonly DEFAULT_PREVIEW_ROUTE;\r\n    private currentLocation;\r\n    constructor(logService: LogService, httpClient: HttpClient, yjQuery: JQueryStatic, windowUtils: WindowUtils, sharedDataService: ISharedDataService);\r\n    /**\r\n     * This method sets the current page location and stores it in the service. The storefront will be loaded with this location.\r\n     *\r\n     * @param URL Location to be stored\r\n     */\r\n    setCurrentLocation(location: string): void;\r\n    getIframe(): JQuery;\r\n    isCrossOrigin(): boolean;\r\n    /**\r\n     * This method loads the storefront within an iframe by setting the src attribute to the specified input URL.\r\n     * If this method is called within the context of a new or updated experience, prior to the loading, it will check if the page exists.\r\n     * If the pages does not exist (the server returns a 404 and a content-type:text/html), the user will be redirected to the homepage of the storefront. Otherwise,\r\n     * the user will be redirected to the requested page for the experience.\r\n     *\r\n     * @param URL The URL of the storefront.\r\n     * @param checkIfFailingHTML Boolean indicating if we need to check if the page call returns a 404\r\n     * @param homepageInPreviewMode URL of the storefront homepage in preview mode if it's a new experience\r\n     *\r\n     */\r\n    load(url: string, checkIfFailingHTML?: boolean, pageInPreviewMode?: string): Promise<void>;\r\n    /**\r\n     * This method loads the preview of the storefront for a specified input homepage URL or a page from the page list, and for a specified preview ticket.\r\n     * This method will add '/cx-preview' as specified in configuration.storefrontPreviewRoute to the URI and append the preview ticket in the query string.\r\n     * <br/>If it is an initial load, [load]{@link IframeManagerService#load} will be called with this modified homepage or page from page list.\r\n     * <br/>If it is a subsequent call, the modified homepage will be called through Ajax to initialize the preview (storefront constraint) and then\r\n     * [load]{@link IframeManagerService#load} will be called with the current location.\r\n     *\r\n     * @param homePageOrPageFromPageList The URL of the storefront homepage or a page from the page list for a given experience context.\r\n     * @param  previewTicket The preview ticket.\r\n     */\r\n    loadPreview(homePageOrPageFromPageList: string, previewTicket: string): Promise<void>;\r\n    apply(deviceSupport?: DeviceSupport, deviceOrientation?: DeviceOrientation): void;\r\n    applyDefault(): void;\r\n    private _mustLoadAsSuch;\r\n    private _getPageAsync;\r\n    private _appendURISuffix;\r\n}\r\n"}}
