{"code":"import { __assign, __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { values } from 'lodash';\r\nimport { ICatalogService, ISharedDataService, SeDowngradeService, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\nimport { ProductService } from 'smarteditcontainer';\r\nimport { ProductCategoryService } from '../../../../services/ProductCategoryService';\r\n/**\r\n * Supplies Fetch Strategies for Product and Category Selectors.\r\n * These strategies are used to fetch items in a paged way or to fetch an individual item.\r\n * Ultimately, the strategies are utilized by Select Componnet.\r\n */\r\nvar /* @ngInject */ CatalogInformationService = /** @class */ (function () {\r\n    function /* @ngInject */ CatalogInformationService(catalogService, sharedDataService, productCategoryService, productService) {\r\n        this.catalogService = catalogService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.productCategoryService = productCategoryService;\r\n        this.productService = productService;\r\n        this.init();\r\n    }\r\n    Object.defineProperty(/* @ngInject */ CatalogInformationService.prototype, \"productsFetchStrategy\", {\r\n        /**\r\n         * Strategy necessary to display products in a paged way.\r\n         * It contains a method to retrieve pages of products and another method to retrieve individual products.\r\n         * Such strategy is necessary to work with products in SelectComponent.\r\n         */\r\n        get: function () {\r\n            return this._productsFetchStrategy;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(/* @ngInject */ CatalogInformationService.prototype, \"categoriesFetchStrategy\", {\r\n        /**\r\n         * Strategy necessary to display categories in a paged way.\r\n         * It contains a method to retrieve pages of categories and another method to retrieve individual categories.\r\n         * Such strategy is necessary to work with categories in a SelectComponent.\r\n         */\r\n        get: function () {\r\n            return this._categoriesFetchStrategy;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /* @ngInject */ CatalogInformationService.prototype.makeGetProductCatalogsInformation = function () {\r\n        var _this = this;\r\n        return function () { return _this.getProductCatalogsInformation(); };\r\n    };\r\n    /**\r\n     *\r\n     * Retrieves the information of the product catalogs available in the current site.\r\n     *\r\n     * @returns A promise that resolves to an array containing the information of all the product catalogs available in the current site.\r\n     */\r\n    /* @ngInject */ CatalogInformationService.prototype.getProductCatalogsInformation = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var siteUid, catalogs, productCatalogById;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getSiteUid()];\r\n                    case 1:\r\n                        siteUid = _a.sent();\r\n                        if (!(this.cachedSiteUid === siteUid && this.parsedCatalogs)) return [3 /*break*/, 2];\r\n                        // Return the cached catalogs only if the site hasn't changed\r\n                        // otherwise it's necessary to reload them.\r\n                        return [2 /*return*/, this.parsedCatalogs];\r\n                    case 2:\r\n                        this.cachedSiteUid = siteUid;\r\n                        return [4 /*yield*/, this.catalogService.getProductCatalogsForSite(siteUid)];\r\n                    case 3:\r\n                        catalogs = _a.sent();\r\n                        productCatalogById = this.catalogsToProductCatalogById(catalogs);\r\n                        this.parsedCatalogs = values(productCatalogById);\r\n                        return [2 /*return*/, this.parsedCatalogs];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogInformationService.prototype.init = function () {\r\n        var _this = this;\r\n        this._productsFetchStrategy = {\r\n            fetchPage: function (catalogInfo, mask, pageSize, currentPage) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.productsFetchPage(catalogInfo, mask, pageSize, currentPage)];\r\n            }); }); },\r\n            fetchEntity: function (productUID) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.productsFetchEntity(productUID)];\r\n            }); }); }\r\n        };\r\n        this._categoriesFetchStrategy = {\r\n            fetchPage: function (catalogInfo, mask, pageSize, currentPage) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.categoriesFetchPage(catalogInfo, mask, pageSize, currentPage)];\r\n            }); }); },\r\n            fetchEntity: function (categoryUID) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.categoriesFetchEntity(categoryUID)];\r\n            }); }); }\r\n        };\r\n    };\r\n    /* @ngInject */ CatalogInformationService.prototype.productsFetchPage = function (catalogInfo, mask, pageSize, currentPage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var siteUid, _a, products, pagination, items;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.getSiteUid()];\r\n                    case 1:\r\n                        siteUid = _b.sent();\r\n                        catalogInfo.siteUID = siteUid;\r\n                        return [4 /*yield*/, this.productService.findProducts(catalogInfo, {\r\n                                mask: mask,\r\n                                pageSize: pageSize,\r\n                                currentPage: currentPage\r\n                            })];\r\n                    case 2:\r\n                        _a = _b.sent(), products = _a.products, pagination = _a.pagination;\r\n                        items = products.map(function (product) { return (__assign(__assign({}, product), { id: product.uid })); });\r\n                        return [2 /*return*/, {\r\n                                pagination: pagination,\r\n                                results: items\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogInformationService.prototype.productsFetchEntity = function (productUid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var siteUid, product;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getSiteUid()];\r\n                    case 1:\r\n                        siteUid = _a.sent();\r\n                        return [4 /*yield*/, this.productService.getProductById(siteUid, productUid)];\r\n                    case 2:\r\n                        product = _a.sent();\r\n                        return [2 /*return*/, __assign(__assign({}, product), { id: product.uid })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogInformationService.prototype.categoriesFetchPage = function (catalogInfo, mask, pageSize, currentPage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var siteUid, _a, productCategories, pagination, items;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.getSiteUid()];\r\n                    case 1:\r\n                        siteUid = _b.sent();\r\n                        catalogInfo.siteUID = siteUid;\r\n                        return [4 /*yield*/, this.productCategoryService.getCategories({\r\n                                catalogId: catalogInfo.catalogId,\r\n                                catalogVersion: catalogInfo.catalogVersion,\r\n                                siteUID: catalogInfo.siteUID,\r\n                                mask: mask,\r\n                                pageSize: pageSize,\r\n                                currentPage: currentPage\r\n                            })];\r\n                    case 2:\r\n                        _a = _b.sent(), productCategories = _a.productCategories, pagination = _a.pagination;\r\n                        items = productCategories.map(function (category) { return (__assign(__assign({}, category), { id: category.uid })); });\r\n                        return [2 /*return*/, {\r\n                                pagination: pagination,\r\n                                results: items\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogInformationService.prototype.categoriesFetchEntity = function (categoryUID) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var siteUid, category;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getSiteUid()];\r\n                    case 1:\r\n                        siteUid = _a.sent();\r\n                        return [4 /*yield*/, this.productCategoryService.getCategoryById(siteUid, categoryUID)];\r\n                    case 2:\r\n                        category = _a.sent();\r\n                        category.id = category.uid;\r\n                        return [2 /*return*/, category];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogInformationService.prototype.getSiteUid = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.sharedDataService\r\n                        .get(EXPERIENCE_STORAGE_KEY)\r\n                        .then(function (_a) {\r\n                        var uid = _a.siteDescriptor.uid;\r\n                        return uid;\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ CatalogInformationService.prototype.catalogsToProductCatalogById = function (catalogs) {\r\n        var productCatalogById = {};\r\n        catalogs.forEach(function (catalog) {\r\n            productCatalogById[catalog.catalogId] = {\r\n                id: catalog.catalogId,\r\n                name: catalog.name,\r\n                versions: catalog.versions.map(function (_a) {\r\n                    var version = _a.version;\r\n                    return ({\r\n                        id: version,\r\n                        label: version\r\n                    });\r\n                })\r\n            };\r\n        });\r\n        return productCatalogById;\r\n    };\r\n    /* @ngInject */ CatalogInformationService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [ICatalogService,\r\n            ISharedDataService,\r\n            ProductCategoryService,\r\n            ProductService])\r\n    ], /* @ngInject */ CatalogInformationService);\r\n    return /* @ngInject */ CatalogInformationService;\r\n}());\r\nexport { /* @ngInject */ CatalogInformationService };\r\n//# sourceMappingURL=CatalogInformationService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/ProductCategoryService.ts"],"map":"{\"version\":3,\"file\":\"CatalogInformationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/genericEditor/catalog/services/CatalogInformationService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/genericEditor/catalog/services/CatalogInformationService.d.ts","writeByteOrderMark":false,"text":"import { ICatalogService, IdWithLabel, ISharedDataService, Page, TypedMap, ProductSelectItem, SelectItem } from 'smarteditcommons';\r\nimport { ProductService, IProductSearch } from 'smarteditcontainer';\r\nimport { ProductCategorySelectItem, ProductCategoryService } from '../../../../services/ProductCategoryService';\r\nexport interface ProductCatalog {\r\n    id: string;\r\n    name: TypedMap<string>;\r\n    versions: IdWithLabel[];\r\n}\r\nexport declare type ProductsFetchStrategy = CatalogFetchStrategy<ProductSelectItem>;\r\nexport declare type CategoriesFetchStrategy = CatalogFetchStrategy<ProductCategorySelectItem>;\r\nexport interface CatalogFetchStrategy<T extends SelectItem = SelectItem> {\r\n    fetchPage: (catalogInfo: IProductSearch, mask: string, pageSize: number, currentPage: number) => Promise<Page<T>>;\r\n    fetchEntity: (uid: string) => Promise<T>;\r\n}\r\n/**\r\n * Supplies Fetch Strategies for Product and Category Selectors.\r\n * These strategies are used to fetch items in a paged way or to fetch an individual item.\r\n * Ultimately, the strategies are utilized by Select Componnet.\r\n */\r\nexport declare class CatalogInformationService {\r\n    private catalogService;\r\n    private sharedDataService;\r\n    private productCategoryService;\r\n    private productService;\r\n    private _productsFetchStrategy;\r\n    private _categoriesFetchStrategy;\r\n    private cachedSiteUid;\r\n    private parsedCatalogs;\r\n    constructor(catalogService: ICatalogService, sharedDataService: ISharedDataService, productCategoryService: ProductCategoryService, productService: ProductService);\r\n    /**\r\n     * Strategy necessary to display products in a paged way.\r\n     * It contains a method to retrieve pages of products and another method to retrieve individual products.\r\n     * Such strategy is necessary to work with products in SelectComponent.\r\n     */\r\n    get productsFetchStrategy(): ProductsFetchStrategy;\r\n    /**\r\n     * Strategy necessary to display categories in a paged way.\r\n     * It contains a method to retrieve pages of categories and another method to retrieve individual categories.\r\n     * Such strategy is necessary to work with categories in a SelectComponent.\r\n     */\r\n    get categoriesFetchStrategy(): CategoriesFetchStrategy;\r\n    makeGetProductCatalogsInformation(): () => Promise<ProductCatalog[]>;\r\n    /**\r\n     *\r\n     * Retrieves the information of the product catalogs available in the current site.\r\n     *\r\n     * @returns A promise that resolves to an array containing the information of all the product catalogs available in the current site.\r\n     */\r\n    getProductCatalogsInformation(): Promise<ProductCatalog[]>;\r\n    private init;\r\n    private productsFetchPage;\r\n    private productsFetchEntity;\r\n    private categoriesFetchPage;\r\n    private categoriesFetchEntity;\r\n    private getSiteUid;\r\n    private catalogsToProductCatalogById;\r\n}\r\n"}}
