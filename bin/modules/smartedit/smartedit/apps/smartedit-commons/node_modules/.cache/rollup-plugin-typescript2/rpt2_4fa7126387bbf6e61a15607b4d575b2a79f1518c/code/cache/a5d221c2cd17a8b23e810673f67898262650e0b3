{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Provides a logic that allows to verify read and write permissions for a particular catalog version.\r\n */\r\nvar ICatalogVersionPermissionService = /** @class */ (function () {\r\n    function ICatalogVersionPermissionService() {\r\n    }\r\n    /**\r\n     * Verifies whether current user has write permission for provided catalogId and catalogVersion.\r\n     */\r\n    ICatalogVersionPermissionService.prototype.hasWritePermission = function (catalogId, catalogVersion) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Verifies whether current user has read permission for provided catalogId and catalogVersion.\r\n     */\r\n    ICatalogVersionPermissionService.prototype.hasReadPermission = function (catalogId, catalogVersion) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Verifies whether current user has write permission for current catalog version.\r\n     */\r\n    ICatalogVersionPermissionService.prototype.hasWritePermissionOnCurrent = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Verifies whether current user has read permission for current catalog version.\r\n     */\r\n    ICatalogVersionPermissionService.prototype.hasReadPermissionOnCurrent = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Verifies whether current user has sync permission for provided catalogId, source and target catalog versions.\r\n     */\r\n    ICatalogVersionPermissionService.prototype.hasSyncPermission = function (catalogId, sourceCatalogVersion, targetCatalogVersion) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Verifies whether current user has sync permission for current catalog version.\r\n     */\r\n    ICatalogVersionPermissionService.prototype.hasSyncPermissionFromCurrentToActiveCatalogVersion = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Verifies whether current user has sync permission for provided catalogId and catalog version.\r\n     */\r\n    ICatalogVersionPermissionService.prototype.hasSyncPermissionToActiveCatalogVersion = function (catalogId, catalogVersion) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    return ICatalogVersionPermissionService;\r\n}());\r\nexport { ICatalogVersionPermissionService };\r\n//# sourceMappingURL=ICatalogVersionPermissionService.js.map","references":[],"map":"{\"version\":3,\"file\":\"ICatalogVersionPermissionService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/ICatalogVersionPermissionService.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH;;GAEG;AACH;IAAA;IA+DA,CAAC;IA9DG;;OAEG;IACH,6DAAkB,GAAlB,UAAmB,SAAiB,EAAE,cAAsB;QACxD,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,4DAAiB,GAAjB,UAAkB,SAAiB,EAAE,cAAsB;QACvD,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,sEAA2B,GAA3B;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,qEAA0B,GAA1B;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,4DAAiB,GAAjB,UACI,SAAiB,EACjB,oBAA4B,EAC5B,oBAA4B;QAE5B,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,6FAAkD,GAAlD;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,kFAAuC,GAAvC,UACI,SAAiB,EACjB,cAAsB;QAEtB,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,uCAAC;AAAD,CAAC,AA/DD,IA+DC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/interfaces/ICatalogVersionPermissionService.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Provides a logic that allows to verify read and write permissions for a particular catalog version.\r\n */\r\nexport declare abstract class ICatalogVersionPermissionService {\r\n    /**\r\n     * Verifies whether current user has write permission for provided catalogId and catalogVersion.\r\n     */\r\n    hasWritePermission(catalogId: string, catalogVersion: string): Promise<boolean>;\r\n    /**\r\n     * Verifies whether current user has read permission for provided catalogId and catalogVersion.\r\n     */\r\n    hasReadPermission(catalogId: string, catalogVersion: string): Promise<boolean>;\r\n    /**\r\n     * Verifies whether current user has write permission for current catalog version.\r\n     */\r\n    hasWritePermissionOnCurrent(): Promise<boolean>;\r\n    /**\r\n     * Verifies whether current user has read permission for current catalog version.\r\n     */\r\n    hasReadPermissionOnCurrent(): Promise<boolean>;\r\n    /**\r\n     * Verifies whether current user has sync permission for provided catalogId, source and target catalog versions.\r\n     */\r\n    hasSyncPermission(catalogId: string, sourceCatalogVersion: string, targetCatalogVersion: string): Promise<boolean>;\r\n    /**\r\n     * Verifies whether current user has sync permission for current catalog version.\r\n     */\r\n    hasSyncPermissionFromCurrentToActiveCatalogVersion(): Promise<boolean>;\r\n    /**\r\n     * Verifies whether current user has sync permission for provided catalogId and catalog version.\r\n     */\r\n    hasSyncPermissionToActiveCatalogVersion(catalogId: string, catalogVersion: string): Promise<boolean>;\r\n}\r\n"}}
