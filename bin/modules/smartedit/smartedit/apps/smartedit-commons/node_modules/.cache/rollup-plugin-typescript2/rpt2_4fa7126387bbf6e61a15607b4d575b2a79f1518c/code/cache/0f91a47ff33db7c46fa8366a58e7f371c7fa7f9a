{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport './ySelect.scss';\r\nimport { LogService } from '@smart/utils';\r\nimport * as angular from 'angular';\r\nimport { SeComponent } from '../../di';\r\nimport { stringUtils, VALIDATION_MESSAGE_TYPES } from '../../utils';\r\n/**\r\n * **Deprecated since 2005, use {@link SelectComponent}.**\r\n *\r\n * This component is a wrapper around ui-select directive and provides filtering capabilities for the dropdown menu that is customizable with an item template.\r\n * <br/>ySelect can work in both paged and non paged mode: providing either fetchAll or fetchPage function in the fetchStrategy will determine the flavour of the dropdown.\r\n *\r\n * ### Parameters\r\n *\r\n * `id` - will be used to identify internal elements of ySelect for styling (and testing) purposes.\r\n *\r\n * `controls` - Adds controls such as the magnifier and the remove button. Default is set to false.\r\n *\r\n * `fetchStrategy` - strategy object containing the necessary functions for ySelect to populate the dropdown:\r\n * <b>Only one of either fetchAll or fetchPage must be defined.</b>\r\n *\r\n * `fetchStrategy.fetchAll` - Function required to fetch all for a given optional mask.\r\n * fetchAll will be called without arguments upon initialization and with a mask every time the search section receives an input.\r\n * It must return a promise resolving to a list of items.\r\n * Every item must have a property \"id\" used for identification. If no itemTemplate is provided, these items will need to display a \"label\" property.\r\n *\r\n * `fetchStrategy.fetchPage` - Function required to fetch a page for a given optional mask.\r\n * fetchPage must fulfill the contract of fetchPage from {@link YInfiniteScrollingComponent}\r\n * It must return a promise resolving to a page of items as per `Page`.\r\n * Every item must have a property \"id\" used for identification. If no itemTemplate is provided, these items will need to display a \"label\" property.\r\n *\r\n * `fetchStrategy.fetchEntity` - Function to fetch an option by its identifier when we are in paged mode (fetchPage is defined) and the dropdown is initialized with a value.\r\n *\r\n * `disableChoiceFn` - A function to disable results in the drop-down. It is invoked for each item in the drop-down, with a single parameter, the item itself.\r\n *\r\n * `placeholder` - the placeholder label or i18nKey that will be printed in the search section.\r\n *\r\n * `itemTemplate` - the path to the template that will be used to display items in both the dropdown menu and the selection.\r\n * ItemTemplate has access to item, selected and the ySelect controller.\r\n * item is the item to print, selected is a boolean that is true when the template is used in the selection as opposed to the dropdown menu.\r\n * Default template will be:\r\n *\r\n *      <span data-ng-bind-html=\"item.label | translate\"></span>\r\n *\r\n *\r\n * `keepModelOnReset` - A non-paged dropdown: if the value is set to false, the widget will remove the selected entities in the model that no longer match the values available on the server.\r\n * For a paged dropdown: After a standard reset, even if keepModelOnReset is set to false,  the widget will not be able to remove the selected entities in the model\r\n * that no longer match the values available on the server. to force the widget to remove any selected entities, you must call reset(true).\r\n *\r\n * `multiSelect` - The property specifies whether ySelect is multi-selectable.\r\n *\r\n * `reset` - A function that will be called when ySelect is reset.\r\n *\r\n * `isReadOnly` - Renders ySelect as disabled field.\r\n *\r\n * `resultsHeaderTemplate` - The template that will be used on top of the result list.\r\n *\r\n * `resultsHeaderTemplateUrl` - The path to the template what will be used on top of the result list.\r\n *\r\n * `resultsHeaderLabel` - The label that will be displayed on top of the result list.\r\n * Only one of resultsHeaderTemplate, resultsHeaderTemplateUtl, and resultsHeaderLabel shall be passed.\r\n *\r\n * `resetSearchInput` - Clears the search box after selecting an option.\r\n *\r\n * `onRemove` - A function that will be called when item was removed from selection, function is called with two arguments $item and $model\r\n *\r\n * `onSelect` - A function that will be called when item was selected, function is called with two arguments $item and $model\r\n *\r\n * `init` - A function that will be called when component is initialized, function is called with one argument $select\r\n *\r\n * `keyup` - A function that will be called on keyup event in search input, function is called with two arguments $event and $select.search\r\n *\r\n * `getApi` - Exposes the ySelect's api object. See {@link YSelectApi} for more information.\r\n *\r\n * `showRemoveButton` -  Adds remove button\r\n *\r\n * @deprecated\r\n */\r\nvar /* @ngInject */ YSelectComponent = /** @class */ (function () {\r\n    function /* @ngInject */ YSelectComponent(logService, $templateCache) {\r\n        var _this = this;\r\n        this.logService = logService;\r\n        this.$templateCache = $templateCache;\r\n        this.resultsHeaderLabel = 'se.yselect.options.inactiveoption.label';\r\n        this.api = {\r\n            setValidationState: function (validationState) {\r\n                _this.validationState = validationState;\r\n            },\r\n            resetValidationState: function () {\r\n                _this.validationState = undefined;\r\n            }\r\n        };\r\n    }\r\n    // Initialization\r\n    /* @ngInject */ YSelectComponent.prototype.$onInit = function () {\r\n        var _this = this;\r\n        // this.items represent the options available in the control to choose from.\r\n        // this.model represents the item(s) currently selected in the control. If the control is using the multiSelect\r\n        // flag then the model is an array; otherwise it's a single object.\r\n        this.items = [];\r\n        this.searchEnabled = this.searchEnabled !== false;\r\n        this.resetSearchInput = this.resetSearchInput !== false;\r\n        // in order to propagate down changes to ngModel from the parent controller\r\n        this.exposedModel.$viewChangeListeners.push(function () { return _this.syncModels(); });\r\n        this.exposedModel.$render = function () { return _this.syncModels(); };\r\n        this.reset = function (forceReset) {\r\n            _this.items.length = 0;\r\n            if (forceReset) {\r\n                _this.resetModel();\r\n            }\r\n            return _this.$onChanges();\r\n        };\r\n        if (typeof this.getApi === 'function') {\r\n            this.getApi({\r\n                $api: this.api\r\n            });\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.$onChanges = function (changes) {\r\n        var result = Promise.resolve(null);\r\n        this.isValidConfiguration();\r\n        this.updateControlTemplate();\r\n        /* we must initialize the list to contain at least the selected item\r\n         * if a fetchEntity has been provided, it will be used\r\n         * if no fetchEntity was provided, we resort to finding a match in the result from fetchAll\r\n         * if we fail to find a match, the directive throws an error to notify that a fetchEntity is required\r\n         */\r\n        if (!this.items || this.items.length === 0) {\r\n            if (!this.isPagedDropdown()) {\r\n                result = this.internalFetchAll();\r\n            }\r\n            else if (this.fetchStrategy.fetchEntity || this.fetchStrategy.fetchEntities) {\r\n                if (!this.isModelEmpty()) {\r\n                    result = this.internalFetchEntities();\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('could not initialize dropdown of ySelect, neither fetchEntity, fetchEntities, nor fetchAll were specified');\r\n            }\r\n        }\r\n        if (changes && changes.fetchStrategy) {\r\n            this._updateChild();\r\n        }\r\n        return result;\r\n    };\r\n    // Event Listeners\r\n    /*\r\n     * This function is called whenever the value in the ui-select changes from an external source (e.g., like\r\n     * the user making a selection).\r\n     * NOTE: This is not triggered if the model is changed programatically.\r\n     */\r\n    /* @ngInject */ YSelectComponent.prototype.syncModels = function () {\r\n        this.model = this.exposedModel.$modelValue;\r\n        this.$onChanges();\r\n        this.internalOnChange();\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.clear = function ($select, $event) {\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        delete this.model;\r\n        this.internalOnChange();\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.showResultHeader = function () {\r\n        return this.searchEnabled && this.items && this.items.length > 0;\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.getActionableTemplateUrl = function () {\r\n        return this.actionableSearchItemTemplateConfig\r\n            ? this.actionableSearchItemTemplateConfig.templateUrl\r\n            : '';\r\n    };\r\n    // in case of paged dropdown, the triggering of refresh is handled by yInfiniteScrolling component part of the pagedSelect2/choices.tpl.html template\r\n    /* @ngInject */ YSelectComponent.prototype.refreshOptions = function (mask) {\r\n        var _this = this;\r\n        if (this.fetchStrategy.fetchAll) {\r\n            this.fetchStrategy.fetchAll(mask).then(function (items) {\r\n                if (angular.toJson(_this.items) !== angular.toJson(items)) {\r\n                    _this.items = items;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.internalOnRemove = function (item, model) {\r\n        if (this.onRemove) {\r\n            this.onRemove(item, model);\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.internalOnSelect = function (item, model) {\r\n        if (this.onSelect) {\r\n            this.onSelect(item, model);\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.internalInit = function (select) {\r\n        if (this.init) {\r\n            this.init(select);\r\n        }\r\n        // This is a workaround for ui-select directive input removing selected entries\r\n        // on DELETE or BACKSPACE key pressed\r\n        select.searchInput.on('keydown', function (event) {\r\n            if (event.key === 'Backspace' || event.key === 'Delete') {\r\n                event.stopImmediatePropagation();\r\n            }\r\n        });\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.internalKeyup = function (event, selectSearch) {\r\n        if (this.keyup) {\r\n            this.keyup(event, selectSearch);\r\n        }\r\n    };\r\n    /*\r\n     * This method is used to propagate to the parent controller the changes made to the model programatically inside\r\n     * this component.\r\n     */\r\n    /* @ngInject */ YSelectComponent.prototype.internalOnChange = function () {\r\n        // in order to propagate up changes to ngModel into parent controller\r\n        this.exposedModel.$setViewValue(this.model);\r\n        if (this.onChange) {\r\n            this.onChange();\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.internalFetchAll = function () {\r\n        var _this = this;\r\n        return this.fetchStrategy.fetchAll().then(function (items) {\r\n            _this.items = items;\r\n            if (_this.model) {\r\n                var result = _this.multiSelect\r\n                    ? _this.model.every(function (key) { return !!_this.items.find(function (item) { return item.id === key; }); })\r\n                    : items.find(function (item) { return item.id === _this.model; });\r\n                if (!result) {\r\n                    _this.logService.debug('[ySelect - ' +\r\n                        _this.id +\r\n                        '] fetchAll was used to fetch the option identified by ' +\r\n                        _this.model +\r\n                        ' but failed to find a match');\r\n                }\r\n                _this.updateModelIfNecessary();\r\n            }\r\n            _this.internalOnChange();\r\n        });\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.internalFetchEntities = function () {\r\n        var _this = this;\r\n        var promise;\r\n        if (!this.multiSelect) {\r\n            promise = this.fetchEntity(this.model).then(function (item) { return [item]; });\r\n        }\r\n        else {\r\n            if (this.fetchStrategy.fetchEntities) {\r\n                promise = this.fetchStrategy.fetchEntities(this.model).then(function (items) {\r\n                    if (items.length !== _this.model.length) {\r\n                        _this.logService.debug('!fetchEntities was used to fetch the options identified by ' +\r\n                            _this.model +\r\n                            ' but failed to find all matches');\r\n                    }\r\n                    return items;\r\n                });\r\n            }\r\n            else {\r\n                var promiseArray = this.model.map(function (entryId) {\r\n                    return _this.fetchEntity(entryId);\r\n                });\r\n                promise = Promise.all(promiseArray);\r\n            }\r\n        }\r\n        return promise.then(function (result) {\r\n            _this.items = result\r\n                .filter(function (item) { return item !== null; })\r\n                .map(function (item) {\r\n                delete item.$promise;\r\n                delete item.$resolved;\r\n                item.technicalUniqueId = stringUtils.encode(item);\r\n                return item;\r\n            });\r\n            _this.updateModelIfNecessary();\r\n            _this.internalOnChange();\r\n        });\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.fetchEntity = function (entryId) {\r\n        var _this = this;\r\n        return this.fetchStrategy.fetchEntity(entryId).then(function (item) {\r\n            if (!item) {\r\n                _this.logService.debug('fetchEntity was used to fetch the option identified by ' +\r\n                    item +\r\n                    ' but failed to find a match');\r\n            }\r\n            return item;\r\n        });\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.updateModelIfNecessary = function () {\r\n        var _this = this;\r\n        if (!this.keepModelOnReset) {\r\n            if (this.multiSelect) {\r\n                this.model = this.model.filter(function (modelKey) {\r\n                    return _this.items.find(function (item) { return item && item.id === modelKey; });\r\n                });\r\n            }\r\n            else {\r\n                var result = this.items.filter(function (item) { return item.id === _this.model; });\r\n                this.model = result.length > 0 ? this.model : null;\r\n            }\r\n        }\r\n    };\r\n    // Helper functions\r\n    /* @ngInject */ YSelectComponent.prototype.isValidConfiguration = function () {\r\n        if (!this.fetchStrategy.fetchAll && !this.fetchStrategy.fetchPage) {\r\n            throw new Error('neither fetchAll nor fetchPage have been specified in fetchStrategy');\r\n        }\r\n        if (this.fetchStrategy.fetchAll && this.fetchStrategy.fetchPage) {\r\n            throw new Error('only one of either fetchAll or fetchPage must be specified in fetchStrategy');\r\n        }\r\n        if (this.fetchStrategy.fetchPage &&\r\n            this.model &&\r\n            !this.fetchStrategy.fetchEntity &&\r\n            !this.fetchStrategy.fetchEntities) {\r\n            throw new Error(\"fetchPage has been specified in fetchStrategy but neither fetchEntity nor fetchEntities are available to load item identified by \" + this.model);\r\n        }\r\n        if (this.isPagedDropdown() && !this.keepModelOnReset) {\r\n            this.logService.debug('current ySelect is paged, so keepModelOnReset flag is ignored (it will always keep the model on reset).');\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.requiresPaginatedStyling = function () {\r\n        return this.isPagedDropdown() || this.hasControls();\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.hasError = function () {\r\n        return VALIDATION_MESSAGE_TYPES.VALIDATION_ERROR === this.validationState;\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.hasWarning = function () {\r\n        return VALIDATION_MESSAGE_TYPES.WARNING === this.validationState;\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.hasControls = function () {\r\n        return (this.controls || false) === true;\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.disableChoice = function (item) {\r\n        if (this.disableChoiceFn) {\r\n            return this.disableChoiceFn(item);\r\n        }\r\n        return false;\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.isPagedDropdown = function () {\r\n        return !!this.fetchStrategy.fetchPage;\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.resetModel = function () {\r\n        if (this.multiSelect) {\r\n            this.model.length = 0;\r\n        }\r\n        else {\r\n            delete this.model;\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.updateControlTemplate = function () {\r\n        this.theme = this.isPagedDropdown() ? 'pagedSelect2' : 'select2';\r\n        this.itemTemplate = this.itemTemplate || 'defaultItemTemplate.html';\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype.isModelEmpty = function () {\r\n        if (this.multiSelect) {\r\n            return !this.model || (this.model && this.model.length === 0);\r\n        }\r\n        else {\r\n            return !this.model;\r\n        }\r\n    };\r\n    /* @ngInject */ YSelectComponent.prototype._updateChild = function () {\r\n        var ySelectTemplate = 'ySelectTemplate.html';\r\n        var yMultiSelectTemplate = 'yMultiSelectTemplate.html';\r\n        var theme = !this.fetchStrategy.fetchPage ? 'select2' : 'pagedSelect2';\r\n        var selectedFilters = !this.fetchStrategy.fetchPage\r\n            ? 'repeat=\"item.id as item in $ctrl.items | filter: $select.search\" refresh=\"$ctrl.refreshOptions($select.search)\"'\r\n            : 'repeat=\"item.id as item in $ctrl.items\"';\r\n        var rawTemplate = this.$templateCache.get(this.multiSelect ? yMultiSelectTemplate : ySelectTemplate);\r\n        this.result = rawTemplate\r\n            .replace('<%= theme %>', theme)\r\n            .replace('{% filtering %}', selectedFilters);\r\n    };\r\n    /* @ngInject */ YSelectComponent = __decorate([\r\n        SeComponent({\r\n            template: \"<div data-compile-html='$ctrl.result'></div>\",\r\n            transclude: true,\r\n            require: {\r\n                exposedModel: 'ngModel'\r\n            },\r\n            inputs: [\r\n                'id:@',\r\n                'fetchStrategy',\r\n                'onChange',\r\n                'controls',\r\n                'multiSelect',\r\n                'keepModelOnReset',\r\n                'reset:=?',\r\n                'isReadOnly',\r\n                'resultsHeaderTemplate',\r\n                'resultsHeaderTemplateUrl',\r\n                'resultsHeaderLabel',\r\n                'disableChoiceFn',\r\n                'placeholder',\r\n                'itemTemplate',\r\n                'searchEnabled',\r\n                'resetSearchInput',\r\n                'onRemove',\r\n                'onSelect',\r\n                'init',\r\n                'keyup',\r\n                'showRemoveButton',\r\n                'getApi:&'\r\n            ]\r\n        }),\r\n        __metadata(\"design:paramtypes\", [LogService, Object])\r\n    ], /* @ngInject */ YSelectComponent);\r\n    return /* @ngInject */ YSelectComponent;\r\n}());\r\nexport { /* @ngInject */ YSelectComponent };\r\n//# sourceMappingURL=ySelect.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/select/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts"],"map":"{\"version\":3,\"file\":\"ySelect.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/directives/select/ySelect.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/directives/select/ySelect.d.ts","writeByteOrderMark":false,"text":"import './ySelect.scss';\r\nimport { LogService } from '@smart/utils';\r\nimport * as angular from 'angular';\r\nimport { FetchStrategy, SelectApi } from '../../components/select';\r\nimport { UiSelect } from '../../services/interfaces';\r\n/**\r\n * **Deprecated since 2005, use {@link SelectApi}.**\r\n * @deprecated\r\n */\r\nexport declare type YSelectApi = SelectApi;\r\n/**\r\n * **Deprecated since 2005, use {@link SelectComponent}.**\r\n *\r\n * This component is a wrapper around ui-select directive and provides filtering capabilities for the dropdown menu that is customizable with an item template.\r\n * <br/>ySelect can work in both paged and non paged mode: providing either fetchAll or fetchPage function in the fetchStrategy will determine the flavour of the dropdown.\r\n *\r\n * ### Parameters\r\n *\r\n * `id` - will be used to identify internal elements of ySelect for styling (and testing) purposes.\r\n *\r\n * `controls` - Adds controls such as the magnifier and the remove button. Default is set to false.\r\n *\r\n * `fetchStrategy` - strategy object containing the necessary functions for ySelect to populate the dropdown:\r\n * <b>Only one of either fetchAll or fetchPage must be defined.</b>\r\n *\r\n * `fetchStrategy.fetchAll` - Function required to fetch all for a given optional mask.\r\n * fetchAll will be called without arguments upon initialization and with a mask every time the search section receives an input.\r\n * It must return a promise resolving to a list of items.\r\n * Every item must have a property \"id\" used for identification. If no itemTemplate is provided, these items will need to display a \"label\" property.\r\n *\r\n * `fetchStrategy.fetchPage` - Function required to fetch a page for a given optional mask.\r\n * fetchPage must fulfill the contract of fetchPage from {@link YInfiniteScrollingComponent}\r\n * It must return a promise resolving to a page of items as per `Page`.\r\n * Every item must have a property \"id\" used for identification. If no itemTemplate is provided, these items will need to display a \"label\" property.\r\n *\r\n * `fetchStrategy.fetchEntity` - Function to fetch an option by its identifier when we are in paged mode (fetchPage is defined) and the dropdown is initialized with a value.\r\n *\r\n * `disableChoiceFn` - A function to disable results in the drop-down. It is invoked for each item in the drop-down, with a single parameter, the item itself.\r\n *\r\n * `placeholder` - the placeholder label or i18nKey that will be printed in the search section.\r\n *\r\n * `itemTemplate` - the path to the template that will be used to display items in both the dropdown menu and the selection.\r\n * ItemTemplate has access to item, selected and the ySelect controller.\r\n * item is the item to print, selected is a boolean that is true when the template is used in the selection as opposed to the dropdown menu.\r\n * Default template will be:\r\n *\r\n *      <span data-ng-bind-html=\"item.label | translate\"></span>\r\n *\r\n *\r\n * `keepModelOnReset` - A non-paged dropdown: if the value is set to false, the widget will remove the selected entities in the model that no longer match the values available on the server.\r\n * For a paged dropdown: After a standard reset, even if keepModelOnReset is set to false,  the widget will not be able to remove the selected entities in the model\r\n * that no longer match the values available on the server. to force the widget to remove any selected entities, you must call reset(true).\r\n *\r\n * `multiSelect` - The property specifies whether ySelect is multi-selectable.\r\n *\r\n * `reset` - A function that will be called when ySelect is reset.\r\n *\r\n * `isReadOnly` - Renders ySelect as disabled field.\r\n *\r\n * `resultsHeaderTemplate` - The template that will be used on top of the result list.\r\n *\r\n * `resultsHeaderTemplateUrl` - The path to the template what will be used on top of the result list.\r\n *\r\n * `resultsHeaderLabel` - The label that will be displayed on top of the result list.\r\n * Only one of resultsHeaderTemplate, resultsHeaderTemplateUtl, and resultsHeaderLabel shall be passed.\r\n *\r\n * `resetSearchInput` - Clears the search box after selecting an option.\r\n *\r\n * `onRemove` - A function that will be called when item was removed from selection, function is called with two arguments $item and $model\r\n *\r\n * `onSelect` - A function that will be called when item was selected, function is called with two arguments $item and $model\r\n *\r\n * `init` - A function that will be called when component is initialized, function is called with one argument $select\r\n *\r\n * `keyup` - A function that will be called on keyup event in search input, function is called with two arguments $event and $select.search\r\n *\r\n * `getApi` - Exposes the ySelect's api object. See {@link YSelectApi} for more information.\r\n *\r\n * `showRemoveButton` -  Adds remove button\r\n *\r\n * @deprecated\r\n */\r\nexport declare class YSelectComponent<T extends {\r\n    id: string;\r\n}> {\r\n    private logService;\r\n    private $templateCache;\r\n    id: string;\r\n    controls: boolean;\r\n    fetchStrategy: FetchStrategy<T>;\r\n    disableChoiceFn: (item: T) => boolean;\r\n    placeholder: string;\r\n    itemTemplate: string;\r\n    keepModelOnReset: boolean;\r\n    multiSelect: boolean;\r\n    reset: (isForceReset: boolean) => void;\r\n    isReadOnly: boolean;\r\n    result: string;\r\n    resultsHeaderTemplateUrl: string;\r\n    resultsHeaderTemplate: string;\r\n    resultsHeaderLabel: string;\r\n    resetSearchInput: boolean;\r\n    onRemove: (item: T, model: string[] | string) => void;\r\n    onSelect: (item: T, model: string[] | string) => void;\r\n    onChange: () => void;\r\n    init: ($select: UiSelect<T>) => void;\r\n    keyup: (event: Event, search: string) => void;\r\n    validationState: string;\r\n    theme: string;\r\n    actionableSearchItemTemplateConfig: {\r\n        templateUrl: string;\r\n    };\r\n    api: YSelectApi;\r\n    getApi: (api: {\r\n        $api: YSelectApi;\r\n    }) => void;\r\n    items: T[];\r\n    searchEnabled: boolean;\r\n    exposedModel: angular.INgModelController;\r\n    model: string[] | string;\r\n    showRemoveButton: boolean;\r\n    constructor(logService: LogService, $templateCache: angular.ITemplateCacheService);\r\n    $onInit(): void;\r\n    $onChanges(changes?: angular.IOnChangesObject): Promise<any>;\r\n    syncModels(): void;\r\n    clear($select: UiSelect<T>, $event: Event): void;\r\n    showResultHeader(): boolean;\r\n    getActionableTemplateUrl(): string;\r\n    refreshOptions(mask: string): void;\r\n    internalOnRemove(item: T, model: string[] | string): void;\r\n    internalOnSelect(item: T, model: string[] | string): void;\r\n    internalInit(select: UiSelect<T>): void;\r\n    internalKeyup(event: Event, selectSearch: string): void;\r\n    internalOnChange(): void;\r\n    internalFetchAll(): Promise<any>;\r\n    internalFetchEntities(): Promise<any>;\r\n    fetchEntity(entryId: string): Promise<T>;\r\n    updateModelIfNecessary(): void;\r\n    isValidConfiguration(): void;\r\n    requiresPaginatedStyling(): boolean;\r\n    hasError(): boolean;\r\n    hasWarning(): boolean;\r\n    hasControls(): boolean;\r\n    disableChoice(item: T): boolean;\r\n    private isPagedDropdown;\r\n    private resetModel;\r\n    private updateControlTemplate;\r\n    private isModelEmpty;\r\n    private _updateChild;\r\n}\r\n"}}
