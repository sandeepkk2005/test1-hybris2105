{"code":"/**\r\n * Provides a Timer object that can invoke a callback after a certain period of time.\r\n *\r\n * A `Timer` must be instanciated calling **`timerService.createTimer()`**.\r\n * This `Timer` service uses native setInterval function and adds additional functions to it.\r\n */\r\nvar Timer = /** @class */ (function () {\r\n    /**\r\n     * @param _callback Callback function that will be invoked upon timeout.\r\n     * @param _duration The number of milliseconds to wait before the callback is invoked.\r\n     */\r\n    function Timer(zone, _callback, _duration) {\r\n        if (_duration === void 0) { _duration = 1000; }\r\n        this.zone = zone;\r\n        this._callback = _callback;\r\n        this._duration = _duration;\r\n        /**\r\n         * Keeps the interval reference. This will only be non-null when the\r\n         * timer is actively counting down to callback invocation\r\n         */\r\n        this._timer = null;\r\n    }\r\n    /**\r\n     * Returns true if the timer is active (counting down).\r\n     */\r\n    Timer.prototype.isActive = function () {\r\n        return !!this._timer;\r\n    };\r\n    /**\r\n     * Stops the timer, and then starts it again. If a new duration is given, the timer's duration will be set to that new value.\r\n     *\r\n     * @param duration The new number of milliseconds to wait before the callback is invoked.\r\n     * If not provided, the previously set duration is used.\r\n     */\r\n    Timer.prototype.restart = function (duration) {\r\n        this._duration = duration || this._duration;\r\n        this.stop();\r\n        this.start();\r\n    };\r\n    /**\r\n     * Start the timer, which will invoke the callback upon timeout.\r\n     *\r\n     * @param duration The new number of milliseconds to wait before the callback is invoked.\r\n     * If not provided, the previously set duration is used.\r\n     */\r\n    Timer.prototype.start = function (duration) {\r\n        var _this = this;\r\n        this._duration = duration || this._duration;\r\n        this.zone.runOutsideAngular(function () {\r\n            _this._timer = setInterval(function () {\r\n                try {\r\n                    if (_this._callback) {\r\n                        _this._callback();\r\n                    }\r\n                    else {\r\n                        _this.stop();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _this.stop();\r\n                }\r\n            }, _this._duration);\r\n        });\r\n    };\r\n    /**\r\n     * Stop the current timer, if it is running, which will prevent the callback from being invoked.\r\n     */\r\n    Timer.prototype.stop = function () {\r\n        clearInterval(this._timer);\r\n        this._timer = null;\r\n    };\r\n    /**\r\n     * Sets the duration to a new value.\r\n     *\r\n     * @param duration The new number of milliseconds to wait before the callback is invoked.\r\n     * If not provided, the previously set duration is used.\r\n     */\r\n    Timer.prototype.resetDuration = function (duration) {\r\n        this._duration = duration || this._duration;\r\n    };\r\n    /**\r\n     * Clean up the internal object references\r\n     */\r\n    Timer.prototype.teardown = function () {\r\n        this.stop();\r\n        this._callback = null;\r\n        this._duration = null;\r\n        this._timer = null;\r\n    };\r\n    return Timer;\r\n}());\r\nexport { Timer };\r\n//# sourceMappingURL=Timer.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts"],"map":"{\"version\":3,\"file\":\"Timer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/timer/Timer.ts\"],\"names\":[],\"mappings\":\"AAKA;;;;;GAKG;AACH;IAOI;;;OAGG;IACH,eACY,IAAY,EACZ,SAAqB,EACrB,SAAwB;QAAxB,0BAAA,EAAA,gBAAwB;QAFxB,SAAI,GAAJ,IAAI,CAAQ;QACZ,cAAS,GAAT,SAAS,CAAY;QACrB,cAAS,GAAT,SAAS,CAAe;QAbpC;;;WAGG;QACK,WAAM,GAAW,IAAI,CAAC;IAU3B,CAAC;IAEJ;;OAEG;IACH,wBAAQ,GAAR;QACI,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACH,uBAAO,GAAP,UAAQ,QAAiB;QACrB,IAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC;QAC5C,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACH,qBAAK,GAAL,UAAM,QAAiB;QAAvB,iBAeC;QAdG,IAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC;QAC5C,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;YACxB,KAAI,CAAC,MAAM,GAAI,WAAW,CAAC;gBACvB,IAAI;oBACA,IAAI,KAAI,CAAC,SAAS,EAAE;wBAChB,KAAI,CAAC,SAAS,EAAE,CAAC;qBACpB;yBAAM;wBACH,KAAI,CAAC,IAAI,EAAE,CAAC;qBACf;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACR,KAAI,CAAC,IAAI,EAAE,CAAC;iBACf;YACL,CAAC,EAAE,KAAI,CAAC,SAAS,CAAuB,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,oBAAI,GAAJ;QACI,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,6BAAa,GAAb,UAAc,QAAgB;QAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,wBAAQ,GAAR;QACI,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IACL,YAAC;AAAD,CAAC,AAtFD,IAsFC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/timer/Timer.d.ts","writeByteOrderMark":false,"text":"import { NgZone } from '@angular/core';\r\n/**\r\n * Provides a Timer object that can invoke a callback after a certain period of time.\r\n *\r\n * A `Timer` must be instanciated calling **`timerService.createTimer()`**.\r\n * This `Timer` service uses native setInterval function and adds additional functions to it.\r\n */\r\nexport declare class Timer {\r\n    private zone;\r\n    private _callback;\r\n    private _duration;\r\n    /**\r\n     * Keeps the interval reference. This will only be non-null when the\r\n     * timer is actively counting down to callback invocation\r\n     */\r\n    private _timer;\r\n    /**\r\n     * @param _callback Callback function that will be invoked upon timeout.\r\n     * @param _duration The number of milliseconds to wait before the callback is invoked.\r\n     */\r\n    constructor(zone: NgZone, _callback: () => void, _duration?: number);\r\n    /**\r\n     * Returns true if the timer is active (counting down).\r\n     */\r\n    isActive(): boolean;\r\n    /**\r\n     * Stops the timer, and then starts it again. If a new duration is given, the timer's duration will be set to that new value.\r\n     *\r\n     * @param duration The new number of milliseconds to wait before the callback is invoked.\r\n     * If not provided, the previously set duration is used.\r\n     */\r\n    restart(duration?: number): void;\r\n    /**\r\n     * Start the timer, which will invoke the callback upon timeout.\r\n     *\r\n     * @param duration The new number of milliseconds to wait before the callback is invoked.\r\n     * If not provided, the previously set duration is used.\r\n     */\r\n    start(duration?: number): void;\r\n    /**\r\n     * Stop the current timer, if it is running, which will prevent the callback from being invoked.\r\n     */\r\n    stop(): void;\r\n    /**\r\n     * Sets the duration to a new value.\r\n     *\r\n     * @param duration The new number of milliseconds to wait before the callback is invoked.\r\n     * If not provided, the previously set duration is used.\r\n     */\r\n    resetDuration(duration: number): void;\r\n    /**\r\n     * Clean up the internal object references\r\n     */\r\n    teardown(): void;\r\n}\r\n"}}
