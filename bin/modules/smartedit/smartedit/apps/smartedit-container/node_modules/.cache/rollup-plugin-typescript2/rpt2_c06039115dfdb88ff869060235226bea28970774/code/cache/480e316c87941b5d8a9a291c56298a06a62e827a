{"code":"import { __decorate, __extends, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { rarelyChangingContent, userEvictionTag, Cached, CryptographicUtils, GatewayProxied, ISessionService, IStorageService, LogService, PREVIOUS_USERNAME_HASH, RestServiceFactory, SeDowngradeService, WHO_AM_I_RESOURCE_URI } from 'smarteditcommons';\r\n/** @internal */\r\nvar /* @ngInject */ SessionService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ SessionService, _super);\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function /* @ngInject */ SessionService($log, restServiceFactory, storageService, cryptographicUtils) {\r\n        var _this = _super.call(this) || this;\r\n        _this.$log = $log;\r\n        _this.storageService = storageService;\r\n        _this.cryptographicUtils = cryptographicUtils;\r\n        // ------------------------------------------------------------------------\r\n        // Constants\r\n        // ------------------------------------------------------------------------\r\n        _this.USER_DATA_URI = '/cmswebservices/v1/users/:userUid';\r\n        _this.whoAmIService = restServiceFactory.get(WHO_AM_I_RESOURCE_URI);\r\n        _this.userRestService = restServiceFactory.get(_this.USER_DATA_URI);\r\n        return _this;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Public API\r\n    // ------------------------------------------------------------------------\r\n    /* @ngInject */ SessionService.prototype.getCurrentUserDisplayName = function () {\r\n        return this.getCurrentUserData().then(function (currentUserData) { return currentUserData.displayName; });\r\n    };\r\n    /* @ngInject */ SessionService.prototype.getCurrentUsername = function () {\r\n        return this.getCurrentUserData().then(function (currentUserData) { return currentUserData.uid; });\r\n    };\r\n    /* @ngInject */ SessionService.prototype.getCurrentUser = function () {\r\n        return this.getCurrentUserData();\r\n    };\r\n    /* @ngInject */ SessionService.prototype.hasUserChanged = function () {\r\n        var _this = this;\r\n        var prevHashPromise = Promise.resolve(this.cachedUserHash\r\n            ? this.cachedUserHash\r\n            : this.storageService.getItem(PREVIOUS_USERNAME_HASH));\r\n        return prevHashPromise.then(function (prevHash) {\r\n            return _this.whoAmIService\r\n                .get({})\r\n                .then(function (currentUserData) {\r\n                return !!prevHash &&\r\n                    prevHash !== _this.cryptographicUtils.sha1Hash(currentUserData.uid);\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SessionService.prototype.setCurrentUsername = function () {\r\n        var _this = this;\r\n        return this.whoAmIService.get({}).then(function (currentUserData) {\r\n            // NOTE: For most of SmartEdit operation, it is enough to store the previous user hash in the cache.\r\n            // However, if the page is refreshed the cache is cleaned. Therefore, it's necessary to also store it in\r\n            // a cookie through the storageService.\r\n            _this.cachedUserHash = _this.cryptographicUtils.sha1Hash(currentUserData.uid);\r\n            _this.storageService.setItem(PREVIOUS_USERNAME_HASH, _this.cachedUserHash);\r\n        });\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Helper Methods\r\n    // ------------------------------------------------------------------------\r\n    /* @ngInject */ SessionService.prototype.getCurrentUserData = function () {\r\n        var _this = this;\r\n        return this.whoAmIService\r\n            .get({})\r\n            .then(function (whoAmIData) {\r\n            return _this.userRestService\r\n                .get({\r\n                userUid: whoAmIData.uid\r\n            })\r\n                .then(function (userData) { return ({\r\n                uid: userData.uid,\r\n                displayName: whoAmIData.displayName,\r\n                readableLanguages: userData.readableLanguages,\r\n                writeableLanguages: userData.writeableLanguages\r\n            }); });\r\n        })\r\n            .catch(function (reason) {\r\n            _this.$log.warn(\"[SessionService]: Can't load session information\", reason);\r\n            return null;\r\n        });\r\n    };\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ SessionService.prototype, \"getCurrentUserData\", null);\r\n    /* @ngInject */ SessionService = __decorate([\r\n        SeDowngradeService(ISessionService),\r\n        GatewayProxied('getCurrentUsername', 'getCurrentUserDisplayName', 'hasUserChanged', 'setCurrentUsername', 'getCurrentUser'),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            RestServiceFactory,\r\n            IStorageService,\r\n            CryptographicUtils])\r\n    ], /* @ngInject */ SessionService);\r\n    return /* @ngInject */ SessionService;\r\n}(ISessionService));\r\nexport { /* @ngInject */ SessionService };\r\n//# sourceMappingURL=SessionServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SessionServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SessionServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/SessionServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { CryptographicUtils, ISessionService, IStorageService, LogService, RestServiceFactory, User } from 'smarteditcommons';\r\n/** @internal */\r\nexport declare class SessionService extends ISessionService {\r\n    private $log;\r\n    private storageService;\r\n    private cryptographicUtils;\r\n    private USER_DATA_URI;\r\n    private cachedUserHash;\r\n    private whoAmIService;\r\n    private userRestService;\r\n    constructor($log: LogService, restServiceFactory: RestServiceFactory, storageService: IStorageService, cryptographicUtils: CryptographicUtils);\r\n    getCurrentUserDisplayName(): Promise<string>;\r\n    getCurrentUsername(): Promise<string>;\r\n    getCurrentUser(): Promise<User>;\r\n    hasUserChanged(): Promise<boolean>;\r\n    setCurrentUsername(): Promise<void>;\r\n    private getCurrentUserData;\r\n}\r\n"}}
