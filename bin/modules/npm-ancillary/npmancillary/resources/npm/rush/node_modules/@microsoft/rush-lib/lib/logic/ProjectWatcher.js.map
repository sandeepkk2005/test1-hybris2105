{"version":3,"file":"ProjectWatcher.js","sourceRoot":"","sources":["../../src/logic/ProjectWatcher.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Import, Path } from '@rushstack/node-core-library';\r\n\r\nimport { PackageChangeAnalyzer } from './PackageChangeAnalyzer';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\n\r\n// Use lazy import because we don't need this immediately\r\nconst chokidar: typeof import('chokidar') = Import.lazy('chokidar', require);\r\n\r\nexport interface IProjectWatcherOptions {\r\n  debounceMilliseconds?: number;\r\n  rushConfiguration: RushConfiguration;\r\n  projectsToWatch: ReadonlySet<RushConfigurationProject>;\r\n}\r\n\r\nexport interface IProjectChangeResult {\r\n  /**\r\n   * The set of projects that have changed since the last iteration\r\n   */\r\n  changedProjects: ReadonlySet<RushConfigurationProject>;\r\n  /**\r\n   * Contains the git hashes for all tracked files in the repo\r\n   */\r\n  state: PackageChangeAnalyzer;\r\n}\r\n\r\n/**\r\n * This class is for incrementally watching a set of projects in the repository for changes.\r\n *\r\n * Calling `waitForChange()` will return a promise that resolves when the package-deps of one or\r\n * more projects differ from the value the previous time it was invoked. The first time will always resolve with the full selection.\r\n */\r\nexport class ProjectWatcher {\r\n  private readonly _debounceMilliseconds: number;\r\n  private readonly _rushConfiguration: RushConfiguration;\r\n  private readonly _projectsToWatch: ReadonlySet<RushConfigurationProject>;\r\n\r\n  private _initialState: PackageChangeAnalyzer | undefined;\r\n  private _previousState: PackageChangeAnalyzer | undefined;\r\n\r\n  public constructor(options: IProjectWatcherOptions) {\r\n    const { debounceMilliseconds = 1000, rushConfiguration, projectsToWatch } = options;\r\n\r\n    this._debounceMilliseconds = debounceMilliseconds;\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._projectsToWatch = projectsToWatch;\r\n  }\r\n\r\n  /**\r\n   * Waits for a change to the package-deps of one or more of the selected projects, since the previous invocation.\r\n   * Will return immediately the first time it is invoked, since no state has been recorded.\r\n   * If no change is currently present, watches the source tree of all selected projects for file changes.\r\n   */\r\n  public async waitForChange(): Promise<IProjectChangeResult> {\r\n    const initialChangeResult: IProjectChangeResult = this._computeChanged();\r\n    // Ensure that the new state is recorded so that we don't loop infinitely\r\n    this._commitChanges(initialChangeResult.state);\r\n    if (initialChangeResult.changedProjects.size) {\r\n      return initialChangeResult;\r\n    }\r\n\r\n    const watcher: import('chokidar').FSWatcher = new chokidar.FSWatcher({\r\n      persistent: true,\r\n      cwd: Path.convertToSlashes(this._rushConfiguration.rushJsonFolder),\r\n      followSymlinks: false,\r\n      ignoreInitial: true,\r\n      ignored: /(?:^|[\\\\\\/])node_modules/g,\r\n      disableGlobbing: true,\r\n      interval: 1000\r\n    });\r\n\r\n    // Only watch for changes in the requested project folders\r\n    for (const project of this._projectsToWatch) {\r\n      watcher.add(Path.convertToSlashes(project.projectFolder));\r\n    }\r\n\r\n    const watchedResult: IProjectChangeResult = await new Promise(\r\n      (resolve: (result: IProjectChangeResult) => void, reject: (err: Error) => void) => {\r\n        let timeout: NodeJS.Timeout | undefined;\r\n        let terminated: boolean = false;\r\n\r\n        const resolveIfChanged = (): void => {\r\n          timeout = undefined;\r\n          if (terminated) {\r\n            return;\r\n          }\r\n\r\n          try {\r\n            const result: IProjectChangeResult = this._computeChanged();\r\n\r\n            // Need an async tick to allow for more file system events to be handled\r\n            process.nextTick(() => {\r\n              if (timeout) {\r\n                // If another file has changed, wait for another pass.\r\n                return;\r\n              }\r\n\r\n              this._commitChanges(result.state);\r\n\r\n              if (result.changedProjects.size) {\r\n                terminated = true;\r\n                resolve(result);\r\n              }\r\n            });\r\n          } catch (err) {\r\n            terminated = true;\r\n            reject(err);\r\n          }\r\n        };\r\n\r\n        watcher.on('all', () => {\r\n          try {\r\n            if (terminated) {\r\n              return;\r\n            }\r\n\r\n            // Use a timeout to debounce changes, e.g. bulk copying files into the directory while the watcher is running.\r\n            if (timeout) {\r\n              clearTimeout(timeout);\r\n            }\r\n\r\n            timeout = setTimeout(resolveIfChanged, this._debounceMilliseconds);\r\n          } catch (err) {\r\n            terminated = true;\r\n            reject(err);\r\n          }\r\n        });\r\n      }\r\n    );\r\n\r\n    await watcher.close();\r\n\r\n    return watchedResult;\r\n  }\r\n\r\n  /**\r\n   * Determines which, if any, projects (within the selection) have new hashes for files that are not in .gitignore\r\n   */\r\n  private _computeChanged(): IProjectChangeResult {\r\n    const state: PackageChangeAnalyzer = new PackageChangeAnalyzer(this._rushConfiguration);\r\n\r\n    const previousState: PackageChangeAnalyzer | undefined = this._previousState;\r\n\r\n    if (!previousState) {\r\n      return {\r\n        changedProjects: this._projectsToWatch,\r\n        state\r\n      };\r\n    }\r\n\r\n    const changedProjects: Set<RushConfigurationProject> = new Set();\r\n    for (const project of this._projectsToWatch) {\r\n      const { packageName } = project;\r\n\r\n      if (\r\n        ProjectWatcher._haveProjectDepsChanged(\r\n          previousState.getPackageDeps(packageName)!,\r\n          state.getPackageDeps(packageName)!\r\n        )\r\n      ) {\r\n        // May need to detect if the nature of the change will break the process, e.g. changes to package.json\r\n        changedProjects.add(project);\r\n      }\r\n    }\r\n\r\n    return {\r\n      changedProjects,\r\n      state\r\n    };\r\n  }\r\n\r\n  private _commitChanges(state: PackageChangeAnalyzer): void {\r\n    this._previousState = state;\r\n    if (!this._initialState) {\r\n      this._initialState = state;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests for inequality of the passed Maps. Order invariant.\r\n   *\r\n   * @returns `true` if the maps are different, `false` otherwise\r\n   */\r\n  private static _haveProjectDepsChanged(prev: Map<string, string>, next: Map<string, string>): boolean {\r\n    if (prev.size !== next.size) {\r\n      return true;\r\n    }\r\n\r\n    for (const [key, value] of prev) {\r\n      if (next.get(key) !== value) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]}