{"code":"import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { cmsitemsEvictionTag, CMSITEMS_UPDATE_EVENT, DEFAULT_SYNCHRONIZATION_EVENT, DEFAULT_SYNCHRONIZATION_POLLING, ISyncPollingService, SynchronizationResourceService } from 'cmscommons';\r\nimport { throttle } from 'lodash';\r\nimport { from } from 'rxjs';\r\nimport { share } from 'rxjs/internal/operators';\r\nimport { CrossFrameEventService, GatewayProxied, InvalidateCache, ICatalogService, IExperienceService, IPageInfoService, SystemEventService, TimerService, SeDowngradeService, LogService, OVERLAY_RERENDERED_EVENT, EVENTS, stringUtils, windowUtils } from 'smarteditcommons';\r\nvar /* @ngInject */ SyncPollingService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ SyncPollingService, _super);\r\n    function /* @ngInject */ SyncPollingService(logService, pageInfoService, experienceService, catalogService, synchronizationResourceService, crossFrameEventService, systemEventService, timerService) {\r\n        var _this = _super.call(this) || this;\r\n        _this.logService = logService;\r\n        _this.pageInfoService = pageInfoService;\r\n        _this.experienceService = experienceService;\r\n        _this.catalogService = catalogService;\r\n        _this.synchronizationResourceService = synchronizationResourceService;\r\n        _this.crossFrameEventService = crossFrameEventService;\r\n        _this.systemEventService = systemEventService;\r\n        _this.timerService = timerService;\r\n        _this.SYNC_POLLING_THROTTLE = 500;\r\n        _this.syncStatus = {};\r\n        _this.triggers = new Set();\r\n        _this.syncPollingTimer = null;\r\n        _this.refreshInterval = null;\r\n        _this.syncPageObservableMap = new Map();\r\n        _this.initSyncPolling();\r\n        return _this;\r\n    }\r\n    /* @ngInject */ SyncPollingService.prototype.performSync = function (array, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentPageFromActiveCatalog, activeVersion;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.isCurrentPageFromActiveCatalog()];\r\n                    case 1:\r\n                        currentPageFromActiveCatalog = _a.sent();\r\n                        if (currentPageFromActiveCatalog) {\r\n                            return [2 /*return*/, Promise.reject()];\r\n                        }\r\n                        return [4 /*yield*/, this.catalogService.getContentCatalogActiveVersion(uriContext)];\r\n                    case 2:\r\n                        activeVersion = _a.sent();\r\n                        return [2 /*return*/, this.synchronizationResourceService\r\n                                .getPageSynchronizationPostRestService(uriContext)\r\n                                .save({\r\n                                target: activeVersion,\r\n                                items: array\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.getSyncStatus = function (pageUUID, uriContext, forceGetSynchronization) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _pageUUID, _a, syncStatus, syncPollingType, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        if (forceGetSynchronization) {\r\n                            this.clearSyncPageObservableMap();\r\n                        }\r\n                        if (this.syncStatus[pageUUID] &&\r\n                            pageUUID === this.syncStatus[pageUUID].itemId &&\r\n                            !forceGetSynchronization) {\r\n                            return [2 /*return*/, this.syncStatus[pageUUID]];\r\n                        }\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        _c.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.getPageUUID(pageUUID)];\r\n                    case 2:\r\n                        _pageUUID = _c.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a = _c.sent();\r\n                        this.logService.error('syncPollingService::getSyncStatus - failed call to getPageUUID');\r\n                        this.syncPollingTimer.stop();\r\n                        return [2 /*return*/, this.fetchSyncStatus(pageUUID, uriContext)];\r\n                    case 4:\r\n                        _c.trys.push([4, 6, , 7]);\r\n                        return [4 /*yield*/, this.fetchSyncStatus(_pageUUID, uriContext)];\r\n                    case 5:\r\n                        syncStatus = _c.sent();\r\n                        syncPollingType = this.getSyncPollingTypeFromInterval(this.refreshInterval);\r\n                        this.startSync(syncPollingType);\r\n                        return [2 /*return*/, syncStatus];\r\n                    case 6:\r\n                        _b = _c.sent();\r\n                        this.logService.error('syncPollingService::getSyncStatus - failed call to fetchSyncStatus');\r\n                        return [2 /*return*/, Promise.reject()];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.fetchSyncStatus = function (_pageUUID, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pageUUID, currentPageFromActiveCatalog, activeVersion, uniqueKeyForPage, syncPageObservable, err_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 4, , 5]);\r\n                        return [4 /*yield*/, this.getPageUUID(_pageUUID)];\r\n                    case 1:\r\n                        pageUUID = _a.sent();\r\n                        if (!pageUUID) {\r\n                            return [2 /*return*/, {}];\r\n                        }\r\n                        return [4 /*yield*/, this.isCurrentPageFromActiveCatalog()];\r\n                    case 2:\r\n                        currentPageFromActiveCatalog = _a.sent();\r\n                        if (currentPageFromActiveCatalog) {\r\n                            return [2 /*return*/, Promise.reject()];\r\n                        }\r\n                        return [4 /*yield*/, this.catalogService.getContentCatalogActiveVersion(uriContext)];\r\n                    case 3:\r\n                        activeVersion = _a.sent();\r\n                        uniqueKeyForPage = stringUtils.encode(pageUUID);\r\n                        syncPageObservable = this.syncPageObservableMap.get(uniqueKeyForPage);\r\n                        // Re-use pre-existing Observable to avoid concurrent HTTP call to the same synchronization url.\r\n                        return [2 /*return*/, syncPageObservable\r\n                                ? syncPageObservable.toPromise()\r\n                                : this.fetchPageSynchronization(activeVersion, pageUUID, uriContext).toPromise()];\r\n                    case 4:\r\n                        err_1 = _a.sent();\r\n                        this.stopSync();\r\n                        this.logService.warn(err_1);\r\n                        return [3 /*break*/, 5];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /*\r\n     * This method is used to change the speed (up/down) of the sync polling. EventId could be syncPollingSpeedUp or syncPollingSlowDown.\r\n     * If multiple services are changing the speed of the polling and in order to differentiate between them 'key' must to be used and it should be unique among the services.\r\n     * For example: key could be servicePrefix + pageUuid/itemId\r\n     * If at least one service needs fast polling, refreshInterval will be set to fast polling. If none of them needs fast polling, refreshInterval will be set to slow polling.\r\n     */\r\n    /* @ngInject */ SyncPollingService.prototype.changePollingSpeed = function (eventId, key) {\r\n        if (eventId === DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP) {\r\n            this.syncStatus = {};\r\n            if (key && !this.triggers.has(key)) {\r\n                this.triggers.add(key);\r\n            }\r\n            this.refreshInterval = DEFAULT_SYNCHRONIZATION_POLLING.FAST_POLLING_TIME;\r\n        }\r\n        else {\r\n            if (key) {\r\n                this.triggers.delete(key);\r\n            }\r\n            if (this.triggers.size === 0) {\r\n                this.refreshInterval = DEFAULT_SYNCHRONIZATION_POLLING.SLOW_POLLING_TIME;\r\n            }\r\n        }\r\n        this.syncPollingTimer.restart(this.refreshInterval);\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.fetchPageSynchronization = function (activeVersion, pageUUID, uriContext) {\r\n        var syncObservable = from(this.getPageSlotSyncStatus(uriContext, pageUUID, activeVersion));\r\n        var uniqueKeyForPage = stringUtils.encode(pageUUID);\r\n        this.syncPageObservableMap.set(uniqueKeyForPage, syncObservable);\r\n        return syncObservable.pipe(share());\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.getPageSlotSyncStatus = function (uriContext, pageUUID, activeVersion) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var syncStatus, lastSyncStatus;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.synchronizationResourceService\r\n                            .getPageSynchronizationGetRestService(uriContext)\r\n                            .get({\r\n                            pageUid: pageUUID,\r\n                            target: activeVersion\r\n                        })];\r\n                    case 1:\r\n                        syncStatus = _a.sent();\r\n                        lastSyncStatus = this.syncStatus[syncStatus.itemId];\r\n                        if (JSON.stringify(syncStatus) !== JSON.stringify(lastSyncStatus)) {\r\n                            this.crossFrameEventService.publish(DEFAULT_SYNCHRONIZATION_POLLING.FAST_FETCH, syncStatus);\r\n                            if (!lastSyncStatus ||\r\n                                syncStatus.lastModifiedDate !== lastSyncStatus.lastModifiedDate ||\r\n                                syncStatus.status !== lastSyncStatus.status) {\r\n                                this.crossFrameEventService.publish(CMSITEMS_UPDATE_EVENT);\r\n                                this.crossFrameEventService.publish(EVENTS.PAGE_UPDATED, {\r\n                                    uuid: pageUUID\r\n                                });\r\n                            }\r\n                        }\r\n                        this.syncStatus[syncStatus.itemId] = syncStatus;\r\n                        this.clearSyncPageObservableMap();\r\n                        return [2 /*return*/, syncStatus];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.stopSync = function () {\r\n        if (this.syncPollingTimer.isActive()) {\r\n            this.syncPollingTimer.stop();\r\n        }\r\n        this.clearSyncStatus();\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.startSync = function (syncPollingType) {\r\n        if (!this.syncPollingTimer.isActive()) {\r\n            this.changePollingSpeed(syncPollingType || DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN);\r\n        }\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.initSyncPolling = function () {\r\n        var _this = this;\r\n        this.refreshInterval = DEFAULT_SYNCHRONIZATION_POLLING.SLOW_POLLING_TIME;\r\n        /**\r\n         * When multiple items needs sync polling at different paces (either slow or fast),\r\n         * triggers array makes sure to set to fast polling even if any one of them needs fast polling.\r\n         */\r\n        this.triggers.clear();\r\n        this.syncStatus = {};\r\n        var changePolling = this.changePollingSpeed.bind(this);\r\n        this.systemEventService.subscribe(DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP, changePolling);\r\n        this.systemEventService.subscribe(DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN, changePolling);\r\n        this.crossFrameEventService.subscribe(DEFAULT_SYNCHRONIZATION_POLLING.FETCH_SYNC_STATUS_ONCE, function (eventId, pageUUID) {\r\n            _this.fetchSyncStatus(pageUUID);\r\n        });\r\n        this.crossFrameEventService.subscribe(OVERLAY_RERENDERED_EVENT, throttle(function () {\r\n            if (_this.syncPollingTimer.isActive()) {\r\n                _this.fetchSyncStatus();\r\n            }\r\n        }, this.SYNC_POLLING_THROTTLE));\r\n        this.crossFrameEventService.subscribe(EVENTS.PAGE_CHANGE, function () {\r\n            _this.clearSyncStatus();\r\n            _this.clearSyncPageObservableMap();\r\n        });\r\n        this.crossFrameEventService.subscribe(DEFAULT_SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED, function () {\r\n            _this.syncStatus = {};\r\n            _this.fetchSyncStatus();\r\n        });\r\n        // fetchSyncStatus callback uses current page uuid by default\r\n        this.syncPollingTimer = this.timerService.createTimer(function () { return _this.fetchSyncStatus(); }, this.refreshInterval);\r\n        // start sync polling if it is a storefront page\r\n        if (windowUtils.getGatewayTargetFrame()) {\r\n            var syncPollingType = this.getSyncPollingTypeFromInterval(this.refreshInterval);\r\n            this.startSync(syncPollingType);\r\n        }\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.clearSyncPageObservableMap = function () {\r\n        this.syncPageObservableMap.clear();\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.clearSyncStatus = function () {\r\n        this.syncStatus = {};\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.getPageUUID = function (_pageUUID) {\r\n        return !stringUtils.isBlank(_pageUUID)\r\n            ? Promise.resolve(_pageUUID)\r\n            : this.pageInfoService.getPageUUID();\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.isCurrentPageFromActiveCatalog = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentExperience;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];\r\n                    case 1:\r\n                        currentExperience = _a.sent();\r\n                        return [2 /*return*/, currentExperience.pageContext\r\n                                ? currentExperience.pageContext.active\r\n                                : currentExperience.catalogDescriptor.active];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ SyncPollingService.prototype.getSyncPollingTypeFromInterval = function (interval) {\r\n        return interval === DEFAULT_SYNCHRONIZATION_POLLING.FAST_POLLING_TIME\r\n            ? DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP\r\n            : DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN;\r\n    };\r\n    __decorate([\r\n        InvalidateCache(cmsitemsEvictionTag),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array, Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ SyncPollingService.prototype, \"performSync\", null);\r\n    /* @ngInject */ SyncPollingService = __decorate([\r\n        SeDowngradeService(ISyncPollingService),\r\n        GatewayProxied('getSyncStatus', 'fetchSyncStatus', 'changePollingSpeed', 'registerSyncPollingEvents', 'performSync'),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            IPageInfoService,\r\n            IExperienceService,\r\n            ICatalogService,\r\n            SynchronizationResourceService,\r\n            CrossFrameEventService,\r\n            SystemEventService,\r\n            TimerService])\r\n    ], /* @ngInject */ SyncPollingService);\r\n    return /* @ngInject */ SyncPollingService;\r\n}(ISyncPollingService));\r\nexport { /* @ngInject */ SyncPollingService };\r\n//# sourceMappingURL=SyncPollingServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/internal/operators/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SyncPollingServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SyncPollingServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/services/SyncPollingServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { ISyncJob, ISyncPollingService, ISyncStatus, SynchronizationResourceService } from 'cmscommons';\r\nimport { CrossFrameEventService, ICatalogService, IExperienceService, IPageInfoService, IUriContext, SystemEventService, TimerService, TypedMap, LogService } from 'smarteditcommons';\r\nexport declare class SyncPollingService extends ISyncPollingService {\r\n    private logService;\r\n    private pageInfoService;\r\n    private experienceService;\r\n    private catalogService;\r\n    private synchronizationResourceService;\r\n    private crossFrameEventService;\r\n    private systemEventService;\r\n    private timerService;\r\n    SYNC_POLLING_THROTTLE: number;\r\n    private syncStatus;\r\n    private triggers;\r\n    private syncPollingTimer;\r\n    private refreshInterval;\r\n    private syncPageObservableMap;\r\n    constructor(logService: LogService, pageInfoService: IPageInfoService, experienceService: IExperienceService, catalogService: ICatalogService, synchronizationResourceService: SynchronizationResourceService, crossFrameEventService: CrossFrameEventService, systemEventService: SystemEventService, timerService: TimerService);\r\n    performSync(array: TypedMap<string>[], uriContext: IUriContext): Promise<ISyncJob>;\r\n    getSyncStatus(pageUUID?: string, uriContext?: IUriContext, forceGetSynchronization?: boolean): Promise<ISyncStatus>;\r\n    fetchSyncStatus(_pageUUID?: string, uriContext?: IUriContext): Promise<ISyncStatus>;\r\n    changePollingSpeed(eventId: string, key?: string): void;\r\n    private fetchPageSynchronization;\r\n    private getPageSlotSyncStatus;\r\n    private stopSync;\r\n    private startSync;\r\n    private initSyncPolling;\r\n    private clearSyncPageObservableMap;\r\n    private clearSyncStatus;\r\n    private getPageUUID;\r\n    private isCurrentPageFromActiveCatalog;\r\n    private getSyncPollingTypeFromInterval;\r\n}\r\n"}}
