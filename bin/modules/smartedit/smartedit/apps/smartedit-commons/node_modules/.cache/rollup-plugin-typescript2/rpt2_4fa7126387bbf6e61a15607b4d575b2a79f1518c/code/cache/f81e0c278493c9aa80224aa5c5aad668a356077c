{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { SeDowngradeService } from 'smarteditcommons/di/SeDowngradeService';\r\nimport { WindowUtils } from 'smarteditcommons/utils';\r\nimport { MessageGateway } from '../gateway/MessageGateway';\r\nimport { SystemEventService } from '../SystemEventService';\r\nimport { CrossFrameEventServiceGateway } from './CrossFrameEventServiceGateway';\r\nwindow.__smartedit__.addDecoratorPayload(\"Injectable\", \"CrossFrameEventService\", { providedIn: 'root' });\r\n/**\r\n * The Cross Frame Event Service is responsible for publishing and subscribing events within and between frames.\r\n *\r\n * It uses {@link GatewayFactory} and {@link SystemEventService} to transmit events.\r\n */\r\nvar /* @ngInject */ CrossFrameEventService = /** @class */ (function () {\r\n    function /* @ngInject */ CrossFrameEventService(systemEventService, crossFrameEventServiceGateway, windowUtils) {\r\n        this.systemEventService = systemEventService;\r\n        this.crossFrameEventServiceGateway = crossFrameEventServiceGateway;\r\n        this.windowUtils = windowUtils;\r\n    }\r\n    /**\r\n     * Publishes an event within and across the gateway.\r\n     *\r\n     * The publish method is used to send events using [publishAsync]{@link SystemEventService#publishAsync}\r\n     * and as well send the message across the gateway by using [publish]{@link MessageGateway#publish} of the {@link GatewayFactory}.\r\n     */\r\n    /* @ngInject */ CrossFrameEventService.prototype.publish = function (eventId, data) {\r\n        var promises = [this.systemEventService.publishAsync(eventId, data)];\r\n        if (this.windowUtils.getGatewayTargetFrame()) {\r\n            promises.push(this.crossFrameEventServiceGateway.publish(eventId, data));\r\n        }\r\n        return Promise.all(promises);\r\n    };\r\n    /**\r\n     * Subscribe to an event across both frames.\r\n     *\r\n     * The subscribe method is used to register for listening to events using subscribe method of\r\n     * {@link SystemEventService} and as well send the registration message across the gateway by using\r\n     * [subscribe]{@link MessageGateway#subscribe} of the {@link GatewayFactory}.\r\n     *\r\n     * @param handler Callback function to be invoked\r\n     * @returns The function to call in order to unsubscribe the event listening.\r\n     * This will unsubscribe both from the systemEventService and the crossFrameEventServiceGatway.\r\n     */\r\n    /* @ngInject */ CrossFrameEventService.prototype.subscribe = function (eventId, handler) {\r\n        var systemEventServiceUnsubscribeFn = this.systemEventService.subscribe(eventId, handler);\r\n        var crossFrameEventServiceGatewayUnsubscribeFn = this.crossFrameEventServiceGateway.subscribe(eventId, handler);\r\n        var unsubscribeFn = function () {\r\n            systemEventServiceUnsubscribeFn();\r\n            crossFrameEventServiceGatewayUnsubscribeFn();\r\n        };\r\n        return unsubscribeFn;\r\n    };\r\n    /* @ngInject */ CrossFrameEventService = __decorate([\r\n        SeDowngradeService(),\r\n        Injectable({ providedIn: 'root' }),\r\n        __param(1, Inject(CrossFrameEventServiceGateway.crossFrameEventServiceGatewayToken)),\r\n        __metadata(\"design:paramtypes\", [SystemEventService,\r\n            MessageGateway,\r\n            WindowUtils])\r\n    ], /* @ngInject */ CrossFrameEventService);\r\n    return /* @ngInject */ CrossFrameEventService;\r\n}());\r\nexport { /* @ngInject */ CrossFrameEventService };\r\n//# sourceMappingURL=CrossFrameEventService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/SeDowngradeService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/gateway/MessageGateway.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/SystemEventService.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/crossFrame/CrossFrameEventServiceGateway.ts"],"map":"{\"version\":3,\"file\":\"CrossFrameEventService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/crossFrame/CrossFrameEventService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAEnD,OAAO,EAAE,kBAAkB,EAAE,MAAM,wCAAwC,CAAC;AAC5E,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAC3D,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC3D,OAAO,EAAE,6BAA6B,EAAE,MAAM,iCAAiC,CAAC;iFAQpE,EAAE,UAAU,EAAE,MAAM,EAAE;AANlC;;;;GAIG;AAGH;IACI,gDACY,kBAAsC,EAEtC,6BAA6C,EAC7C,WAAwB;QAHxB,uBAAkB,GAAlB,kBAAkB,CAAoB;QAEtC,kCAA6B,GAA7B,6BAA6B,CAAgB;QAC7C,gBAAW,GAAX,WAAW,CAAa;IACjC,CAAC;IAEJ;;;;;OAKG;IACH,wDAAO,GAAP,UAAQ,OAAe,EAAE,IAAU;QAC/B,IAAM,QAAQ,GAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAE9E,IAAI,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,EAAE;YAC1C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;SAC5E;QAED,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;;;;;OAUG;IACH,0DAAS,GAAT,UAA+B,OAAe,EAAE,OAAiC;QAC7E,IAAM,+BAA+B,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5F,IAAM,0CAA0C,GAAG,IAAI,CAAC,6BAA6B,CAAC,SAAS,CAC3F,OAAO,EACP,OAAO,CACV,CAAC;QAEF,IAAM,aAAa,GAAG;YAClB,+BAA+B,EAAE,CAAC;YAClC,0CAA0C,EAAE,CAAC;QACjD,CAAC,CAAC;QAEF,OAAO,aAAa,CAAC;IACzB,CAAC;IAhDL;QAFC,kBAAkB,EAAE;QACpB,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;QAI1B,WAAA,MAAM,CAAC,6BAA6B,CAAC,kCAAkC,CAAC,CAAA;yCAD7C,kBAAkB;YAEP,cAAc;YAChC,WAAW;8CA4CvC;IAAD,6CAAC;CAAA,AAjDD,IAiDC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/crossFrame/CrossFrameEventService.d.ts","writeByteOrderMark":false,"text":"import { Cloneable, CloneableEventHandler, IEventService } from '@smart/utils';\r\nimport { WindowUtils } from 'smarteditcommons/utils';\r\nimport { MessageGateway } from '../gateway/MessageGateway';\r\nimport { SystemEventService } from '../SystemEventService';\r\n/**\r\n * The Cross Frame Event Service is responsible for publishing and subscribing events within and between frames.\r\n *\r\n * It uses {@link GatewayFactory} and {@link SystemEventService} to transmit events.\r\n */\r\nexport declare class CrossFrameEventService implements IEventService {\r\n    private systemEventService;\r\n    private crossFrameEventServiceGateway;\r\n    private windowUtils;\r\n    constructor(systemEventService: SystemEventService, crossFrameEventServiceGateway: MessageGateway, windowUtils: WindowUtils);\r\n    /**\r\n     * Publishes an event within and across the gateway.\r\n     *\r\n     * The publish method is used to send events using [publishAsync]{@link SystemEventService#publishAsync}\r\n     * and as well send the message across the gateway by using [publish]{@link MessageGateway#publish} of the {@link GatewayFactory}.\r\n     */\r\n    publish(eventId: string, data?: any): Promise<any[]>;\r\n    /**\r\n     * Subscribe to an event across both frames.\r\n     *\r\n     * The subscribe method is used to register for listening to events using subscribe method of\r\n     * {@link SystemEventService} and as well send the registration message across the gateway by using\r\n     * [subscribe]{@link MessageGateway#subscribe} of the {@link GatewayFactory}.\r\n     *\r\n     * @param handler Callback function to be invoked\r\n     * @returns The function to call in order to unsubscribe the event listening.\r\n     * This will unsubscribe both from the systemEventService and the crossFrameEventServiceGatway.\r\n     */\r\n    subscribe<T extends Cloneable>(eventId: string, handler: CloneableEventHandler<T>): () => void;\r\n}\r\n"}}
