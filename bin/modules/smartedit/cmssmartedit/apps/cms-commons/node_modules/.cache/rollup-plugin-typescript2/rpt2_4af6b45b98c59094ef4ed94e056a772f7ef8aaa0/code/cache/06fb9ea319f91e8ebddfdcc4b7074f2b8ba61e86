{"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\r\nimport { authorizationEvictionTag, rarelyChangingContent, Cached, ISessionService, SeDowngradeService, LogService, IRestServiceFactory } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available type permission names for a given item\r\n */\r\nexport var TypePermissionNames;\r\n(function (TypePermissionNames) {\r\n    TypePermissionNames[\"CREATE\"] = \"create\";\r\n    TypePermissionNames[\"READ\"] = \"read\";\r\n    TypePermissionNames[\"CHANGE\"] = \"change\";\r\n    TypePermissionNames[\"REMOVE\"] = \"remove\";\r\n})(TypePermissionNames || (TypePermissionNames = {}));\r\n/**\r\n * Rest Service to retrieve the type permissions.\r\n */\r\nvar /* @ngInject */ TypePermissionsRestService = /** @class */ (function () {\r\n    function /* @ngInject */ TypePermissionsRestService(logService, sessionService, restServiceFactory) {\r\n        this.logService = logService;\r\n        this.sessionService = sessionService;\r\n        this.URI = '/permissionswebservices/v1/permissions/types/search';\r\n        this.resource = restServiceFactory.get(this.URI);\r\n    }\r\n    /**\r\n     * Determines if the current user has CREATE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CREATE access to the type or false otherwise).\r\n     */\r\n    /* @ngInject */ TypePermissionsRestService.prototype.hasCreatePermissionForTypes = function (types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.CREATE);\r\n    };\r\n    /**\r\n     * Determines if the current user has READ access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    /* @ngInject */ TypePermissionsRestService.prototype.hasReadPermissionForTypes = function (types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.READ);\r\n    };\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CHANGE access to the type or false otherwise).\r\n     */\r\n    /* @ngInject */ TypePermissionsRestService.prototype.hasUpdatePermissionForTypes = function (types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.CHANGE);\r\n    };\r\n    /**\r\n     * Determines if the current user has REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has REMOVE access to the type or false otherwise).\r\n     */\r\n    /* @ngInject */ TypePermissionsRestService.prototype.hasDeletePermissionForTypes = function (types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.REMOVE);\r\n    };\r\n    /**\r\n     * Determines if the current user has READ, CREATE, CHANGE, REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap of TypedMap object with key (the code) and\r\n     * value (true if the user has corresponding access to the type or false otherwise).\r\n     * {\r\n     *  \"typeA\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": true},\r\n     *  \"typeB\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": false}\r\n     * }\r\n     */\r\n    /* @ngInject */ TypePermissionsRestService.prototype.hasAllPermissionsForTypes = function (types) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var initialMap, permissionsForTypes;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        initialMap = {};\r\n                        return [4 /*yield*/, this.getAllPermissionsForTypes(types)];\r\n                    case 1:\r\n                        permissionsForTypes = _a.sent();\r\n                        return [2 /*return*/, permissionsForTypes.reduce(function (map, permissionsResult) {\r\n                                if (permissionsResult.permissions) {\r\n                                    map[permissionsResult.id] = {};\r\n                                    map[permissionsResult.id][TypePermissionNames.READ] = _this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.READ);\r\n                                    map[permissionsResult.id][TypePermissionNames.CHANGE] = _this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.CHANGE);\r\n                                    map[permissionsResult.id][TypePermissionNames.CREATE] = _this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.CREATE);\r\n                                    map[permissionsResult.id][TypePermissionNames.REMOVE] = _this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.REMOVE);\r\n                                }\r\n                                return map;\r\n                            }, initialMap)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ TypePermissionsRestService.prototype.getAllPermissionsForTypes = function (types) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var user, permissionNames, result, error_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (types.length === 0) {\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        return [4 /*yield*/, this.sessionService.getCurrentUsername()];\r\n                    case 1:\r\n                        user = _a.sent();\r\n                        if (!user) {\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 4, , 5]);\r\n                        permissionNames = [\r\n                            TypePermissionNames.CREATE,\r\n                            TypePermissionNames.CHANGE,\r\n                            TypePermissionNames.READ,\r\n                            TypePermissionNames.REMOVE\r\n                        ].join(',');\r\n                        return [4 /*yield*/, this.resource.queryByPost({ principalUid: user }, { types: types.join(','), permissionNames: permissionNames })];\r\n                    case 3:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result.permissionsList || []];\r\n                    case 4:\r\n                        error_1 = _a.sent();\r\n                        if (error_1) {\r\n                            this.logService.error(\"TypePermissionsRestService - no composed types \" + types + \" exist\");\r\n                        }\r\n                        return [2 /*return*/, Promise.reject(error_1)];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ TypePermissionsRestService.prototype.getPermissionByNameAndResult = function (permissionsResult, permissionName) {\r\n        var foundPermission = permissionsResult.permissions.find(function (permission) { return permission.key === permissionName; });\r\n        return JSON.parse(foundPermission.value);\r\n    };\r\n    /* @ngInject */ TypePermissionsRestService.prototype.getPermissionsForTypesAndName = function (types, permissionName) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var permissionsForTypes;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getAllPermissionsForTypes(types)];\r\n                    case 1:\r\n                        permissionsForTypes = _a.sent();\r\n                        return [2 /*return*/, permissionsForTypes.reduce(function (map, permissionsResult) {\r\n                                if (permissionsResult.permissions) {\r\n                                    map[permissionsResult.id] = _this.getPermissionByNameAndResult(permissionsResult, permissionName);\r\n                                }\r\n                                return map;\r\n                            }, {})];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [authorizationEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ TypePermissionsRestService.prototype, \"getAllPermissionsForTypes\", null);\r\n    /* @ngInject */ TypePermissionsRestService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            ISessionService,\r\n            IRestServiceFactory])\r\n    ], /* @ngInject */ TypePermissionsRestService);\r\n    return /* @ngInject */ TypePermissionsRestService;\r\n}());\r\nexport { /* @ngInject */ TypePermissionsRestService };\r\n//# sourceMappingURL=TypePermissionsRestService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"TypePermissionsRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/TypePermissionsRestService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/services/TypePermissionsRestService.d.ts","writeByteOrderMark":false,"text":"import { ISessionService, TypedMap, LogService, IRestServiceFactory } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available type permission names for a given item\r\n */\r\nexport declare enum TypePermissionNames {\r\n    CREATE = \"create\",\r\n    READ = \"read\",\r\n    CHANGE = \"change\",\r\n    REMOVE = \"remove\"\r\n}\r\n/**\r\n * Rest Service to retrieve the type permissions.\r\n */\r\nexport declare class TypePermissionsRestService {\r\n    private logService;\r\n    private sessionService;\r\n    private readonly URI;\r\n    private readonly resource;\r\n    constructor(logService: LogService, sessionService: ISessionService, restServiceFactory: IRestServiceFactory);\r\n    /**\r\n     * Determines if the current user has CREATE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CREATE access to the type or false otherwise).\r\n     */\r\n    hasCreatePermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has READ access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasReadPermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CHANGE access to the type or false otherwise).\r\n     */\r\n    hasUpdatePermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has REMOVE access to the type or false otherwise).\r\n     */\r\n    hasDeletePermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has READ, CREATE, CHANGE, REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap of TypedMap object with key (the code) and\r\n     * value (true if the user has corresponding access to the type or false otherwise).\r\n     * {\r\n     *  \"typeA\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": true},\r\n     *  \"typeB\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": false}\r\n     * }\r\n     */\r\n    hasAllPermissionsForTypes(types: string[]): Promise<TypedMap<TypedMap<boolean>>>;\r\n    private getAllPermissionsForTypes;\r\n    private getPermissionByNameAndResult;\r\n    private getPermissionsForTypesAndName;\r\n}\r\n"}}
