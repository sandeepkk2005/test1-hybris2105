{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as angular from 'angular';\r\nimport { SeComponent } from 'smarteditcommons/di';\r\nimport './Ytree.scss';\r\n/**\r\n * **Deprecated since 2005, use {@link TreeComponent}.**\r\n *\r\n * This directive renders a tree of nodes and manages CRUD operations around the nodes.\r\n * <br/>It relies on {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} third party library\r\n * <br/>Its behaviour is defined by {@link YtreeComponent}.\r\n *\r\n * ### Parameters\r\n *\r\n *\r\n * `nodeTemplateUrl` - an HTML node template to be included besides each node to enhance rendering and behaviour of the tree. This template may use the nodeActions defined hereunder.\r\n *\r\n * `nodeUri` - the REST entry point to be used to manage the nodes (GET, POST, PUT and DELETE).\r\n *\r\n * `dragOptions` - a map of callback functions to customize the drag and drop behaviour of the tree by exposing the {@link YTreeDndEvent}.\r\n *\r\n * `nodeActions` - a map of methods to be closure-bound to the {@link YtreeComponent} instance in order to manage the tree from the parent scope or from the optional node template.\r\n * <br/> All nodeActions methods must take {@link TreeService} instance as first parameter.\r\n * <br/> {@link TreeService} instance will then prebound in the closure made available in the node template or in the parent scope.\r\n * <br/>\r\n * Example in a parent controller:\r\n *\r\n *      this.actions = {\r\n * \t\t    myMethod: function(treeService, arg1, arg2) {\r\n * \t\t\t    //some action expecting 'this'\r\n * \t\t\t    //to be the YTreeController\r\n * \t\t\t    this.newChild(this.root.nodes[0]);\r\n * \t\t    }\r\n * \t    };\r\n *\r\n * passed to the directive through:\r\n *\r\n *      <ytree data-node-uri='ctrl.nodeURI' data-node-template-url='ctrl.nodeTemplateUrl' data-node-actions='ctrl.actions'/>\r\n *\r\n * And in the HTML node template you may invoke it this way:\r\n *\r\n *      <button data-ng-click=\"$ctrl.myMethod('arg1', 'arg2')\">my action</button>\r\n *\r\n * or from the parent controller:\r\n *\r\n *      <button data-ng-click=\"$ctrl.actions.myMethod('arg1', 'arg2')\">my action</button>\r\n *\r\n * @deprecated\r\n */\r\nvar /* @ngInject */ YtreeComponent = /** @class */ (function () {\r\n    function /* @ngInject */ YtreeComponent($scope, $q, TreeService, _TreeDndOptions) {\r\n        this.$scope = $scope;\r\n        this.$q = $q;\r\n        this.TreeService = TreeService;\r\n        this._TreeDndOptions = _TreeDndOptions;\r\n    }\r\n    /* @ngInject */ YtreeComponent.prototype.$onInit = function () {\r\n        var _this = this;\r\n        this.root = {\r\n            uid: this.rootNodeUid,\r\n            hasChildren: true,\r\n            name: 'root',\r\n            parent: null,\r\n            parentUid: null,\r\n            position: 0,\r\n            itemType: null,\r\n            uuid: null\r\n        };\r\n        this.treeOptions = new this._TreeDndOptions(this.dragOptions);\r\n        this.treeService = new this.TreeService(this.nodeUri);\r\n        Object.keys(this.nodeActions).forEach(function (functionName) {\r\n            _this[functionName] = _this.nodeActions[functionName].bind(_this, _this.treeService);\r\n            _this.nodeActions[functionName] = _this.nodeActions[functionName].bind(_this, _this.treeService);\r\n        });\r\n        this.fetchData(this.root);\r\n    };\r\n    /**\r\n     * Causes all the nodes of the tree to collapse.\r\n     * It does not affect their \"initiated\" status though.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.collapseAll = function () {\r\n        this.$scope.$broadcast('angular-ui-tree:collapse-all');\r\n    };\r\n    /* @ngInject */ YtreeComponent.prototype.expandAll = function () {\r\n        this.$scope.$broadcast('angular-ui-tree:expand-all');\r\n    };\r\n    /**\r\n     * Return a boolean to determine if the node is expandable or not by checking if a given node has children\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.hasChildren = function (handle) {\r\n        var nodeData = handle.$modelValue;\r\n        return nodeData.hasChildren;\r\n    };\r\n    /* @ngInject */ YtreeComponent.prototype.fetchData = function (nodeData) {\r\n        return this.treeService.fetchChildren(nodeData);\r\n    };\r\n    /**\r\n     * Will toggle a node, causing a fetch from server if expanding for the first time.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.toggleAndfetch = function (handle) {\r\n        var _this = this;\r\n        this.isDisabled = true;\r\n        var nodeData = handle.$modelValue;\r\n        if (handle.collapsed) {\r\n            return this.fetchData(nodeData).then(function () {\r\n                handle.toggle();\r\n                _this.isDisabled = false;\r\n            });\r\n        }\r\n        handle.toggle();\r\n        this.isDisabled = false;\r\n        return this.$q.when();\r\n    };\r\n    /**\r\n     * Will refresh a node, causing it to expand after fetch if it was expanded before.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.refresh = function (handle) {\r\n        var nodeData = handle.$modelValue;\r\n        nodeData.initiated = false;\r\n        var previousCollapsed = handle.collapsed;\r\n        return this.fetchData(nodeData).then(function () {\r\n            if (!previousCollapsed && handle.collapsed) {\r\n                handle.toggle();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Will refresh the parent of a node, causing it to expand after fetch if it was expanded before.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.refreshParent = function (handle) {\r\n        if (handle.$modelValue.parent.uid === this.root.uid) {\r\n            this.fetchData(this.root);\r\n        }\r\n        else {\r\n            this.refresh(handle.$parentNodeScope);\r\n        }\r\n    };\r\n    /**\r\n     * Will add a new child to the node referenced by this handle.\r\n     * <br/>The child is added only if [saveNode]{@link TreeService#saveNode} is successful.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.newChild = function (handle) {\r\n        var _this = this;\r\n        var nodeData = handle.$modelValue ? handle.$modelValue : this.root;\r\n        nodeData.nodes = nodeData.nodes || [];\r\n        this.treeService.saveNode(nodeData).then(function (response) {\r\n            (handle.collapsed ? _this.toggleAndfetch(handle) : _this.$q.when()).then(function () {\r\n                var elm = nodeData.nodes.find(function (node) { return node.uid === response.uid; });\r\n                if (!elm) {\r\n                    // if children list already initiated, one needs to push to the list on the ui side\r\n                    nodeData.nodes.push(response);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Will add a new sibling to the node referenced by this handle.\r\n     * <br/>The sibling is added only if [saveNode]{@link TreeService#saveNode} is successful.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.newSibling = function (handle) {\r\n        var nodeData = handle.$modelValue;\r\n        var parent = nodeData.parent;\r\n        this.treeService.saveNode(parent).then(function (response) {\r\n            parent.nodes.push(response);\r\n        });\r\n    };\r\n    /**\r\n     * Will remove the node referenced by this handle.\r\n     * <br/>The node is removed only if [removeNode]{@link TreeService#removeNode} is successful.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.remove = function (handle) {\r\n        var _this = this;\r\n        var nodeData = handle.$modelValue;\r\n        this.treeService.removeNode(nodeData).then(function () {\r\n            var parent = nodeData.parent;\r\n            parent.nodes.splice(parent.nodes.indexOf(nodeData), 1);\r\n            parent.initiated = false;\r\n            delete parent.nodes;\r\n            _this.fetchData(parent);\r\n        });\r\n    };\r\n    /* @ngInject */ YtreeComponent.prototype.isRoot = function (handle) {\r\n        var nodeData = handle.$modelValue;\r\n        return nodeData.parent.uid === undefined;\r\n    };\r\n    /* @ngInject */ YtreeComponent.prototype.displayDefaultTemplate = function () {\r\n        return !this.removeDefaultTemplate;\r\n    };\r\n    /* @ngInject */ YtreeComponent.prototype.onNodeMouseEnter = function (node) {\r\n        node.mouseHovered = true;\r\n    };\r\n    /* @ngInject */ YtreeComponent.prototype.onNodeMouseLeave = function (node) {\r\n        node.mouseHovered = false;\r\n    };\r\n    /**\r\n     * Will fetch from the existing tree the node whose identifier is the given nodeUid\r\n     * @param nodeUid the identifier of the node to fetched\r\n     */\r\n    /* @ngInject */ YtreeComponent.prototype.getNodeById = function (nodeUid, nodeArray) {\r\n        if (!nodeArray) {\r\n            nodeArray = this.root.nodes;\r\n        }\r\n        if (nodeUid === this.rootNodeUid) {\r\n            return this.root;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-for-in-array\r\n        for (var i in nodeArray) {\r\n            if (nodeArray.hasOwnProperty(i)) {\r\n                if (nodeArray[i].uid === nodeUid) {\r\n                    return nodeArray[i];\r\n                }\r\n                if (nodeArray[i].hasChildren) {\r\n                    nodeArray[i].nodes = nodeArray[i].nodes || [];\r\n                    var result = this.getNodeById(nodeUid, nodeArray[i].nodes);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /* @ngInject */ YtreeComponent = __decorate([\r\n        SeComponent({\r\n            templateUrl: 'yTreeComponentTemplate.html',\r\n            inputs: [\r\n                'nodeTemplateUrl:=',\r\n                'nodeUri:=',\r\n                'nodeActions:=',\r\n                'rootNodeUid:=',\r\n                'dragOptions:=',\r\n                'removeDefaultTemplate:=?',\r\n                'showAsList:=?'\r\n            ]\r\n        }),\r\n        __metadata(\"design:paramtypes\", [Object, Function, Function, Function])\r\n    ], /* @ngInject */ YtreeComponent);\r\n    return /* @ngInject */ YtreeComponent;\r\n}());\r\nexport { /* @ngInject */ YtreeComponent };\r\n//# sourceMappingURL=YtreeComponent.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/tree/types.ts"],"map":"{\"version\":3,\"file\":\"YtreeComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/tree/YtreeComponent.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAElD,OAAO,cAAc,CAAC;AAEtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AAaH;IAcI,wCACY,MAAsB,EACtB,EAAqB,EACrB,WAA8C,EAC9C,eAAkE;QAHlE,WAAM,GAAN,MAAM,CAAgB;QACtB,OAAE,GAAF,EAAE,CAAmB;QACrB,gBAAW,GAAX,WAAW,CAAmC;QAC9C,oBAAe,GAAf,eAAe,CAAmD;IAC3E,CAAC;IAEJ,gDAAO,GAAP;QAAA,iBAwBC;QAvBG,IAAI,CAAC,IAAI,GAAG;YACR,GAAG,EAAE,IAAI,CAAC,WAAW;YACrB,WAAW,EAAE,IAAI;YACjB,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,IAAI;YACZ,SAAS,EAAE,IAAI;YACf,QAAQ,EAAE,CAAC;YACX,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE,IAAI;SACb,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAC,YAAyC;YAC5E,KAAI,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAI,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;YACjF,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAChE,KAAI,EACJ,KAAI,CAAC,WAAW,CACnB,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,oDAAW,GAAX;QACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;IAC3D,CAAC;IAED,kDAAS,GAAT;QACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC;IACzD,CAAC;IAED;;;OAGG;IACH,oDAAW,GAAX,UAAY,MAAmB;QAC3B,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC;QACpC,OAAO,QAAQ,CAAC,WAAW,CAAC;IAChC,CAAC;IAED,kDAAS,GAAT,UAAU,QAAkB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IACH,uDAAc,GAAd,UAAe,MAAmB;QAAlC,iBAYC;QAXG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC;QACpC,IAAI,MAAM,CAAC,SAAS,EAAE;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;gBACjC,MAAM,CAAC,MAAM,EAAE,CAAC;gBAChB,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YAC5B,CAAC,CAAC,CAAC;SACN;QACD,MAAM,CAAC,MAAM,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,gDAAO,GAAP,UAAQ,MAAmB;QACvB,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC;QACpC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,IAAM,iBAAiB,GAAG,MAAM,CAAC,SAAS,CAAC;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;YACjC,IAAI,CAAC,iBAAiB,IAAI,MAAM,CAAC,SAAS,EAAE;gBACxC,MAAM,CAAC,MAAM,EAAE,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,sDAAa,GAAb,UAAc,MAAmB;QAC7B,IAAI,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7B;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;SACzC;IACL,CAAC;IACD;;;;OAIG;IACH,iDAAQ,GAAR,UAAS,MAAmB;QAA5B,iBAaC;QAZG,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QACrE,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,IAAI,EAAE,CAAC;QAEtC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,QAAkB;YACxD,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;gBACnE,IAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,IAAc,IAAK,OAAA,IAAI,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,EAAzB,CAAyB,CAAC,CAAC;gBAC/E,IAAI,CAAC,GAAG,EAAE;oBACN,mFAAmF;oBACnF,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACjC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,mDAAU,GAAV,UAAW,MAAmB;QAC1B,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC;QACpC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAE/B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,QAAkB;YACtD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,+CAAM,GAAN,UAAO,MAAmB;QAA1B,iBASC;QARG,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;YACvC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC/B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;YACzB,OAAO,MAAM,CAAC,KAAK,CAAC;YACpB,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+CAAM,GAAN,UAAO,MAAmB;QACtB,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC;QACpC,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,KAAK,SAAS,CAAC;IAC7C,CAAC;IAED,+DAAsB,GAAtB;QACI,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC;IACvC,CAAC;IAED,yDAAgB,GAAhB,UAAiB,IAAc;QAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,yDAAgB,GAAhB,UAAiB,IAAc;QAC3B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,oDAAW,GAAX,UAAY,OAAe,EAAE,SAAqB;QAC9C,IAAI,CAAC,SAAS,EAAE;YACZ,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;SAC/B;QACD,IAAI,OAAO,KAAK,IAAI,CAAC,WAAW,EAAE;YAC9B,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;QAED,8DAA8D;QAC9D,KAAK,IAAM,CAAC,IAAI,SAAS,EAAE;YACvB,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;gBAC7B,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;oBAC9B,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;iBACvB;gBACD,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;oBAC1B,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;oBAC9C,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;oBAC7D,IAAI,MAAM,EAAE;wBACR,OAAO,MAAM,CAAC;qBACjB;iBACJ;aACJ;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAlNL;QAZC,WAAW,CAAC;YACT,WAAW,EAAE,6BAA6B;YAC1C,MAAM,EAAE;gBACJ,mBAAmB;gBACnB,WAAW;gBACX,eAAe;gBACf,eAAe;gBACf,eAAe;gBACf,0BAA0B;gBAC1B,eAAe;aAClB;SACJ,CAAC;;sCAoND;IAAD,qCAAC;CAAA,AAnND,IAmNC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/tree/YtreeComponent.d.ts","writeByteOrderMark":false,"text":"import * as angular from 'angular';\r\nimport { ITreeDndOptions, ITreeService, TreeDragOptions, TreeNgModel, TreeNode } from './types';\r\nimport './Ytree.scss';\r\n/**\r\n * **Deprecated since 2005, use {@link TreeComponent}.**\r\n *\r\n * This directive renders a tree of nodes and manages CRUD operations around the nodes.\r\n * <br/>It relies on {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} third party library\r\n * <br/>Its behaviour is defined by {@link YtreeComponent}.\r\n *\r\n * ### Parameters\r\n *\r\n *\r\n * `nodeTemplateUrl` - an HTML node template to be included besides each node to enhance rendering and behaviour of the tree. This template may use the nodeActions defined hereunder.\r\n *\r\n * `nodeUri` - the REST entry point to be used to manage the nodes (GET, POST, PUT and DELETE).\r\n *\r\n * `dragOptions` - a map of callback functions to customize the drag and drop behaviour of the tree by exposing the {@link YTreeDndEvent}.\r\n *\r\n * `nodeActions` - a map of methods to be closure-bound to the {@link YtreeComponent} instance in order to manage the tree from the parent scope or from the optional node template.\r\n * <br/> All nodeActions methods must take {@link TreeService} instance as first parameter.\r\n * <br/> {@link TreeService} instance will then prebound in the closure made available in the node template or in the parent scope.\r\n * <br/>\r\n * Example in a parent controller:\r\n *\r\n *      this.actions = {\r\n * \t\t    myMethod: function(treeService, arg1, arg2) {\r\n * \t\t\t    //some action expecting 'this'\r\n * \t\t\t    //to be the YTreeController\r\n * \t\t\t    this.newChild(this.root.nodes[0]);\r\n * \t\t    }\r\n * \t    };\r\n *\r\n * passed to the directive through:\r\n *\r\n *      <ytree data-node-uri='ctrl.nodeURI' data-node-template-url='ctrl.nodeTemplateUrl' data-node-actions='ctrl.actions'/>\r\n *\r\n * And in the HTML node template you may invoke it this way:\r\n *\r\n *      <button data-ng-click=\"$ctrl.myMethod('arg1', 'arg2')\">my action</button>\r\n *\r\n * or from the parent controller:\r\n *\r\n *      <button data-ng-click=\"$ctrl.actions.myMethod('arg1', 'arg2')\">my action</button>\r\n *\r\n * @deprecated\r\n */\r\nexport declare class YtreeComponent {\r\n    private $scope;\r\n    private $q;\r\n    private TreeService;\r\n    private _TreeDndOptions;\r\n    nodeTemplateUrl: string;\r\n    nodeUri: string;\r\n    nodeActions: any;\r\n    rootNodeUid: string;\r\n    dragOptions: TreeDragOptions;\r\n    removeDefaultTemplate: string;\r\n    showAsList: boolean;\r\n    isDisabled: boolean;\r\n    treeOptions: ITreeDndOptions;\r\n    private treeService;\r\n    private root;\r\n    constructor($scope: angular.IScope, $q: angular.IQService, TreeService: new (uri: string) => ITreeService, _TreeDndOptions: new (options: TreeDragOptions) => ITreeDndOptions);\r\n    $onInit(): void;\r\n    /**\r\n     * Causes all the nodes of the tree to collapse.\r\n     * It does not affect their \"initiated\" status though.\r\n     */\r\n    collapseAll(): void;\r\n    expandAll(): void;\r\n    /**\r\n     * Return a boolean to determine if the node is expandable or not by checking if a given node has children\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    hasChildren(handle: TreeNgModel): boolean;\r\n    fetchData(nodeData: TreeNode): angular.IPromise<TreeNode[]>;\r\n    /**\r\n     * Will toggle a node, causing a fetch from server if expanding for the first time.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    toggleAndfetch(handle: TreeNgModel): angular.IPromise<void>;\r\n    /**\r\n     * Will refresh a node, causing it to expand after fetch if it was expanded before.\r\n     */\r\n    refresh(handle: TreeNgModel): angular.IPromise<void>;\r\n    /**\r\n     * Will refresh the parent of a node, causing it to expand after fetch if it was expanded before.\r\n     */\r\n    refreshParent(handle: TreeNgModel): void;\r\n    /**\r\n     * Will add a new child to the node referenced by this handle.\r\n     * <br/>The child is added only if [saveNode]{@link TreeService#saveNode} is successful.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    newChild(handle: TreeNgModel): void;\r\n    /**\r\n     * Will add a new sibling to the node referenced by this handle.\r\n     * <br/>The sibling is added only if [saveNode]{@link TreeService#saveNode} is successful.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    newSibling(handle: TreeNgModel): void;\r\n    /**\r\n     * Will remove the node referenced by this handle.\r\n     * <br/>The node is removed only if [removeNode]{@link TreeService#removeNode} is successful.\r\n     * @param handle the native {@link https://github.com/angular-ui-tree/angular-ui-tree angular-ui-tree} handle on a given node.\r\n     */\r\n    remove(handle: TreeNgModel): void;\r\n    isRoot(handle: TreeNgModel): boolean;\r\n    displayDefaultTemplate(): boolean;\r\n    onNodeMouseEnter(node: TreeNode): void;\r\n    onNodeMouseLeave(node: TreeNode): void;\r\n    /**\r\n     * Will fetch from the existing tree the node whose identifier is the given nodeUid\r\n     * @param nodeUid the identifier of the node to fetched\r\n     */\r\n    getNodeById(nodeUid: string, nodeArray: TreeNode[]): TreeNode;\r\n}\r\n"}}
