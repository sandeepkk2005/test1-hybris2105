{"code":"import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lo from 'lodash';\r\nimport { DropdownPopulatorInterface, LanguageService, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * Implementation of smarteditcommons' DropdownPopulatorInterface for language dropdown in\r\n * experience selector to populate the list of languages by making a REST call to retrieve the list of langauges for a given site.\r\n *\r\n */\r\nvar /* @ngInject */ PreviewDatalanguageDropdownPopulator = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ PreviewDatalanguageDropdownPopulator, _super);\r\n    function /* @ngInject */ PreviewDatalanguageDropdownPopulator(languageService) {\r\n        return _super.call(this, lo, languageService) || this;\r\n    }\r\n    /**\r\n     * Returns a promise resolving to a list of languages for a given Site ID (based on the selected catalog). The site Id is generated from the\r\n     * selected catalog in the 'catalog' dropdown.\r\n     */\r\n    /* @ngInject */ PreviewDatalanguageDropdownPopulator.prototype.fetchAll = function (payload) {\r\n        if (payload.model[payload.field.dependsOn]) {\r\n            var siteUid = payload.model[payload.field.dependsOn].split('|')[0];\r\n            return this.getLanguageDropdownChoices(siteUid, payload.search);\r\n        }\r\n        return Promise.resolve([]);\r\n    };\r\n    /** @internal */\r\n    /* @ngInject */ PreviewDatalanguageDropdownPopulator.prototype.getLanguageDropdownChoices = function (siteUid, search) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var languages, languagesDropdownChoices, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.languageService.getLanguagesForSite(siteUid)];\r\n                    case 1:\r\n                        languages = _a.sent();\r\n                        languagesDropdownChoices = languages.map(function (_a) {\r\n                            var isocode = _a.isocode, nativeName = _a.nativeName;\r\n                            var dropdownChoices = {};\r\n                            dropdownChoices.id = isocode;\r\n                            dropdownChoices.label = nativeName;\r\n                            return dropdownChoices;\r\n                        });\r\n                        if (search) {\r\n                            languagesDropdownChoices = languagesDropdownChoices.filter(function (language) {\r\n                                return language.label.toUpperCase().indexOf(search.toUpperCase()) > -1;\r\n                            });\r\n                        }\r\n                        return [2 /*return*/, languagesDropdownChoices];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        throw new Error(e_1);\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ PreviewDatalanguageDropdownPopulator = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [LanguageService])\r\n    ], /* @ngInject */ PreviewDatalanguageDropdownPopulator);\r\n    return /* @ngInject */ PreviewDatalanguageDropdownPopulator;\r\n}(DropdownPopulatorInterface));\r\nexport { /* @ngInject */ PreviewDatalanguageDropdownPopulator };\r\n//# sourceMappingURL=PreviewDatalanguageDropdownPopulator.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PreviewDatalanguageDropdownPopulator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/PreviewDatalanguageDropdownPopulator.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EACH,0BAA0B,EAG1B,eAAe,EACf,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAE1B;;;;GAIG;AAEH;IAA0D,wEAA0B;IAChF,8DAAY,eAAgC;eACxC,kBAAM,EAAE,EAAE,eAAe,CAAC;IAC9B,CAAC;IAED;;;OAGG;IAEI,uEAAQ,GAAf,UAAgB,OAAiC;QAC7C,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YACxC,IAAM,OAAO,GAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACjF,OAAO,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;SACnE;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED,gBAAgB;IACF,yFAA0B,GAAxC,UACI,OAAe,EACf,MAAc;;;;;;;wBAGQ,qBAAM,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAA;;wBAAnE,SAAS,GAAG,SAAuD;wBACrE,wBAAwB,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,EAAuB;gCAArB,OAAO,aAAA,EAAE,UAAU,gBAAA;4BAC/D,IAAM,eAAe,GAAG,EAAyB,CAAC;4BAClD,eAAe,CAAC,EAAE,GAAG,OAAO,CAAC;4BAC7B,eAAe,CAAC,KAAK,GAAG,UAAU,CAAC;4BACnC,OAAO,eAAe,CAAC;wBAC3B,CAAC,CAAC,CAAC;wBAEH,IAAI,MAAM,EAAE;4BACR,wBAAwB,GAAG,wBAAwB,CAAC,MAAM,CACtD,UAAC,QAAQ;gCACL,OAAC,QAAQ,CAAC,KAAgB,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC;4BAA3E,CAA2E,CAClF,CAAC;yBACL;wBACD,sBAAO,wBAAwB,EAAC;;;wBAEhC,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,CAAC;;;;;KAE1B;IA1CL;QADC,kBAAkB,EAAE;yCAEY,eAAe;4DA0C/C;IAAD,2DAAC;CAAA,AA3CD,CAA0D,0BAA0B,GA2CnF\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/PreviewDatalanguageDropdownPopulator.d.ts","writeByteOrderMark":false,"text":"import { DropdownPopulatorInterface, DropdownPopulatorPayload, GenericEditorOption, LanguageService } from 'smarteditcommons';\r\n/**\r\n * Implementation of smarteditcommons' DropdownPopulatorInterface for language dropdown in\r\n * experience selector to populate the list of languages by making a REST call to retrieve the list of langauges for a given site.\r\n *\r\n */\r\nexport declare class PreviewDatalanguageDropdownPopulator extends DropdownPopulatorInterface {\r\n    constructor(languageService: LanguageService);\r\n    /**\r\n     * Returns a promise resolving to a list of languages for a given Site ID (based on the selected catalog). The site Id is generated from the\r\n     * selected catalog in the 'catalog' dropdown.\r\n     */\r\n    fetchAll(payload: DropdownPopulatorPayload): Promise<GenericEditorOption[]>;\r\n    /** @internal */\r\n    private getLanguageDropdownChoices;\r\n}\r\n"}}
