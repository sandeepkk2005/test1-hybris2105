{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * @ngdoc overview\r\n * @name cmsitemsRestService\r\n *\r\n * @description\r\n * The cmsitemsRestService provides a service to CRUD operations on CMS Items API.\r\n */\r\nimport * as lodash from 'lodash';\r\nimport { rarelyChangingContent, userEvictionTag, Cached, CONTEXT_SITE_ID, EvictionTag, InvalidateCache, ICatalogService, OperationContextRegistered, IRestServiceFactory, SeDowngradeService } from 'smarteditcommons';\r\nimport { CMSITEMS_UPDATE_EVENT } from '../../../utils';\r\nexport var cmsitemsUri = \"/cmswebservices/v1/sites/\" + CONTEXT_SITE_ID + \"/cmsitems\";\r\nexport var cmsitemsEvictionTag = new EvictionTag({ event: CMSITEMS_UPDATE_EVENT });\r\n/**\r\n * @ngdoc service\r\n * @name cmsitemsRestService.cmsitemsRestService\r\n *\r\n * @description\r\n * Service to deal with CMS Items related CRUD operations.\r\n */\r\nvar /* @ngInject */ CmsitemsRestService = /** @class */ (function () {\r\n    function /* @ngInject */ CmsitemsRestService(restServiceFactory, catalogService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.catalogService = catalogService;\r\n        this.cmsitemsUuidsUri = \"/cmswebservices/v1/sites/\" + CONTEXT_SITE_ID + \"/cmsitems/uuids\";\r\n        this.resource = restServiceFactory.get(cmsitemsUri);\r\n        this.versionedResource = restServiceFactory.get(cmsitemsUri + '/:itemUuid');\r\n        this.uuidsResource = restServiceFactory.get(this.cmsitemsUuidsUri);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getById\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier).\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.getById = function (cmsitemUuid) {\r\n        return this.resource.getById(cmsitemUuid);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIdAndVersion\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier) for a given version.\r\n     *\r\n     * @param {String} cmsitemUuid The CMS Item uuid\r\n     * @param {String} versionId The uid of the version to be retrieved.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.getByIdAndVersion = function (itemUuid, versionId) {\r\n        return this.versionedResource.get({\r\n            itemUuid: itemUuid,\r\n            versionId: versionId\r\n        });\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#get\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items search result by making a REST call to the CMS Items API.\r\n     * A search can be performed by a typeCode (optionnaly in combination of a mask parameter), or by providing a list of cms items uuid.\r\n     *\r\n     * @param {Object} queryParams The object representing the query params\r\n     * @param {String} queryParams.pageSize number of items in the page\r\n     * @param {String} queryParams.currentPage current page number\r\n     * @param {String =} queryParams.typeCode for filtering on the cms item typeCode\r\n     * @param {String =} queryParams.mask for filtering the search\r\n     * @param {String =} queryParams.itemSearchParams search on additional fields using a comma separated list of field name and value\r\n     * pairs which are separated by a colon. Exact matches only.\r\n     * @param {String =} queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param {String =} queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the paged search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.get = function (queryParams) {\r\n        var _this = this;\r\n        return this.catalogService.retrieveUriContext().then(function (uriContext) {\r\n            var catalogDetailsParams = {\r\n                catalogId: queryParams.catalogId || uriContext.CURRENT_CONTEXT_CATALOG,\r\n                catalogVersion: queryParams.catalogVersion || uriContext.CURRENT_CONTEXT_CATALOG_VERSION\r\n            };\r\n            queryParams = lodash.merge(catalogDetailsParams, queryParams);\r\n            return _this.restServiceFactory.get(cmsitemsUri).get(queryParams);\r\n        });\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIds\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items by uuids, making a POST call to the CMS Items API.\r\n     * A search can be performed by providing a list of cms items uuid.\r\n     *\r\n     * @param {string[] =} uuids list of cms item uuids\r\n     *\r\n     * @returns {Promise<CMSItem[]>} If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.getByIds = function (uuids, fields) {\r\n        return this.getByIdsNoCache(uuids, fields);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#update\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Update a CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to update\r\n     * @param {String} cmsitem.identifier The cms item identifier (uuid)\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the updated CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.update = function (cmsitem, options) {\r\n        return this.resource.update(cmsitem, options);\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#delete\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Remove a CMS Item.\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.delete = function (identifier) {\r\n        return this.resource.remove({\r\n            identifier: identifier\r\n        });\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#create\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Create a new CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to create\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.create = function (cmsitem) {\r\n        var _this = this;\r\n        return this.catalogService.getCatalogVersionUUid().then(function (catalogVersionUUid) {\r\n            cmsitem.catalogVersion = cmsitem.catalogVersion || catalogVersionUUid;\r\n            if (cmsitem.onlyOneRestrictionMustApply === undefined) {\r\n                cmsitem.onlyOneRestrictionMustApply = false;\r\n            }\r\n            return _this.resource.save(cmsitem);\r\n        });\r\n    };\r\n    /**\r\n     * The function is same as getByIds but it doesn't use caching, it will request data from backend every time.\r\n     *\r\n     * If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    /* @ngInject */ CmsitemsRestService.prototype.getByIdsNoCache = function (uuids, fields) {\r\n        var _this = this;\r\n        uuids = Array.from(new Set(uuids)); // removing duplicates\r\n        return this.catalogService.getCatalogVersionUUid().then(function (catalogVersion) {\r\n            var payload = {\r\n                catalogVersion: catalogVersion,\r\n                uuids: uuids,\r\n                fields: fields\r\n            };\r\n            return _this.uuidsResource.save(payload);\r\n        });\r\n    };\r\n    var _a;\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag, cmsitemsEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ CmsitemsRestService.prototype, \"getById\", null);\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag, cmsitemsEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ CmsitemsRestService.prototype, \"getByIdAndVersion\", null);\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag, cmsitemsEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ CmsitemsRestService.prototype, \"get\", null);\r\n    __decorate([\r\n        Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag, cmsitemsEvictionTag] }),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Array, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ CmsitemsRestService.prototype, \"getByIds\", null);\r\n    __decorate([\r\n        InvalidateCache(cmsitemsEvictionTag),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof T !== \"undefined\" && T) === \"function\" ? _a : Object, Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ CmsitemsRestService.prototype, \"update\", null);\r\n    __decorate([\r\n        InvalidateCache(cmsitemsEvictionTag),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], /* @ngInject */ CmsitemsRestService.prototype, \"delete\", null);\r\n    /* @ngInject */ CmsitemsRestService = __decorate([\r\n        SeDowngradeService(),\r\n        OperationContextRegistered(cmsitemsUri.replace(/CONTEXT_SITE_ID/, ':CONTEXT_SITE_ID'), 'CMS'),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n            ICatalogService])\r\n    ], /* @ngInject */ CmsitemsRestService);\r\n    return /* @ngInject */ CmsitemsRestService;\r\n}());\r\nexport { /* @ngInject */ CmsitemsRestService };\r\n//# sourceMappingURL=CmsitemsRestService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/utils/index.ts"],"map":"{\"version\":3,\"file\":\"CmsitemsRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/dao/cmswebservices/sites/CmsitemsRestService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dao/cmswebservices/sites/CmsitemsRestService.d.ts","writeByteOrderMark":false,"text":"import { BackendError, EvictionTag, ICatalogService, IRestOptions, Pageable, Pagination, IRestServiceFactory } from 'smarteditcommons';\r\nimport { CMSItem } from '../../../dtos';\r\nexport interface Page<T> {\r\n    [index: string]: T[] | Pagination;\r\n    pagination: Pagination;\r\n    response: T[];\r\n}\r\nexport interface CMSItemSearch extends Pageable {\r\n    typeCode?: string;\r\n    itemSearchParams: string;\r\n    catalogId?: string;\r\n    catalogVersion?: string;\r\n}\r\nexport interface ErrorResponse<T = BackendError[]> {\r\n    error: {\r\n        errors: T;\r\n    };\r\n}\r\nexport declare const cmsitemsUri: string;\r\nexport declare const cmsitemsEvictionTag: EvictionTag;\r\n/**\r\n * @ngdoc service\r\n * @name cmsitemsRestService.cmsitemsRestService\r\n *\r\n * @description\r\n * Service to deal with CMS Items related CRUD operations.\r\n */\r\nexport declare class CmsitemsRestService {\r\n    private restServiceFactory;\r\n    private catalogService;\r\n    private readonly cmsitemsUuidsUri;\r\n    private resource;\r\n    private versionedResource;\r\n    private uuidsResource;\r\n    constructor(restServiceFactory: IRestServiceFactory, catalogService: ICatalogService);\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getById\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier).\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getById<T extends CMSItem = CMSItem>(cmsitemUuid: string): Promise<T>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIdAndVersion\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier) for a given version.\r\n     *\r\n     * @param {String} cmsitemUuid The CMS Item uuid\r\n     * @param {String} versionId The uid of the version to be retrieved.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getByIdAndVersion<T extends CMSItem = CMSItem>(itemUuid: string, versionId: string): Promise<T>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#get\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items search result by making a REST call to the CMS Items API.\r\n     * A search can be performed by a typeCode (optionnaly in combination of a mask parameter), or by providing a list of cms items uuid.\r\n     *\r\n     * @param {Object} queryParams The object representing the query params\r\n     * @param {String} queryParams.pageSize number of items in the page\r\n     * @param {String} queryParams.currentPage current page number\r\n     * @param {String =} queryParams.typeCode for filtering on the cms item typeCode\r\n     * @param {String =} queryParams.mask for filtering the search\r\n     * @param {String =} queryParams.itemSearchParams search on additional fields using a comma separated list of field name and value\r\n     * pairs which are separated by a colon. Exact matches only.\r\n     * @param {String =} queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param {String =} queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the paged search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    get<T extends CMSItem = CMSItem>(queryParams: CMSItemSearch): Promise<Page<T>>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIds\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items by uuids, making a POST call to the CMS Items API.\r\n     * A search can be performed by providing a list of cms items uuid.\r\n     *\r\n     * @param {string[] =} uuids list of cms item uuids\r\n     *\r\n     * @returns {Promise<CMSItem[]>} If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    getByIds<T extends CMSItem = CMSItem>(uuids: string[], fields?: string): Promise<Page<T>>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#update\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Update a CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to update\r\n     * @param {String} cmsitem.identifier The cms item identifier (uuid)\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the updated CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    update<T extends CMSItem = CMSItem>(cmsitem: T, options?: IRestOptions): Promise<T>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#delete\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Remove a CMS Item.\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     */\r\n    delete(identifier: string): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#create\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Create a new CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to create\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    create<T extends CMSItem = CMSItem>(cmsitem: T): Promise<T>;\r\n    /**\r\n     * The function is same as getByIds but it doesn't use caching, it will request data from backend every time.\r\n     *\r\n     * If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    getByIdsNoCache<T extends CMSItem = CMSItem>(uuids: string[], fields?: string): Promise<Page<T>>;\r\n}\r\n"}}
