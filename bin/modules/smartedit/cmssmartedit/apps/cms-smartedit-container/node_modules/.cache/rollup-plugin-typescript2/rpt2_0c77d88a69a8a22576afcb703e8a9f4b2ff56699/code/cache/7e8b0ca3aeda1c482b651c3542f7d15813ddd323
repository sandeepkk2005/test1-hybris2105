{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { IRestServiceFactory, PAGE_CONTEXT_SITE_ID, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * Used to manage versions in a page.\r\n */\r\nvar /* @ngInject */ PageVersioningService = /** @class */ (function () {\r\n    function /* @ngInject */ PageVersioningService(restServiceFactory) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.pageVersionsServiceResourceURI = \"/cmswebservices/v1/sites/\" + PAGE_CONTEXT_SITE_ID + \"/cmsitems/:pageUuid/versions\";\r\n        this.pageVersionsRollbackServiceResourceURI = \"/cmswebservices/v1/sites/\" + PAGE_CONTEXT_SITE_ID + \"/cmsitems/:pageUuid/versions/:versionId/rollbacks\";\r\n        this.pageVersionRESTService = this.restServiceFactory.get(this.pageVersionsServiceResourceURI);\r\n        this.pageVersionsRollbackRESTService = this.restServiceFactory.get(this.pageVersionsRollbackServiceResourceURI);\r\n    }\r\n    /**\r\n     * Retrieves the list of versions found for the page identified by the provided id. This method is paged.\r\n     *\r\n     * @param payload The payload containing search query params, including the pageable information.\r\n     * @returns A promise that resolves to a paged list of versions.\r\n     */\r\n    /* @ngInject */ PageVersioningService.prototype.findPageVersions = function (payload) {\r\n        return this.pageVersionRESTService.page(payload);\r\n    };\r\n    /**\r\n     * Retrieves the page version information for the provided versionId.\r\n     */\r\n    /* @ngInject */ PageVersioningService.prototype.getPageVersionForId = function (pageUuid, versionId) {\r\n        return this.pageVersionRESTService.get({\r\n            pageUuid: pageUuid,\r\n            identifier: versionId\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves the resource URI to manage page versions.\r\n     */\r\n    /* @ngInject */ PageVersioningService.prototype.getResourceURI = function () {\r\n        return this.pageVersionsServiceResourceURI;\r\n    };\r\n    /* @ngInject */ PageVersioningService.prototype.deletePageVersion = function (pageUuid, versionId) {\r\n        return this.pageVersionRESTService.remove({\r\n            pageUuid: pageUuid,\r\n            identifier: versionId\r\n        });\r\n    };\r\n    /**\r\n     * Rollbacks the page to the provided version. This process will automatically create a version of the current page.\r\n     */\r\n    /* @ngInject */ PageVersioningService.prototype.rollbackPageVersion = function (pageUuid, versionId) {\r\n        return this.pageVersionsRollbackRESTService.save({ pageUuid: pageUuid, versionId: versionId });\r\n    };\r\n    /* @ngInject */ PageVersioningService = __decorate([\r\n        SeDowngradeService(),\r\n        __metadata(\"design:paramtypes\", [IRestServiceFactory])\r\n    ], /* @ngInject */ PageVersioningService);\r\n    return /* @ngInject */ PageVersioningService;\r\n}());\r\nexport { /* @ngInject */ PageVersioningService };\r\n//# sourceMappingURL=PageVersioningService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PageVersioningService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/versioning/services/PageVersioningService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAEH,mBAAmB,EAGnB,oBAAoB,EACpB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAsC1B;;GAEG;AAEH;IAMI,+CAAoB,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;QAHnD,mCAA8B,GAAG,8BAA4B,oBAAoB,iCAA8B,CAAC;QAChH,2CAAsC,GAAG,8BAA4B,oBAAoB,sDAAmD,CAAC;QAGjJ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CACrD,IAAI,CAAC,8BAA8B,CACtC,CAAC;QACF,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAC9D,IAAI,CAAC,sCAAsC,CAC9C,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACI,gEAAgB,GAAvB,UAAwB,OAAiC;QACrD,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,mEAAmB,GAA1B,UAA2B,QAAgB,EAAE,SAAiB;QAC1D,OAAO,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC;YACnC,QAAQ,UAAA;YACR,UAAU,EAAE,SAAS;SACxB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,8DAAc,GAArB;QACI,OAAO,IAAI,CAAC,8BAA8B,CAAC;IAC/C,CAAC;IAEM,iEAAiB,GAAxB,UAAyB,QAAgB,EAAE,SAAiB;QACxD,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC;YACtC,QAAQ,UAAA;YACR,UAAU,EAAE,SAAS;SACxB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,mEAAmB,GAA1B,UAA2B,QAAgB,EAAE,SAAiB;QAC1D,OAAO,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;IAC9E,CAAC;IAtDL;QADC,kBAAkB,EAAE;yCAOuB,mBAAmB;6CAiD9D;IAAD,4CAAC;CAAA,AAvDD,IAuDC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/components/versioning/services/PageVersioningService.d.ts","writeByteOrderMark":false,"text":"import { IRestServiceFactory, Page, Pageable } from 'smarteditcommons';\r\n/**\r\n * Represents a page version.\r\n */\r\nexport interface IPageVersion {\r\n    /**\r\n     * uid of the version.\r\n     */\r\n    uid: string;\r\n    /**\r\n     * uuid of the item.\r\n     */\r\n    itemUUID: string;\r\n    /**\r\n     * date time when the page was created.\r\n     */\r\n    creationtime: Date;\r\n    /**\r\n     * user friendly name of the page version.\r\n     */\r\n    label: string;\r\n    /**\r\n     * optional string that describes the page version.\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * Represents a payload to query page versions.\r\n */\r\nexport interface PageVersionSearchPayload extends Pageable {\r\n    /**\r\n     * uuid of the page whose versions to retrieve\r\n     */\r\n    pageUuid: string;\r\n}\r\n/**\r\n * Used to manage versions in a page.\r\n */\r\nexport declare class PageVersioningService {\r\n    private restServiceFactory;\r\n    private pageVersionRESTService;\r\n    private pageVersionsRollbackRESTService;\r\n    private pageVersionsServiceResourceURI;\r\n    private pageVersionsRollbackServiceResourceURI;\r\n    constructor(restServiceFactory: IRestServiceFactory);\r\n    /**\r\n     * Retrieves the list of versions found for the page identified by the provided id. This method is paged.\r\n     *\r\n     * @param payload The payload containing search query params, including the pageable information.\r\n     * @returns A promise that resolves to a paged list of versions.\r\n     */\r\n    findPageVersions(payload: PageVersionSearchPayload): Promise<Page<IPageVersion>>;\r\n    /**\r\n     * Retrieves the page version information for the provided versionId.\r\n     */\r\n    getPageVersionForId(pageUuid: string, versionId: string): Promise<IPageVersion>;\r\n    /**\r\n     * Retrieves the resource URI to manage page versions.\r\n     */\r\n    getResourceURI(): string;\r\n    deletePageVersion(pageUuid: string, versionId: string): Promise<void>;\r\n    /**\r\n     * Rollbacks the page to the provided version. This process will automatically create a version of the current page.\r\n     */\r\n    rollbackPageVersion(pageUuid: string, versionId: string): Promise<void>;\r\n}\r\n"}}
