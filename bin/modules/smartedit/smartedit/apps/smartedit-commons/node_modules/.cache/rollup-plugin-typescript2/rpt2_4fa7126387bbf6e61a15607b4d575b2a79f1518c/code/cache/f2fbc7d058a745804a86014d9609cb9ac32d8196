{"code":"/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\n/**\r\n * An Injection Token used to retrieve information about \"item\" and \"key\" from within rendered component.\r\n */\r\nexport var CLIENT_PAGED_LIST_CELL_COMPONENT_DATA_TOKEN = new InjectionToken('CLIENT_PAGED_LIST_CELL_COMPONENT_DATA_TOKEN');\r\n//# sourceMappingURL=interfaces.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular/core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/interfaces/PagedList.ts"],"map":"{\"version\":3,\"file\":\"interfaces.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/clientPagedList/interfaces.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH,OAAO,EAAE,cAAc,EAAQ,MAAM,eAAe,CAAC;AAUrD;;GAEG;AACH,MAAM,CAAC,IAAM,2CAA2C,GAAG,IAAI,cAAc,CAE3E,6CAA6C,CAAC,CAAC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/components/clientPagedList/interfaces.d.ts","writeByteOrderMark":false,"text":"import { InjectionToken, Type } from '@angular/core';\r\nimport { TypedMap } from '@smart/utils';\r\nimport { PagedList } from '../interfaces/PagedList';\r\nexport interface ClientPagedListCellComponentData {\r\n    key: ClientPagedListColumnKey;\r\n    item: ClientPagedListItem;\r\n}\r\n/**\r\n * An Injection Token used to retrieve information about \"item\" and \"key\" from within rendered component.\r\n */\r\nexport declare const CLIENT_PAGED_LIST_CELL_COMPONENT_DATA_TOKEN: InjectionToken<ClientPagedListCellComponentData>;\r\n/**\r\n * Column descriptor.\r\n */\r\nexport interface ClientPagedListColumnKey {\r\n    /**\r\n     * The property must match at least one of the descriptors keys and will be used as the columns of the table.\r\n     * Used for mapping {@link ClientPagedListItem} object key to the cell text.\r\n     */\r\n    property: string;\r\n    /**\r\n     * Used for the column headers title.\r\n     */\r\n    i18n: string;\r\n    /**\r\n     * A component that will be rendered for each cell of this column.\r\n     * \"item\" and \"key\" are accessible via {@link CLIENT_PAGED_LIST_CELL_COMPONENT_DATA_TOKEN}.\r\n     *\r\n     * ### Example\r\n     *\r\n     *      \\@Component({\r\n     *          selector: 'my-client-paged-list-cell',\r\n     *          template: `<div>{{ data.item[data.key.property] }}</div>`\r\n     *      })\r\n     *      export class MyClientPagedListCellComponent {\r\n     *          constructor(@Inject(CLIENT_PAGED_LIST_CELL_COMPONENT_DATA_TOKEN), public data: ClientPagedListCellComponentData) {}\r\n     *      }\r\n     *\r\n     */\r\n    component?: Type<any>;\r\n}\r\n/**\r\n * Row item descriptor.\r\n * The Key corresponds to the column name where value is the text displayed in a cell.\r\n */\r\nexport interface ClientPagedListItem extends TypedMap<any> {\r\n    /**\r\n     * If provided an Icon will be displayed with a tooltip below.\r\n     * Tooltip shows the text how many restrictions are applied for the Page.\r\n     */\r\n    icon?: {\r\n        /**\r\n         * URL of an icon\r\n         */\r\n        src: string;\r\n        /**\r\n         * Number of restrictions that are displayed in the tooltip text.\r\n         */\r\n        numberOfRestrictions: number;\r\n    };\r\n}\r\n/**\r\n * Required by ClientPagedListComponent\r\n */\r\nexport interface ClientPagedList extends PagedList {\r\n    items: ClientPagedListItem[];\r\n    keys: ClientPagedListColumnKey[];\r\n    /**\r\n     * An array of {@link ClientPagedListItem} object keys that will determine which fields the \"filterByFieldPipe\"\r\n     * will use to filter through the items.\r\n     */\r\n    itemFilterKeys?: string[];\r\n    /**\r\n     * @deprecated\r\n     * **Deprecated since 2005, use {@link ClientPagedListColumnKey.component}.**\r\n     *\r\n     * An object that contains HTML renderers for specific keys property. A renderer is a function that returns a HTML string. This function has access to the current \"item\", \"key\" and the injected context(as $ctrl.injectedContext).\r\n     */\r\n    renderers?: TypedMap<(item: ClientPagedListItem, key: ClientPagedListColumnKey) => string>;\r\n    /**\r\n     * @deprecated\r\n     * **Deprecated since 2005, use {@link ClientPagedListColumnKey.component}.**\r\n     *\r\n     * An object that exposes values or functions to the directive. It can be used by the custom HTML renderers to bind a function to a click event for example.\r\n     */\r\n    injectedContext?: TypedMap<(...args: any[]) => any>;\r\n    /**\r\n     * The query used to filter the list.\r\n     */\r\n    query: string;\r\n}\r\n"}}
