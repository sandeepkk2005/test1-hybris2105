{"code":"import * as lo from 'lodash';\r\n/**\r\n * The interface stipulates how to register features in the SmartEdit application and the SmartEdit container.\r\n * The SmartEdit implementation stores two instances of the interface across the {@link GatewayFactory gateway}: one for the SmartEdit application and one for the SmartEdit container.\r\n */\r\nvar IFeatureService = /** @class */ (function () {\r\n    function IFeatureService(cloneableUtils) {\r\n        this.cloneableUtils = cloneableUtils;\r\n    }\r\n    /**\r\n     * This method registers a feature.\r\n     * When an end user selects a perspective, all the features that are bound to the perspective\r\n     * will be enabled when their respective enablingCallback functions are invoked\r\n     * and all the features that are not bound to the perspective will be disabled when their respective disablingCallback functions are invoked.\r\n     * The SmartEdit application and the SmartEdit container hold/store an instance of the implementation because callbacks cannot cross the gateway as they are functions.\r\n     *\r\n     * this method is meant to register a feature (identified by a key).\r\n     * When a perspective (registered through [register]{@link IPerspectiveService#register}) is selected, all its bound features will be enabled by invocation of their respective enablingCallback functions\r\n     * and any feature not bound to it will be disabled by invocation of its disablingCallback function.\r\n     * Both SmartEdit and SmartEditContainer will hold a concrete implementation since Callbacks, being functions, cannot cross the gateway.\r\n     * The function will keep a frame bound reference on a full feature in order to be able to invoke its callbacks when needed.\r\n     *\r\n     * @param configuration Configuration of a `IContextualMenuButton` or `IDecorator` or `IToolbarItem`.\r\n     */\r\n    IFeatureService.prototype.register = function (configuration) {\r\n        this._validate(configuration);\r\n        this._featuresToAlias = this._featuresToAlias || {};\r\n        this._featuresToAlias[configuration.key] = {\r\n            enablingCallback: configuration.enablingCallback,\r\n            disablingCallback: configuration.disablingCallback\r\n        };\r\n        delete configuration.enablingCallback;\r\n        delete configuration.disablingCallback;\r\n        return this._registerAliases(this.cloneableUtils.makeCloneable(configuration));\r\n    };\r\n    IFeatureService.prototype.enable = function (key) {\r\n        if (this._featuresToAlias && this._featuresToAlias[key]) {\r\n            this._featuresToAlias[key].enablingCallback();\r\n        }\r\n        else {\r\n            this._remoteEnablingFromInner(key);\r\n        }\r\n    };\r\n    IFeatureService.prototype.disable = function (key) {\r\n        if (this._featuresToAlias && this._featuresToAlias[key]) {\r\n            this._featuresToAlias[key].disablingCallback();\r\n        }\r\n        else {\r\n            this._remoteDisablingFromInner(key);\r\n        }\r\n    };\r\n    /**\r\n     * @returns A promise of property value or null if property does not exist\r\n     */\r\n    IFeatureService.prototype.getFeatureProperty = function (featureKey, propertyName) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method registers toolbar items as features. It is a wrapper around [register]{@link IFeatureService#register}.\r\n     *\r\n     * @param configuration Configuration that represents the toolbar action item to be registered.\r\n     */\r\n    IFeatureService.prototype.addToolbarItem = function (toolbar) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method registers decorator and delegates to the\r\n     *  {@link /smartedit/injectables/DecoratorService.html#enable enable}\r\n     *  {@link /smartedit/injectables/DecoratorService.html#disable disable} methods.\r\n     * This method is not a wrapper around {@link /smartedit/injectables/DecoratorService.html#addMappings addMappings}:\r\n     * From a feature stand point, we deal with decorators, not their mappings to SmartEdit components.\r\n     * We still need to have a separate invocation of {@link /smartedit/injectables/DecoratorService.html#addMappings addMappings}\r\n     */\r\n    IFeatureService.prototype.addDecorator = function (decorator) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method registers contextual menu buttons.\r\n     * It is a wrapper around {@link /smartedit/injectables/ContextualMenuService.html#addItems addItems}.\r\n     */\r\n    IFeatureService.prototype.addContextualMenuButton = function (btn) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    IFeatureService.prototype.getFeatureKeys = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    IFeatureService.prototype._remoteEnablingFromInner = function (key) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    IFeatureService.prototype._remoteDisablingFromInner = function (key) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method registers a feature, identified by a unique key, across the {@link GatewayFactory}.\r\n     * It is a simplified version of the register method, from which callbacks have been removed.\r\n     */\r\n    IFeatureService.prototype._registerAliases = function (configuration) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    IFeatureService.prototype._validate = function (configuration) {\r\n        if (lo.isEmpty(configuration.key)) {\r\n            throw new Error('featureService.configuration.key.error.required');\r\n        }\r\n        if (lo.isEmpty(configuration.nameI18nKey)) {\r\n            throw new Error('featureService.configuration.nameI18nKey.error.required');\r\n        }\r\n        if (!lo.isFunction(configuration.enablingCallback)) {\r\n            throw new Error('featureService.configuration.enablingCallback.error.not.function');\r\n        }\r\n        if (!lo.isFunction(configuration.disablingCallback)) {\r\n            throw new Error('featureService.configuration.disablingCallback.error.not.function');\r\n        }\r\n    };\r\n    return IFeatureService;\r\n}());\r\nexport { IFeatureService };\r\n//# sourceMappingURL=IFeatureService.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IContextualMenuButton.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IDecorator.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IFeature.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IToolbarItem.ts"],"map":"{\"version\":3,\"file\":\"IFeatureService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/IFeatureService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/interfaces/IFeatureService.d.ts","writeByteOrderMark":false,"text":"import { CloneableUtils } from '@smart/utils';\r\nimport { IContextualMenuButton } from './IContextualMenuButton';\r\nimport { IDecorator } from './IDecorator';\r\nimport { InternalFeature, IFeature } from './IFeature';\r\nimport { IToolbarItem } from './IToolbarItem';\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nexport interface IFeaturesToAlias {\r\n    [index: string]: {\r\n        enablingCallback: () => void;\r\n        disablingCallback: () => void;\r\n    };\r\n}\r\n/**\r\n * The interface stipulates how to register features in the SmartEdit application and the SmartEdit container.\r\n * The SmartEdit implementation stores two instances of the interface across the {@link GatewayFactory gateway}: one for the SmartEdit application and one for the SmartEdit container.\r\n */\r\nexport declare abstract class IFeatureService {\r\n    private cloneableUtils;\r\n    protected _featuresToAlias: IFeaturesToAlias;\r\n    constructor(cloneableUtils: CloneableUtils);\r\n    /**\r\n     * This method registers a feature.\r\n     * When an end user selects a perspective, all the features that are bound to the perspective\r\n     * will be enabled when their respective enablingCallback functions are invoked\r\n     * and all the features that are not bound to the perspective will be disabled when their respective disablingCallback functions are invoked.\r\n     * The SmartEdit application and the SmartEdit container hold/store an instance of the implementation because callbacks cannot cross the gateway as they are functions.\r\n     *\r\n     * this method is meant to register a feature (identified by a key).\r\n     * When a perspective (registered through [register]{@link IPerspectiveService#register}) is selected, all its bound features will be enabled by invocation of their respective enablingCallback functions\r\n     * and any feature not bound to it will be disabled by invocation of its disablingCallback function.\r\n     * Both SmartEdit and SmartEditContainer will hold a concrete implementation since Callbacks, being functions, cannot cross the gateway.\r\n     * The function will keep a frame bound reference on a full feature in order to be able to invoke its callbacks when needed.\r\n     *\r\n     * @param configuration Configuration of a `IContextualMenuButton` or `IDecorator` or `IToolbarItem`.\r\n     */\r\n    register(configuration: IFeature): Promise<void>;\r\n    enable(key: string): void;\r\n    disable(key: string): void;\r\n    /**\r\n     * @returns A promise of property value or null if property does not exist\r\n     */\r\n    getFeatureProperty(featureKey: string, propertyName: keyof IFeature): Promise<string | string[] | (() => void)>;\r\n    /**\r\n     * This method registers toolbar items as features. It is a wrapper around [register]{@link IFeatureService#register}.\r\n     *\r\n     * @param configuration Configuration that represents the toolbar action item to be registered.\r\n     */\r\n    addToolbarItem(toolbar: IToolbarItem): Promise<void>;\r\n    /**\r\n     * This method registers decorator and delegates to the\r\n     *  {@link /smartedit/injectables/DecoratorService.html#enable enable}\r\n     *  {@link /smartedit/injectables/DecoratorService.html#disable disable} methods.\r\n     * This method is not a wrapper around {@link /smartedit/injectables/DecoratorService.html#addMappings addMappings}:\r\n     * From a feature stand point, we deal with decorators, not their mappings to SmartEdit components.\r\n     * We still need to have a separate invocation of {@link /smartedit/injectables/DecoratorService.html#addMappings addMappings}\r\n     */\r\n    addDecorator(decorator: IDecorator): Promise<void>;\r\n    /**\r\n     * This method registers contextual menu buttons.\r\n     * It is a wrapper around {@link /smartedit/injectables/ContextualMenuService.html#addItems addItems}.\r\n     */\r\n    addContextualMenuButton(btn: IContextualMenuButton): Promise<void>;\r\n    getFeatureKeys(): string[];\r\n    protected _remoteEnablingFromInner(key: string): Promise<void>;\r\n    protected _remoteDisablingFromInner(key: string): Promise<void>;\r\n    /**\r\n     * This method registers a feature, identified by a unique key, across the {@link GatewayFactory}.\r\n     * It is a simplified version of the register method, from which callbacks have been removed.\r\n     */\r\n    protected _registerAliases(configuration: InternalFeature): Promise<void>;\r\n    private _validate;\r\n}\r\n"}}
