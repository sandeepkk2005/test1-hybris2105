{"code":"import { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { SeModule } from '../../di';\r\nimport { ModalButtonActions } from './ModalButtonActions';\r\nimport { ModalButtonStyles } from './ModalButtonStyles';\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nvar NgUiBootstrapModule = require('angular-ui-bootstrap'); // Only supports CommonJS\r\n/**\r\n * Module containing {@link ModalService}.\r\n */\r\nvar /* @ngInject */ ModalServiceModule = /** @class */ (function () {\r\n    function /* @ngInject */ ModalServiceModule() {\r\n    }\r\n    /* @ngInject */ ModalServiceModule = __decorate([\r\n        SeModule({\r\n            imports: [NgUiBootstrapModule, 'translationServiceModule', 'functionsModule', 'coretemplates'],\r\n            providers: [\r\n                {\r\n                    /**\r\n                     * Injectable angular constant<br/>\r\n                     * Defines the action to be taken after executing a button on a modal window. To be used when adding a button to the modal,\r\n                     * either when opening a modal (see [getButtons]{@link ModalManager#getButtons}) or\r\n                     * when adding a button to an existing modal (see [open]{@link ModalService#open})\r\n                     *\r\n                     * ### Example\r\n                     *\r\n                     *      myModalManager.addButton({\r\n                     *          id: 'button id',\r\n                     *          label: 'close_modal',\r\n                     *          action: MODAL_BUTTON_ACTIONS.CLOSE\r\n                     *      });\r\n                     *\r\n                     */\r\n                    provide: 'MODAL_BUTTON_ACTIONS',\r\n                    useValue: {\r\n                        /**\r\n                         * Indicates to the {@link ModalManager} that after executing the modal button\r\n                         * no action should be performed.\r\n                         */\r\n                        NONE: ModalButtonActions.None,\r\n                        /**\r\n                         * Indicates to the {@link ModalManager} that after executing the modal button,\r\n                         * the modal window should close, and the {@link https://docs.angularjs.org/api/ng/service/$q promise} returned by the modal should be resolved.\r\n                         */\r\n                        CLOSE: ModalButtonActions.Close,\r\n                        /**\r\n                         * Indicates to the {@link ModalManager} that after executing the modal button,\r\n                         * the modal window should close, and the {@link https://docs.angularjs.org/api/ng/service/$q promise} returned by the modal should be rejected.\r\n                         */\r\n                        DISMISS: ModalButtonActions.Dismiss\r\n                    }\r\n                },\r\n                {\r\n                    /**\r\n                     * Injectable angular constant<br/>\r\n                     * Defines the look and feel of a button on a modal window. To be used when adding a button to the modal,\r\n                     * either when opening a modal (see [getButtons]{@link ModalManager#getButtons})) or\r\n                     * when adding a button to an existing modal (see [open]{@link ModalService#open})\r\n                     *\r\n                     * ### Example\r\n                     *      myModalManager.addButton({\r\n                     *          id: 'button id',\r\n                     *          label: 'cancel_button',\r\n                     *          style: MODAL_BUTTON_STYLES.SECONDARY\r\n                     *      });\r\n                     *\r\n                     */\r\n                    provide: 'MODAL_BUTTON_STYLES',\r\n                    useValue: {\r\n                        /**\r\n                         * Equivalent to SECONDARY\r\n                         */\r\n                        DEFAULT: ModalButtonStyles.Default,\r\n                        /**\r\n                         * Indicates to the modal window that this button is the primary button of the modal, such as save or submit,\r\n                         * and should be styled accordingly.\r\n                         */\r\n                        PRIMARY: ModalButtonStyles.Primary,\r\n                        /**\r\n                         * Indicates to the modal window that this button is a secondary button of the modal, such as cancel,\r\n                         * and should be styled accordingly.\r\n                         */\r\n                        SECONDARY: ModalButtonStyles.Default\r\n                    }\r\n                }\r\n            ]\r\n        })\r\n    ], /* @ngInject */ ModalServiceModule);\r\n    return /* @ngInject */ ModalServiceModule;\r\n}());\r\nexport { /* @ngInject */ ModalServiceModule };\r\n//# sourceMappingURL=ModalServiceModule.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modal/ModalButtonActions.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modal/ModalButtonStyles.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular-ui-bootstrap@0.13.47/node_modules/@types/angular-ui-bootstrap/index.d.ts"],"map":"{\"version\":3,\"file\":\"ModalServiceModule.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/modal/ModalServiceModule.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,8DAA8D;AAC9D,IAAM,mBAAmB,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,yBAAyB;AAEtF;;GAEG;AA6EH;IAAA;IAAiC,CAAC;IAAlC;QA5EC,QAAQ,CAAC;YACN,OAAO,EAAE,CAAC,mBAAmB,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,eAAe,CAAC;YAC9F,SAAS,EAAE;gBACP;oBACI;;;;;;;;;;;;;;uBAcG;oBAEH,OAAO,EAAE,sBAAsB;oBAC/B,QAAQ,EAAE;wBACN;;;2BAGG;wBACH,IAAI,EAAE,kBAAkB,CAAC,IAAI;wBAE7B;;;2BAGG;wBACH,KAAK,EAAE,kBAAkB,CAAC,KAAK;wBAE/B;;;2BAGG;wBACH,OAAO,EAAE,kBAAkB,CAAC,OAAO;qBACtC;iBACJ;gBACD;oBACI;;;;;;;;;;;;;uBAaG;oBACH,OAAO,EAAE,qBAAqB;oBAC9B,QAAQ,EAAE;wBACN;;2BAEG;wBACH,OAAO,EAAE,iBAAiB,CAAC,OAAO;wBAClC;;;2BAGG;wBACH,OAAO,EAAE,iBAAiB,CAAC,OAAO;wBAClC;;;2BAGG;wBACH,SAAS,EAAE,iBAAiB,CAAC,OAAO;qBACvC;iBACJ;aACJ;SACJ,CAAC;0CACgC;IAAD,yCAAC;CAAA,AAAlC,IAAkC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/modal/ModalServiceModule.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Module containing {@link ModalService}.\r\n */\r\nexport declare class ModalServiceModule {\r\n}\r\n"}}
