{"code":"//# sourceMappingURL=types.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/angular@1.7.3/node_modules/@types/angular/index.d.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/di/types.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/di/types.d.ts","writeByteOrderMark":false,"text":"import { TypedMap } from '@smart/utils';\r\nimport * as angular from 'angular';\r\nexport interface SeDirectiveDefinition {\r\n    /**\r\n     * The CSS selector that triggers the instantiation of a directive.\r\n     * selector may be declared as one of the following:\r\n     *\r\n     *      <ul>\r\n     *          <li>element-name: select by element name.</li>\r\n     *          <li>.class: select by class name.</li>\r\n     *          <li>[attribute]: select by attribute name.</li>\r\n     *      </ul>\r\n     *\r\n     * If no selector is set, will default to an element named as the lower camel case of the component class.\r\n     */\r\n    selector?: string;\r\n    /**\r\n     * The array of input data binding\r\n     * The inputs property defines a set of directiveProperty to bindingProperty configuration:\r\n     *\r\n     *      <ul>\r\n     *          <li>directiveProperty specifies the component property where the value is written.</li>\r\n     *          <li>bindingProperty specifies the binding type and/or the DOM property where the value is read from.</li>\r\n     *          binding type is legacy support for \"@\", \"&\" and \"=\" of Angular 1.x\r\n     *      </ul>\r\n     *\r\n     * example: `inputs: ['bankName', 'id: account-id']`\r\n     */\r\n    inputs?: string[];\r\n    /**\r\n     * The list of\r\n     * - [service classes]{@link SeClassProvider}\r\n     * - [service factories]{@link SeFactoryProvider}\r\n     * - [value]{@link SeValueProvider value}\r\n     * or multi providers to be injected into the component.\r\n     */\r\n    providers?: SeProvider[];\r\n    require?: string | string[] | TypedMap<string>;\r\n    transclude?: boolean | TypedMap<string>;\r\n    replace?: boolean;\r\n    controllerAs?: string;\r\n    template?: string;\r\n    templateUrl?: string;\r\n    scope?: boolean | {\r\n        [boundProperty: string]: string;\r\n    };\r\n}\r\nexport interface SeComponentDefinition extends SeDirectiveDefinition {\r\n    /** for Angular components, if set to true, the component will be made available as a web component but with a selector to which  is appended. */\r\n    custom?: boolean;\r\n    /** the HTML file location for this component */\r\n    templateUrl?: string;\r\n    /** the inline HTML template for this component */\r\n    template?: string;\r\n    /** the array of {@link SeComponent} that this new one requires. */\r\n    entryComponents?: SeComponentConstructor[];\r\n}\r\nexport interface SeModuleDefinition {\r\n    /**\r\n     * The array of [\\@SeDirective]{@link SeDirective} and [\\@SeComponent]{@link SeComponent} on which this new [\\@SeModule]{@link SeModule} depends.\r\n     */\r\n    declarations?: (SeDirectiveConstructor | SeComponentConstructor | SeFilterConstructor)[];\r\n    entryComponents?: (SeDirectiveConstructor | SeComponentConstructor)[];\r\n    /**\r\n     * The array of modules on which this new module depends.\r\n     * <br/> This is a mixed array of string (legacy approach) and [\\@SeModule]{@link SeModule} annotated classes (recommended approach).\r\n     */\r\n    imports?: (string | SeModuleConstructor | SeModuleWithProviders)[];\r\n    /**\r\n     * The list of\r\n     * [service classes]{@link SeClassProvider},\r\n     * [service factories]{@link SeFactoryProvider},\r\n     * [value]{@link SeValueProvider}\r\n     * or multi providers to be injected into this new module.\r\n     */\r\n    providers?: SeProvider[];\r\n    /**\r\n     * The injectable callback to be executed at configuration time.\r\n     */\r\n    config?: (...args: any[]) => void;\r\n    /**\r\n     * The injectable callback to be executed at startup time.\r\n     */\r\n    initialize?: (...args: any[]) => void;\r\n}\r\nexport declare type SeFactory = (...arg: any[]) => any;\r\nexport declare type SeConstructor<T = any> = new (...arg: any[]) => T;\r\nexport interface SeModuleConstructor extends SeConstructor {\r\n    moduleName?: string;\r\n}\r\nexport interface SeDirectiveConstructor extends SeConstructor {\r\n    directiveName?: string;\r\n    definition?: angular.IDirective;\r\n    providers?: SeProvider[];\r\n}\r\nexport interface SeFilterConstructor extends SeConstructor {\r\n    filterName?: string;\r\n    transform: (...deps: any[]) => (...args: any[]) => any;\r\n}\r\nexport interface SeComponentConstructor extends SeConstructor {\r\n    componentName?: string;\r\n    selector?: string;\r\n    definition?: angular.IComponentOptions;\r\n    entryComponents?: SeComponentConstructor[];\r\n    providers?: SeProvider[];\r\n}\r\nexport interface SeBaseProvider {\r\n    /**\r\n     * The provider name.\r\n     */\r\n    provide: string;\r\n    /**\r\n     * If set to true, an array of instances will be provided for the same provider name. Useful for\r\n     * configuring a module by many modules.\r\n     */\r\n    multi?: boolean;\r\n}\r\n/**\r\n * Configures an injectable value provider in a [module]{@link SeModule}, component or directive.\r\n */\r\nexport interface SeValueProvider extends SeBaseProvider {\r\n    /**\r\n     * An instance value of the provider.\r\n     */\r\n    useValue: any;\r\n}\r\n/**\r\n * Configures an injectable class provider in a [module]{@link SeModule}, component or directive.\r\n */\r\nexport interface SeClassProvider extends SeBaseProvider {\r\n    /**\r\n     * A class to invoke of the provider.\r\n     */\r\n    useClass: SeConstructor;\r\n}\r\n/**\r\n * Configures an injectable factory provider in a [module]{@link SeModule}, component or directive.\r\n */\r\nexport interface SeFactoryProvider extends SeBaseProvider {\r\n    /**\r\n     * A function to invoke the construction of the provider.\r\n     */\r\n    useFactory: SeFactory;\r\n    /**\r\n     * A list of strings or referenced dependencies to be injected into the factory. The 'ngInject;' hint may be used\r\n     * in replacement of this property.\r\n     */\r\n    deps?: (SeConstructor | SeFactory | string)[];\r\n}\r\n/**\r\n * The returning type of a configurable module.\r\n */\r\nexport interface SeModuleWithProviders {\r\n    seModule: SeModuleConstructor;\r\n    providers: SeProvider[];\r\n}\r\nexport declare type SeProvider = SeValueProvider | SeClassProvider | SeFactoryProvider | SeConstructor | SeFactory;\r\n"}}
