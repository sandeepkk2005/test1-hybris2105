{"code":"import { __awaiter, __decorate, __extends, __generator, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lodash from 'lodash';\r\nimport { objectUtils, GatewayProxied, IPreviewService, LogService, PREVIEW_RESOURCE_URI, RestServiceFactory, SeDowngradeService, UrlUtils } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from './bootstrap/LoadConfigManagerService';\r\n/** @internal */\r\nvar /* @ngInject */ PreviewService = /** @class */ (function (_super) {\r\n    __extends(/* @ngInject */ PreviewService, _super);\r\n    function /* @ngInject */ PreviewService(log, loadConfigManagerService, restServiceFactory, urlUtils) {\r\n        var _this = _super.call(this, urlUtils) || this;\r\n        _this.log = log;\r\n        _this.loadConfigManagerService = loadConfigManagerService;\r\n        _this.restServiceFactory = restServiceFactory;\r\n        _this.ticketIdIdentifier = 'ticketId';\r\n        return _this;\r\n    }\r\n    /* @ngInject */ PreviewService.prototype.createPreview = function (previewData) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requiredFields, response, err_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requiredFields = ['catalogVersions', 'resourcePath'];\r\n                        this.validatePreviewDataAttributes(previewData, requiredFields);\r\n                        return [4 /*yield*/, this.prepareRestService()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 4, , 5]);\r\n                        return [4 /*yield*/, this.previewRestService.save(previewData)];\r\n                    case 3:\r\n                        response = _a.sent();\r\n                        /**\r\n                         * The response object being stringified, when using copy method, has a method named toJSON()\r\n                         * because it is originally of type angular.resource.IResource<IPreviewData> and\r\n                         * that IResource.toJSON() method is responsible to remove $promise, $resolved properties from the response object.\r\n                         */\r\n                        return [2 /*return*/, objectUtils.copy(response)];\r\n                    case 4:\r\n                        err_1 = _a.sent();\r\n                        this.log.error('PreviewService.createPreview() - Error creating preview');\r\n                        return [2 /*return*/, Promise.reject(err_1)];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ PreviewService.prototype.updatePreview = function (previewData) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requiredFields, err_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requiredFields = ['catalogVersions', 'resourcePath', 'ticketId'];\r\n                        this.validatePreviewDataAttributes(previewData, requiredFields);\r\n                        return [4 /*yield*/, this.prepareRestService()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 4, , 5]);\r\n                        return [4 /*yield*/, this.previewByticketRestService.update(previewData)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                    case 4:\r\n                        err_2 = _a.sent();\r\n                        this.log.error('PreviewService.updatePreview() - Error updating preview');\r\n                        return [2 /*return*/, Promise.reject(err_2)];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /* @ngInject */ PreviewService.prototype.getResourcePathFromPreviewUrl = function (previewUrl) {\r\n        var _this = this;\r\n        return this.prepareRestService().then(function () {\r\n            return _this.urlUtils.getAbsoluteURL(_this.domain, previewUrl);\r\n        });\r\n    };\r\n    /* @ngInject */ PreviewService.prototype.prepareRestService = function () {\r\n        var _this = this;\r\n        if (!this.previewRestService || !this.previewByticketRestService) {\r\n            return this.loadConfigManagerService.loadAsObject().then(function (configurations) {\r\n                var RESOURCE_URI = (configurations.previewTicketURI ||\r\n                    PREVIEW_RESOURCE_URI);\r\n                _this.previewRestService = _this.restServiceFactory.get(RESOURCE_URI);\r\n                _this.previewByticketRestService = _this.restServiceFactory.get(RESOURCE_URI, _this.ticketIdIdentifier);\r\n                _this.domain = configurations.domain;\r\n            }, function (err) {\r\n                _this.log.error('PreviewService.getRestService() - Error loading configuration');\r\n                return Promise.reject(err);\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n    /* @ngInject */ PreviewService.prototype.validatePreviewDataAttributes = function (previewData, requiredFields) {\r\n        if (requiredFields) {\r\n            requiredFields.forEach(function (elem) {\r\n                if (lodash.isEmpty(previewData[elem])) {\r\n                    throw new Error(\"ValidatePreviewDataAttributes - \" + elem + \" is empty\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /* @ngInject */ PreviewService = __decorate([\r\n        GatewayProxied(),\r\n        SeDowngradeService(IPreviewService),\r\n        __metadata(\"design:paramtypes\", [LogService,\r\n            LoadConfigManagerService,\r\n            RestServiceFactory,\r\n            UrlUtils])\r\n    ], /* @ngInject */ PreviewService);\r\n    return /* @ngInject */ PreviewService;\r\n}(IPreviewService));\r\nexport { /* @ngInject */ PreviewService };\r\n//# sourceMappingURL=PreviewServiceOuter.js.map","references":["/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types/lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/bootstrap/LoadConfigManagerService.ts"],"map":"{\"version\":3,\"file\":\"PreviewServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/PreviewServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/services/PreviewServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { IPreviewData, IPreviewService, LogService, RestServiceFactory, UrlUtils } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from './bootstrap/LoadConfigManagerService';\r\n/** @internal */\r\nexport declare class PreviewService extends IPreviewService {\r\n    private log;\r\n    private loadConfigManagerService;\r\n    private restServiceFactory;\r\n    private previewRestService;\r\n    private previewByticketRestService;\r\n    private domain;\r\n    private ticketIdIdentifier;\r\n    constructor(log: LogService, loadConfigManagerService: LoadConfigManagerService, restServiceFactory: RestServiceFactory, urlUtils: UrlUtils);\r\n    createPreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    updatePreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    getResourcePathFromPreviewUrl(previewUrl: string): Promise<string>;\r\n    private prepareRestService;\r\n    private validatePreviewDataAttributes;\r\n}\r\n"}}
