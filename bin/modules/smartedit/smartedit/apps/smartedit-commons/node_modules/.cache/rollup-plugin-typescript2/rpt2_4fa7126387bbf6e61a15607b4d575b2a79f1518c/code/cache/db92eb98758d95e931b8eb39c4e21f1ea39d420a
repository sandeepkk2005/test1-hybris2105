{"code":"/**\r\n * INotificationService provides a service to display visual cues to inform\r\n * the user of the state of the application in the container or the iFramed application.\r\n * The interface defines the methods required to manage notifications that are to be displayed to the user.\r\n */\r\nvar INotificationService = /** @class */ (function () {\r\n    function INotificationService() {\r\n    }\r\n    /**\r\n     * This method creates a new notification based on the given configuration and\r\n     * adds it to the top of the list.\r\n     *\r\n     * The configuration must contain either one of componentName, template or templateUrl.\r\n     *\r\n     * ### Throws\r\n     *\r\n     * - Throws An error if no configuration is given.\r\n     * - Throws An error if the configuration does not contain a unique identifier.\r\n     * - Throws An error if the configuration's unique identifier is an empty string.\r\n     * - Throws An error if the configuration does not contain a componenName, template or templateUrl.\r\n     * - Throws An error if the configuration contains more than one template type.\r\n     */\r\n    INotificationService.prototype.pushNotification = function (configuration) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * Moves the notification with the given ID from the list.\r\n     */\r\n    INotificationService.prototype.removeNotification = function (notificationId) {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    /**\r\n     * This method removes all notifications.\r\n     */\r\n    INotificationService.prototype.removeAllNotifications = function () {\r\n        'proxyFunction';\r\n        return null;\r\n    };\r\n    return INotificationService;\r\n}());\r\nexport { INotificationService };\r\n//# sourceMappingURL=INotificationService.js.map","references":[],"map":"{\"version\":3,\"file\":\"INotificationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/INotificationService.ts\"],\"names\":[],\"mappings\":\"AAgDA;;;;GAIG;AACH;IAAA;IAmCA,CAAC;IAlCG;;;;;;;;;;;;;OAaG;IACH,+CAAgB,GAAhB,UAAiB,aAAyC;QACtD,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,iDAAkB,GAAlB,UAAmB,cAAsB;QACrC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,qDAAsB,GAAtB;QACI,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,2BAAC;AAAD,CAAC,AAnCD,IAmCC\"}","dts":{"name":"/Users/sandeepkalpane/Data/hybris2105/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/services/interfaces/INotificationService.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Interface for Notification Configuration\r\n */\r\nexport interface INotificationConfiguration {\r\n    id: string;\r\n    /**\r\n     * **Deprecated since 2005, use [componentName]{@link INotificationConfiguration#componentName}.**\r\n     *\r\n     * Either one of componentName, template or templateUrl must be present to display a notification.\r\n     * @deprecated\r\n     */\r\n    template?: string;\r\n    /**\r\n     * **Deprecated since 2005, use [componentName]{@link INotificationConfiguration#componentName}.**\r\n     *\r\n     * Either one of componentName, template or templateUrl must be present to display a notification.\r\n     * @deprecated\r\n     */\r\n    templateUrl?: string;\r\n    /**\r\n     * Component class name, decorated with @SeCustomComponent.\r\n     *\r\n     * Component must be also registered in @NgModule entryComponents array.\r\n     *\r\n     * Either one of componentName, template or templateUrl must be present to display a notification.\r\n     *\r\n     * ### Example\r\n     *\r\n     *      \\@SeCustomComponent()\r\n     *      \\@Component({\r\n     *          selector: 'se-my-custom-component',\r\n     *          templateUrl: './SeMyComponent.html'\r\n     *      })\r\n     *      export class MyCustomComponent {}\r\n     *\r\n     *      componentName = 'MyCustomComponent'\r\n     *      or\r\n     *      componentName = MyCustomComponent.name\r\n     */\r\n    componentName?: string;\r\n}\r\n/**\r\n * INotificationService provides a service to display visual cues to inform\r\n * the user of the state of the application in the container or the iFramed application.\r\n * The interface defines the methods required to manage notifications that are to be displayed to the user.\r\n */\r\nexport declare abstract class INotificationService {\r\n    /**\r\n     * This method creates a new notification based on the given configuration and\r\n     * adds it to the top of the list.\r\n     *\r\n     * The configuration must contain either one of componentName, template or templateUrl.\r\n     *\r\n     * ### Throws\r\n     *\r\n     * - Throws An error if no configuration is given.\r\n     * - Throws An error if the configuration does not contain a unique identifier.\r\n     * - Throws An error if the configuration's unique identifier is an empty string.\r\n     * - Throws An error if the configuration does not contain a componenName, template or templateUrl.\r\n     * - Throws An error if the configuration contains more than one template type.\r\n     */\r\n    pushNotification(configuration: INotificationConfiguration): PromiseLike<void>;\r\n    /**\r\n     * Moves the notification with the given ID from the list.\r\n     */\r\n    removeNotification(notificationId: string): PromiseLike<void>;\r\n    /**\r\n     * This method removes all notifications.\r\n     */\r\n    removeAllNotifications(): PromiseLike<void>;\r\n}\r\n"}}
